/* The following code was generated by JFlex 1.6.0 */

package lexer;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory.Location;
import generation.Medium;
import parser.Parser;
import tree.DefaultTreeNodeSymbol;
import tree.symbols.*;

import java.io.*;

import java.util.LinkedList;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.0
 * from the specification file <tt>/home/alexander/Documents/Uni/BachelorArbeit/compiler/compiler/src/lexer/Lexer.jflex</tt>
 */
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\26\1\30\1\116\1\26\1\31\22\0\1\26\1\102\1\37"+
    "\1\34\1\4\1\73\1\76\1\35\1\105\1\106\1\33\1\10\1\113"+
    "\1\72\1\36\1\32\1\1\7\3\1\20\1\2\1\110\1\112\1\74"+
    "\1\101\1\75\1\22\1\0\1\62\1\63\1\64\1\5\1\7\1\13"+
    "\1\65\1\4\1\66\2\4\1\15\1\4\1\67\1\4\1\11\2\4"+
    "\1\70\1\71\1\17\2\4\1\6\2\4\1\107\1\21\1\111\1\77"+
    "\1\55\1\0\1\40\1\24\1\46\1\52\1\44\1\12\1\54\1\50"+
    "\1\51\1\4\1\45\1\14\1\53\1\23\1\42\1\61\1\4\1\43"+
    "\1\47\1\41\1\16\1\27\1\57\1\25\1\60\1\56\1\103\1\100"+
    "\1\104\1\114\6\0\1\116\41\0\1\115\u1f80\0\1\116\1\116\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\4\3\1\5\1\3"+
    "\2\6\1\7\1\10\1\11\1\1\1\12\1\1\14\3"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\2\3\0\3\2\1\0"+
    "\1\37\1\40\4\3\2\0\4\3\1\41\1\0\1\42"+
    "\1\43\3\11\2\0\1\44\1\45\1\0\1\46\16\3"+
    "\1\47\1\3\1\50\20\3\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\1\2\1\0\1\44\1\0\4\2"+
    "\1\3\1\70\7\3\2\41\2\0\1\11\1\0\1\44"+
    "\1\71\3\0\10\3\1\72\12\3\1\73\24\3\1\74"+
    "\1\75\1\0\2\3\1\76\4\3\1\77\1\0\1\41"+
    "\1\40\4\3\1\100\1\101\1\3\1\102\2\3\1\103"+
    "\11\3\1\104\17\3\1\105\1\3\1\106\2\3\1\107"+
    "\1\110\7\3\1\111\2\3\1\112\13\3\1\113\6\3"+
    "\1\114\1\115\4\3\1\116\2\3\1\117\1\3\1\120"+
    "\1\121\1\122\1\123\1\124\1\125\1\126\2\3\1\127"+
    "\11\3\1\130\2\3\1\131\3\3\1\132\5\3\1\133"+
    "\6\3\1\134\1\135\1\136\1\137\1\140\2\3\1\141"+
    "\1\142\1\143\1\144\1\145\4\3\1\146\2\3\1\147"+
    "\3\3\1\150\2\3\1\151\5\3\1\152\1\153";

  private static int [] zzUnpackAction() {
    int [] result = new int[371];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\117\0\236\0\355\0\u013c\0\u018b\0\u01da\0\u0229"+
    "\0\u0278\0\u02c7\0\117\0\u0316\0\117\0\u0365\0\u03b4\0\u0403"+
    "\0\u0452\0\u04a1\0\u04f0\0\u053f\0\u058e\0\u05dd\0\u062c\0\u067b"+
    "\0\u06ca\0\u0719\0\u0768\0\u07b7\0\u0806\0\u0855\0\u08a4\0\u08f3"+
    "\0\u0942\0\u0991\0\u09e0\0\u0a2f\0\u0a7e\0\u0acd\0\u0b1c\0\u0b6b"+
    "\0\u0bba\0\117\0\117\0\117\0\117\0\117\0\u0c09\0\117"+
    "\0\117\0\117\0\117\0\117\0\u0c58\0\u0ca7\0\u0cf6\0\u0d45"+
    "\0\u0d94\0\u0de3\0\u0e32\0\u0e81\0\117\0\117\0\u0ed0\0\u0f1f"+
    "\0\u0f6e\0\u0fbd\0\u04a1\0\u053f\0\u100c\0\u105b\0\u10aa\0\u10f9"+
    "\0\u1148\0\u1197\0\117\0\117\0\u11e6\0\117\0\u1235\0\u1284"+
    "\0\u12d3\0\u1322\0\u1371\0\u13c0\0\u140f\0\u145e\0\u14ad\0\u14fc"+
    "\0\u154b\0\u159a\0\u15e9\0\u1638\0\u1687\0\u16d6\0\u1725\0\u1774"+
    "\0\u17c3\0\u1812\0\u1861\0\u013c\0\u18b0\0\u18ff\0\u194e\0\u199d"+
    "\0\u19ec\0\u1a3b\0\u1a8a\0\u1ad9\0\u1b28\0\u1b77\0\u1bc6\0\u1c15"+
    "\0\u1c64\0\u1cb3\0\u1d02\0\u1d51\0\u1da0\0\u1def\0\117\0\117"+
    "\0\117\0\117\0\u1e3e\0\117\0\u1e8d\0\117\0\117\0\117"+
    "\0\117\0\117\0\117\0\117\0\117\0\u1edc\0\u1f2b\0\u1f7a"+
    "\0\u1fc9\0\u2018\0\117\0\u2067\0\u20b6\0\u2105\0\u013c\0\u2154"+
    "\0\u21a3\0\u21f2\0\u2241\0\u2290\0\u22df\0\u232e\0\117\0\u237d"+
    "\0\u23cc\0\u241b\0\u246a\0\u24b9\0\117\0\117\0\u2508\0\u2557"+
    "\0\u25a6\0\u25f5\0\u2644\0\u2693\0\u26e2\0\u2731\0\u2780\0\u27cf"+
    "\0\u281e\0\u013c\0\u286d\0\u28bc\0\u290b\0\u295a\0\u29a9\0\u29f8"+
    "\0\u2a47\0\u2a96\0\u2ae5\0\u2b34\0\u013c\0\u2b83\0\u2bd2\0\u2c21"+
    "\0\u2c70\0\u2cbf\0\u2d0e\0\u2d5d\0\u2dac\0\u2dfb\0\u2e4a\0\u2e99"+
    "\0\u2ee8\0\u2f37\0\u2f86\0\u2fd5\0\u3024\0\u3073\0\u30c2\0\u3111"+
    "\0\u3160\0\117\0\117\0\u31af\0\u31fe\0\u324d\0\u013c\0\u329c"+
    "\0\u32eb\0\u333a\0\u3389\0\u013c\0\u33d8\0\u23cc\0\u013c\0\u3427"+
    "\0\u3476\0\u34c5\0\u3514\0\u013c\0\u013c\0\u3563\0\u013c\0\u35b2"+
    "\0\u3601\0\u013c\0\u3650\0\u369f\0\u36ee\0\u373d\0\u378c\0\u37db"+
    "\0\u382a\0\u3879\0\u38c8\0\u013c\0\u3917\0\u3966\0\u39b5\0\u3a04"+
    "\0\u3a53\0\u3aa2\0\u3af1\0\u3b40\0\u3b8f\0\u3bde\0\u3c2d\0\u3c7c"+
    "\0\u3ccb\0\u3d1a\0\u3d69\0\u013c\0\u3db8\0\u013c\0\u3e07\0\u3e56"+
    "\0\u013c\0\u013c\0\u3ea5\0\u3ef4\0\u3f43\0\u3f92\0\u3fe1\0\u4030"+
    "\0\u407f\0\u013c\0\u40ce\0\u411d\0\u013c\0\u416c\0\u41bb\0\u420a"+
    "\0\u4259\0\u42a8\0\u42f7\0\u4346\0\u4395\0\u43e4\0\u4433\0\u4482"+
    "\0\u013c\0\u44d1\0\u4520\0\u456f\0\u45be\0\u460d\0\u465c\0\u013c"+
    "\0\u013c\0\u46ab\0\u46fa\0\u4749\0\u4798\0\u013c\0\u47e7\0\u4836"+
    "\0\u013c\0\u4885\0\u013c\0\u013c\0\u013c\0\u013c\0\u013c\0\u013c"+
    "\0\u013c\0\u48d4\0\u4923\0\u4972\0\u49c1\0\u4a10\0\u4a5f\0\u4aae"+
    "\0\u4afd\0\u4b4c\0\u4b9b\0\u4bea\0\u4c39\0\u013c\0\u4c88\0\u4cd7"+
    "\0\u013c\0\u4d26\0\u4d75\0\u4dc4\0\u013c\0\u4e13\0\u4e62\0\u4eb1"+
    "\0\u4f00\0\u4f4f\0\u013c\0\u4f9e\0\u4fed\0\u503c\0\u508b\0\u50da"+
    "\0\u5129\0\u013c\0\u013c\0\u013c\0\u013c\0\u013c\0\u5178\0\u51c7"+
    "\0\u013c\0\u013c\0\u013c\0\u013c\0\u013c\0\u5216\0\u5265\0\u52b4"+
    "\0\u5303\0\u013c\0\u5352\0\u53a1\0\u013c\0\u53f0\0\u543f\0\u548e"+
    "\0\u013c\0\u54dd\0\u552c\0\u013c\0\u557b\0\u55ca\0\u5619\0\u5668"+
    "\0\u56b7\0\u013c\0\u013c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[371];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\4\5\1\6\1\5\1\7\1\5"+
    "\1\10\1\11\1\12\1\11\1\4\1\2\1\13\1\5"+
    "\1\14\1\5\1\15\1\16\2\15\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\5\1\27\1\30"+
    "\1\5\1\31\1\32\1\5\1\33\1\34\1\5\1\35"+
    "\1\36\1\5\1\37\1\40\11\5\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\121\0\1\65\1\66\1\65\2\0\1\67\1\70"+
    "\4\0\1\71\1\72\2\73\1\66\4\0\1\67\10\0"+
    "\1\74\5\0\1\70\53\0\3\4\3\0\1\70\4\0"+
    "\1\71\1\72\2\73\1\4\15\0\1\74\5\0\1\70"+
    "\53\0\7\5\1\0\10\5\2\0\3\5\1\0\1\5"+
    "\10\0\32\5\35\0\1\75\70\0\1\76\16\0\7\5"+
    "\1\0\3\5\1\77\4\5\2\0\3\5\1\0\1\5"+
    "\10\0\2\5\1\100\6\5\1\101\20\5\26\0\7\5"+
    "\1\0\10\5\2\0\3\5\1\0\1\5\10\0\2\5"+
    "\1\102\27\5\26\0\7\5\1\0\10\5\2\0\3\5"+
    "\1\0\1\5\5\0\1\103\1\0\1\104\32\5\26\0"+
    "\7\5\1\0\7\5\1\105\2\0\1\106\2\5\1\0"+
    "\1\5\5\0\1\103\1\0\1\104\32\5\26\0\7\5"+
    "\1\0\10\5\2\0\3\5\1\0\1\5\10\0\3\5"+
    "\1\107\26\5\26\0\7\5\1\0\10\5\2\0\3\5"+
    "\1\0\1\5\10\0\2\5\1\110\27\5\57\0\1\111"+
    "\1\112\45\0\1\113\116\0\1\114\15\0\21\21\1\115"+
    "\6\21\1\116\1\117\65\21\21\120\1\121\6\120\1\0"+
    "\4\120\1\0\61\120\1\0\3\122\14\0\1\122\15\0"+
    "\1\123\60\0\21\104\1\124\6\104\1\0\6\104\1\125"+
    "\57\104\1\0\7\5\1\0\5\5\1\126\2\5\2\0"+
    "\3\5\1\0\1\5\10\0\32\5\26\0\7\5\1\0"+
    "\10\5\2\0\3\5\1\0\1\5\10\0\20\5\1\127"+
    "\11\5\26\0\7\5\1\0\10\5\2\0\3\5\1\0"+
    "\1\5\10\0\4\5\1\130\25\5\26\0\7\5\1\0"+
    "\3\5\1\131\4\5\2\0\1\132\1\5\1\133\1\0"+
    "\1\5\10\0\32\5\26\0\7\5\1\0\5\5\1\134"+
    "\2\5\2\0\3\5\1\0\1\5\10\0\1\135\1\5"+
    "\1\136\5\5\1\137\21\5\26\0\7\5\1\0\10\5"+
    "\2\0\3\5\1\0\1\5\10\0\1\5\1\140\6\5"+
    "\1\141\1\142\5\5\1\143\12\5\26\0\7\5\1\0"+
    "\1\5\1\144\6\5\2\0\1\145\2\5\1\0\1\5"+
    "\10\0\32\5\26\0\7\5\1\0\10\5\2\0\3\5"+
    "\1\0\1\5\10\0\2\5\1\146\1\5\1\147\25\5"+
    "\26\0\7\5\1\0\10\5\2\0\3\5\1\0\1\5"+
    "\10\0\2\5\1\150\1\5\1\151\25\5\26\0\7\5"+
    "\1\0\10\5\2\0\3\5\1\0\1\5\10\0\13\5"+
    "\1\152\1\5\1\153\4\5\1\154\1\155\1\156\1\157"+
    "\1\160\1\161\1\162\1\163\26\0\7\5\1\0\10\5"+
    "\2\0\3\5\1\0\1\5\10\0\10\5\1\164\1\165"+
    "\20\5\26\0\7\5\1\0\10\5\2\0\3\5\1\0"+
    "\1\5\10\0\11\5\1\166\20\5\117\0\1\167\2\0"+
    "\1\170\3\0\1\171\112\0\1\53\3\0\1\172\110\0"+
    "\1\52\1\173\4\0\1\174\6\0\1\56\103\0\1\175"+
    "\3\0\1\176\113\0\1\177\2\0\1\200\116\0\1\201"+
    "\115\0\1\202\1\203\116\0\1\204\116\0\1\205\112\0"+
    "\1\60\22\0\1\65\1\66\1\65\3\0\1\70\4\0"+
    "\1\71\1\72\2\73\1\66\15\0\1\74\5\0\1\70"+
    "\53\0\3\66\3\0\1\70\10\0\1\66\15\0\1\74"+
    "\5\0\1\70\53\0\3\206\1\0\1\206\1\0\1\206"+
    "\2\0\2\206\4\0\1\206\3\0\1\206\11\0\1\207"+
    "\1\0\1\206\3\0\1\206\1\0\1\206\3\0\1\206"+
    "\7\0\3\206\33\0\3\210\4\0\1\211\7\0\1\210"+
    "\51\0\1\211\40\0\1\212\1\0\2\213\114\0\1\212"+
    "\2\213\113\0\1\214\1\215\102\0\3\122\3\0\1\70"+
    "\10\0\1\122\23\0\1\70\53\0\7\5\1\0\10\5"+
    "\2\0\3\5\1\0\1\5\10\0\2\5\1\216\27\5"+
    "\26\0\7\5\1\0\10\5\2\0\3\5\1\0\1\5"+
    "\10\0\3\5\1\217\26\5\26\0\7\5\1\0\10\5"+
    "\2\0\1\220\2\5\1\0\1\5\10\0\32\5\26\0"+
    "\7\5\1\0\10\5\2\0\1\221\2\5\1\0\1\5"+
    "\10\0\32\5\26\0\7\5\1\0\10\5\2\0\3\5"+
    "\1\0\1\5\7\0\1\104\32\5\26\0\7\5\1\0"+
    "\10\5\2\0\3\5\1\0\1\5\10\0\7\5\1\222"+
    "\1\5\1\223\20\5\26\0\7\5\1\0\10\5\2\0"+
    "\3\5\1\0\1\5\10\0\4\5\1\224\25\5\26\0"+
    "\7\5\1\0\3\5\1\225\4\5\2\0\3\5\1\0"+
    "\1\5\10\0\11\5\1\226\20\5\25\0\30\111\1\227"+
    "\1\230\65\111\33\231\1\232\63\231\21\21\1\115\7\21"+
    "\1\233\65\21\30\0\1\116\66\0\21\120\1\121\6\120"+
    "\1\0\4\120\1\213\61\120\1\0\1\120\1\0\1\120"+
    "\6\0\1\120\6\0\4\120\1\234\1\0\1\120\5\0"+
    "\1\120\1\0\3\120\1\0\1\120\54\0\3\122\3\0"+
    "\1\70\2\0\4\235\2\0\1\122\23\0\1\70\110\0"+
    "\1\236\61\0\1\104\1\0\1\104\6\0\1\104\6\0"+
    "\4\104\1\237\1\0\1\104\5\0\1\104\1\0\3\104"+
    "\1\0\1\104\70\0\1\240\1\241\1\240\6\0\4\125"+
    "\5\0\1\104\60\0\7\5\1\0\10\5\2\0\3\5"+
    "\1\0\1\5\10\0\1\5\1\242\30\5\26\0\7\5"+
    "\1\0\10\5\2\0\3\5\1\0\1\5\10\0\21\5"+
    "\1\243\10\5\26\0\7\5\1\0\10\5\2\0\3\5"+
    "\1\0\1\5\10\0\1\5\1\244\5\5\1\245\4\5"+
    "\1\246\15\5\26\0\7\5\1\0\10\5\2\0\3\5"+
    "\1\0\1\5\10\0\7\5\1\247\22\5\26\0\7\5"+
    "\1\0\5\5\1\250\2\5\2\0\3\5\1\0\1\5"+
    "\10\0\32\5\26\0\7\5\1\0\10\5\2\0\3\5"+
    "\1\0\1\5\10\0\1\5\1\251\30\5\26\0\7\5"+
    "\1\0\10\5\2\0\3\5\1\0\1\5\10\0\1\5"+
    "\1\252\30\5\26\0\7\5\1\0\10\5\2\0\3\5"+
    "\1\0\1\5\10\0\7\5\1\253\22\5\26\0\7\5"+
    "\1\0\10\5\2\0\1\254\2\5\1\0\1\5\10\0"+
    "\32\5\26\0\7\5\1\0\10\5\2\0\3\5\1\0"+
    "\1\5\10\0\1\255\31\5\26\0\7\5\1\0\10\5"+
    "\2\0\3\5\1\0\1\5\10\0\1\256\2\5\1\257"+
    "\26\5\26\0\7\5\1\0\10\5\2\0\3\5\1\0"+
    "\1\5\10\0\2\5\1\260\27\5\26\0\7\5\1\0"+
    "\10\5\2\0\3\5\1\0\1\5\10\0\14\5\1\261"+
    "\1\5\1\262\13\5\26\0\7\5\1\0\10\5\2\0"+
    "\3\5\1\0\1\5\10\0\11\5\1\263\20\5\26\0"+
    "\7\5\1\0\3\5\1\264\4\5\2\0\3\5\1\0"+
    "\1\5\10\0\1\5\1\265\30\5\26\0\7\5\1\0"+
    "\5\5\1\266\2\5\2\0\3\5\1\0\1\5\10\0"+
    "\32\5\26\0\7\5\1\0\1\5\1\267\6\5\2\0"+
    "\3\5\1\0\1\5\10\0\32\5\26\0\7\5\1\0"+
    "\10\5\2\0\3\5\1\0\1\5\10\0\1\5\1\270"+
    "\30\5\26\0\7\5\1\0\10\5\2\0\1\271\2\5"+
    "\1\0\1\5\10\0\32\5\26\0\7\5\1\0\10\5"+
    "\2\0\3\5\1\0\1\5\10\0\1\272\31\5\26\0"+
    "\7\5\1\0\1\5\1\273\6\5\2\0\3\5\1\0"+
    "\1\5\10\0\3\5\1\274\5\5\1\275\20\5\26\0"+
    "\7\5\1\0\3\5\1\276\4\5\2\0\3\5\1\0"+
    "\1\5\10\0\1\5\1\277\30\5\26\0\7\5\1\0"+
    "\10\5\2\0\3\5\1\0\1\5\10\0\2\5\1\300"+
    "\27\5\26\0\7\5\1\0\10\5\2\0\3\5\1\0"+
    "\1\5\10\0\2\5\1\301\27\5\26\0\7\5\1\0"+
    "\10\5\2\0\3\5\1\0\1\5\10\0\4\5\1\302"+
    "\25\5\26\0\7\5\1\0\10\5\2\0\3\5\1\0"+
    "\1\5\10\0\13\5\1\303\16\5\26\0\7\5\1\0"+
    "\10\5\2\0\3\5\1\0\1\5\10\0\2\5\1\304"+
    "\27\5\26\0\7\5\1\0\10\5\2\0\3\5\1\0"+
    "\1\5\10\0\1\5\1\305\30\5\26\0\7\5\1\0"+
    "\10\5\2\0\3\5\1\0\1\5\10\0\10\5\1\306"+
    "\21\5\26\0\7\5\1\0\10\5\2\0\3\5\1\0"+
    "\1\5\10\0\11\5\1\307\20\5\26\0\7\5\1\0"+
    "\10\5\2\0\3\5\1\0\1\5\10\0\1\5\1\310"+
    "\30\5\26\0\7\5\1\0\10\5\2\0\3\5\1\0"+
    "\1\5\10\0\4\5\1\311\25\5\126\0\1\312\116\0"+
    "\1\313\16\0\3\206\1\0\1\206\1\0\1\206\1\0"+
    "\1\70\2\206\1\71\1\72\2\73\1\206\3\0\1\206"+
    "\11\0\1\314\1\0\1\206\3\0\1\206\1\0\1\206"+
    "\3\0\1\206\6\0\1\70\3\206\33\0\3\314\1\0"+
    "\1\314\1\0\1\314\2\0\2\314\4\0\1\314\3\0"+
    "\1\314\13\0\1\314\3\0\1\314\1\0\1\314\3\0"+
    "\1\314\7\0\3\314\33\0\3\210\6\0\4\235\2\0"+
    "\1\210\77\0\3\210\14\0\1\210\114\0\2\213\113\0"+
    "\1\213\117\0\1\213\102\0\7\5\1\0\10\5\2\0"+
    "\3\5\1\0\1\5\10\0\1\315\31\5\26\0\7\5"+
    "\1\0\10\5\2\0\3\5\1\0\1\5\10\0\1\316"+
    "\31\5\26\0\7\5\1\0\10\5\2\0\3\5\1\0"+
    "\1\5\10\0\14\5\1\317\15\5\26\0\7\5\1\0"+
    "\10\5\2\0\3\5\1\0\1\5\10\0\11\5\1\320"+
    "\20\5\26\0\7\5\1\0\10\5\2\0\3\5\1\0"+
    "\1\5\10\0\2\5\1\321\27\5\26\0\7\5\1\0"+
    "\10\5\2\0\3\5\1\0\1\5\10\0\1\322\31\5"+
    "\26\0\7\5\1\0\10\5\2\0\3\5\1\0\1\5"+
    "\10\0\1\323\31\5\26\0\7\5\1\0\10\5\2\0"+
    "\3\5\1\0\1\5\10\0\12\5\1\324\17\5\55\0"+
    "\1\227\66\0\33\231\1\325\115\231\1\326\1\325\63\231"+
    "\21\21\1\115\7\21\1\117\65\21\1\0\3\120\1\0"+
    "\1\120\1\0\1\120\2\0\2\120\4\0\1\120\3\0"+
    "\1\120\13\0\1\120\3\0\1\120\1\0\1\120\3\0"+
    "\1\120\7\0\3\120\33\0\3\104\1\0\1\104\1\0"+
    "\1\104\2\0\2\104\4\0\1\104\3\0\1\104\13\0"+
    "\1\104\3\0\1\104\1\0\1\104\3\0\1\104\7\0"+
    "\3\104\71\0\1\104\77\0\1\240\16\0\1\104\60\0"+
    "\7\5\1\0\10\5\2\0\3\5\1\0\1\5\10\0"+
    "\2\5\1\327\27\5\26\0\7\5\1\0\10\5\2\0"+
    "\3\5\1\0\1\5\10\0\4\5\1\330\25\5\26\0"+
    "\7\5\1\0\5\5\1\331\2\5\2\0\3\5\1\0"+
    "\1\5\10\0\32\5\26\0\7\5\1\0\10\5\2\0"+
    "\3\5\1\0\1\5\10\0\1\5\1\332\30\5\26\0"+
    "\7\5\1\0\10\5\2\0\3\5\1\0\1\5\10\0"+
    "\11\5\1\333\20\5\26\0\7\5\1\0\10\5\2\0"+
    "\3\5\1\0\1\5\10\0\4\5\1\334\25\5\26\0"+
    "\7\5\1\0\10\5\2\0\3\5\1\0\1\5\10\0"+
    "\13\5\1\335\16\5\26\0\7\5\1\0\10\5\2\0"+
    "\3\5\1\0\1\5\10\0\4\5\1\336\25\5\26\0"+
    "\7\5\1\0\10\5\2\0\3\5\1\0\1\5\10\0"+
    "\4\5\1\337\25\5\26\0\7\5\1\0\10\5\2\0"+
    "\3\5\1\0\1\5\10\0\1\5\1\340\5\5\1\341"+
    "\22\5\26\0\7\5\1\0\10\5\2\0\3\5\1\0"+
    "\1\5\10\0\3\5\1\342\26\5\26\0\7\5\1\0"+
    "\10\5\2\0\3\5\1\0\1\5\10\0\1\5\1\343"+
    "\30\5\26\0\7\5\1\0\5\5\1\344\2\5\2\0"+
    "\3\5\1\0\1\5\10\0\32\5\26\0\7\5\1\0"+
    "\10\5\2\0\3\5\1\0\1\5\10\0\3\5\1\345"+
    "\26\5\26\0\7\5\1\0\10\5\2\0\1\346\2\5"+
    "\1\0\1\5\10\0\32\5\26\0\7\5\1\0\10\5"+
    "\2\0\3\5\1\0\1\5\10\0\4\5\1\347\25\5"+
    "\26\0\7\5\1\0\10\5\2\0\3\5\1\0\1\5"+
    "\10\0\1\5\1\350\30\5\26\0\7\5\1\0\10\5"+
    "\2\0\3\5\1\0\1\5\10\0\11\5\1\351\20\5"+
    "\26\0\7\5\1\0\10\5\2\0\1\5\1\352\1\5"+
    "\1\0\1\5\10\0\32\5\26\0\7\5\1\0\10\5"+
    "\2\0\3\5\1\0\1\5\10\0\1\353\31\5\26\0"+
    "\7\5\1\0\10\5\2\0\3\5\1\0\1\5\10\0"+
    "\2\5\1\354\27\5\26\0\7\5\1\0\10\5\2\0"+
    "\3\5\1\0\1\5\10\0\4\5\1\355\25\5\26\0"+
    "\7\5\1\0\10\5\2\0\3\5\1\0\1\5\10\0"+
    "\6\5\1\356\23\5\26\0\7\5\1\0\5\5\1\357"+
    "\2\5\2\0\3\5\1\0\1\5\10\0\32\5\26\0"+
    "\7\5\1\0\10\5\2\0\3\5\1\0\1\5\10\0"+
    "\4\5\1\360\25\5\26\0\7\5\1\0\10\5\2\0"+
    "\1\361\2\5\1\0\1\5\10\0\32\5\26\0\7\5"+
    "\1\0\10\5\2\0\3\5\1\0\1\5\10\0\11\5"+
    "\1\362\20\5\26\0\7\5\1\0\10\5\2\0\3\5"+
    "\1\0\1\5\10\0\2\5\1\363\27\5\26\0\7\5"+
    "\1\0\10\5\2\0\3\5\1\0\1\5\10\0\2\5"+
    "\1\364\27\5\26\0\7\5\1\0\10\5\2\0\3\5"+
    "\1\0\1\5\10\0\13\5\1\365\16\5\26\0\7\5"+
    "\1\0\10\5\2\0\1\366\2\5\1\0\1\5\10\0"+
    "\32\5\26\0\7\5\1\0\10\5\2\0\3\5\1\0"+
    "\1\5\10\0\1\367\31\5\26\0\7\5\1\0\10\5"+
    "\2\0\3\5\1\0\1\5\10\0\3\5\1\370\26\5"+
    "\26\0\7\5\1\0\10\5\2\0\3\5\1\0\1\5"+
    "\10\0\1\371\31\5\26\0\7\5\1\0\10\5\2\0"+
    "\3\5\1\0\1\5\10\0\3\5\1\372\26\5\26\0"+
    "\7\5\1\0\3\5\1\373\4\5\2\0\3\5\1\0"+
    "\1\5\10\0\32\5\26\0\7\5\1\0\10\5\2\0"+
    "\3\5\1\0\1\5\10\0\10\5\1\374\21\5\26\0"+
    "\7\5\1\0\3\5\1\375\4\5\2\0\3\5\1\0"+
    "\1\5\10\0\32\5\26\0\3\314\1\0\1\314\1\0"+
    "\1\314\1\0\1\70\2\314\4\0\1\314\3\0\1\314"+
    "\13\0\1\314\3\0\1\314\1\0\1\314\3\0\1\314"+
    "\6\0\1\70\3\314\33\0\7\5\1\0\10\5\2\0"+
    "\3\5\1\0\1\5\10\0\1\5\1\376\30\5\26\0"+
    "\7\5\1\0\3\5\1\377\4\5\2\0\3\5\1\0"+
    "\1\5\10\0\32\5\26\0\7\5\1\0\10\5\2\0"+
    "\3\5\1\0\1\5\10\0\14\5\1\u0100\15\5\26\0"+
    "\7\5\1\0\10\5\2\0\1\u0101\2\5\1\0\1\5"+
    "\10\0\32\5\26\0\7\5\1\0\10\5\2\0\3\5"+
    "\1\0\1\5\10\0\5\5\1\u0102\24\5\26\0\7\5"+
    "\1\0\10\5\2\0\3\5\1\0\1\5\10\0\1\5"+
    "\1\u0103\30\5\25\0\32\231\1\227\1\325\63\231\1\0"+
    "\7\5\1\0\10\5\2\0\3\5\1\0\1\5\10\0"+
    "\12\5\1\u0104\17\5\26\0\7\5\1\0\10\5\2\0"+
    "\3\5\1\0\1\5\10\0\3\5\1\u0105\26\5\26\0"+
    "\7\5\1\0\10\5\2\0\3\5\1\0\1\5\10\0"+
    "\3\5\1\u0106\26\5\26\0\7\5\1\0\10\5\2\0"+
    "\3\5\1\0\1\5\10\0\7\5\1\u0107\22\5\26\0"+
    "\7\5\1\0\10\5\2\0\3\5\1\0\1\5\10\0"+
    "\3\5\1\u0108\26\5\26\0\7\5\1\0\10\5\2\0"+
    "\3\5\1\0\1\5\10\0\11\5\1\u0109\20\5\26\0"+
    "\7\5\1\0\10\5\2\0\3\5\1\0\1\5\10\0"+
    "\1\5\1\u010a\30\5\26\0\7\5\1\0\10\5\2\0"+
    "\3\5\1\0\1\5\10\0\11\5\1\u010b\20\5\26\0"+
    "\7\5\1\0\10\5\2\0\3\5\1\0\1\5\10\0"+
    "\6\5\1\u010c\23\5\26\0\7\5\1\0\10\5\2\0"+
    "\3\5\1\0\1\5\10\0\1\5\1\u010d\30\5\26\0"+
    "\7\5\1\0\10\5\2\0\3\5\1\0\1\5\10\0"+
    "\4\5\1\u010e\25\5\26\0\7\5\1\0\10\5\2\0"+
    "\3\5\1\0\1\5\10\0\2\5\1\u010f\27\5\26\0"+
    "\7\5\1\0\10\5\2\0\3\5\1\0\1\5\10\0"+
    "\6\5\1\u0110\23\5\26\0\7\5\1\0\10\5\2\0"+
    "\1\u0111\2\5\1\0\1\5\10\0\32\5\26\0\7\5"+
    "\1\0\3\5\1\u0112\4\5\2\0\3\5\1\0\1\5"+
    "\10\0\32\5\26\0\7\5\1\0\5\5\1\u0113\2\5"+
    "\2\0\3\5\1\0\1\5\10\0\32\5\26\0\7\5"+
    "\1\0\10\5\2\0\3\5\1\0\1\5\10\0\3\5"+
    "\1\u0114\26\5\26\0\7\5\1\0\10\5\2\0\3\5"+
    "\1\0\1\5\10\0\3\5\1\u0115\26\5\26\0\7\5"+
    "\1\0\10\5\2\0\1\u0116\2\5\1\0\1\5\10\0"+
    "\32\5\26\0\7\5\1\0\10\5\2\0\3\5\1\0"+
    "\1\5\10\0\7\5\1\245\22\5\26\0\7\5\1\0"+
    "\3\5\1\264\4\5\2\0\3\5\1\0\1\5\10\0"+
    "\32\5\26\0\7\5\1\0\10\5\2\0\3\5\1\0"+
    "\1\5\10\0\14\5\1\u0117\15\5\26\0\7\5\1\0"+
    "\10\5\2\0\3\5\1\0\1\5\10\0\13\5\1\u0118"+
    "\16\5\26\0\7\5\1\0\3\5\1\u0119\4\5\2\0"+
    "\3\5\1\0\1\5\10\0\32\5\26\0\7\5\1\0"+
    "\10\5\2\0\3\5\1\0\1\5\10\0\21\5\1\u011a"+
    "\10\5\26\0\7\5\1\0\10\5\2\0\3\5\1\0"+
    "\1\5\10\0\4\5\1\u011b\25\5\26\0\7\5\1\0"+
    "\10\5\2\0\3\5\1\0\1\5\10\0\14\5\1\u011c"+
    "\15\5\26\0\7\5\1\0\10\5\2\0\3\5\1\0"+
    "\1\5\10\0\4\5\1\u011d\25\5\26\0\7\5\1\0"+
    "\10\5\2\0\3\5\1\0\1\5\10\0\1\5\1\u011e"+
    "\30\5\26\0\7\5\1\0\10\5\2\0\3\5\1\0"+
    "\1\5\10\0\4\5\1\u011f\25\5\26\0\7\5\1\0"+
    "\10\5\2\0\3\5\1\0\1\5\10\0\4\5\1\u0120"+
    "\25\5\26\0\7\5\1\0\10\5\2\0\3\5\1\0"+
    "\1\5\10\0\12\5\1\u0121\17\5\26\0\7\5\1\0"+
    "\3\5\1\u0122\4\5\2\0\3\5\1\0\1\5\10\0"+
    "\32\5\26\0\7\5\1\0\10\5\2\0\1\u0123\2\5"+
    "\1\0\1\5\10\0\32\5\26\0\7\5\1\0\10\5"+
    "\2\0\3\5\1\0\1\5\10\0\11\5\1\u0124\20\5"+
    "\26\0\7\5\1\0\10\5\2\0\3\5\1\0\1\5"+
    "\10\0\4\5\1\u0125\25\5\26\0\7\5\1\0\10\5"+
    "\2\0\1\u0126\2\5\1\0\1\5\10\0\32\5\26\0"+
    "\7\5\1\0\10\5\2\0\3\5\1\0\1\5\10\0"+
    "\11\5\1\u0127\20\5\26\0\7\5\1\0\10\5\2\0"+
    "\3\5\1\0\1\5\10\0\1\5\1\u0128\30\5\26\0"+
    "\7\5\1\0\10\5\2\0\1\u0129\2\5\1\0\1\5"+
    "\10\0\32\5\26\0\7\5\1\0\10\5\2\0\1\u012a"+
    "\2\5\1\0\1\5\10\0\32\5\26\0\7\5\1\0"+
    "\10\5\2\0\3\5\1\0\1\5\10\0\6\5\1\u012b"+
    "\23\5\26\0\7\5\1\0\10\5\2\0\3\5\1\0"+
    "\1\5\10\0\1\5\1\u012c\30\5\26\0\7\5\1\0"+
    "\10\5\2\0\3\5\1\0\1\5\10\0\12\5\1\u012d"+
    "\17\5\26\0\7\5\1\0\1\5\1\u012e\6\5\2\0"+
    "\3\5\1\0\1\5\10\0\32\5\26\0\7\5\1\0"+
    "\10\5\2\0\3\5\1\0\1\5\10\0\10\5\1\u012f"+
    "\21\5\26\0\7\5\1\0\10\5\2\0\3\5\1\0"+
    "\1\5\10\0\4\5\1\u0130\25\5\26\0\7\5\1\0"+
    "\10\5\2\0\3\5\1\0\1\5\10\0\4\5\1\u0131"+
    "\25\5\26\0\7\5\1\0\3\5\1\u0132\4\5\2\0"+
    "\3\5\1\0\1\5\10\0\32\5\26\0\7\5\1\0"+
    "\10\5\2\0\3\5\1\0\1\5\10\0\1\u0133\31\5"+
    "\26\0\7\5\1\0\10\5\2\0\3\5\1\0\1\5"+
    "\10\0\2\5\1\u0134\27\5\26\0\7\5\1\0\10\5"+
    "\2\0\3\5\1\0\1\5\10\0\6\5\1\u0135\23\5"+
    "\26\0\7\5\1\0\10\5\2\0\1\u0136\2\5\1\0"+
    "\1\5\10\0\32\5\26\0\7\5\1\0\10\5\2\0"+
    "\3\5\1\0\1\5\10\0\11\5\1\u0137\20\5\26\0"+
    "\7\5\1\0\3\5\1\u0138\4\5\2\0\3\5\1\0"+
    "\1\5\10\0\32\5\26\0\7\5\1\0\10\5\2\0"+
    "\3\5\1\0\1\5\10\0\3\5\1\u0139\26\5\26\0"+
    "\7\5\1\0\10\5\2\0\3\5\1\0\1\5\10\0"+
    "\11\5\1\u013a\20\5\26\0\7\5\1\0\10\5\2\0"+
    "\3\5\1\0\1\5\10\0\1\5\1\u013b\30\5\26\0"+
    "\7\5\1\0\10\5\2\0\3\5\1\0\1\5\10\0"+
    "\11\5\1\u013c\20\5\26\0\7\5\1\0\10\5\2\0"+
    "\3\5\1\0\1\5\10\0\1\u013d\31\5\26\0\7\5"+
    "\1\0\10\5\2\0\3\5\1\0\1\5\10\0\20\5"+
    "\1\u013e\11\5\26\0\7\5\1\0\10\5\2\0\3\5"+
    "\1\0\1\5\10\0\4\5\1\u013f\25\5\26\0\7\5"+
    "\1\0\3\5\1\u0140\4\5\2\0\3\5\1\0\1\5"+
    "\10\0\32\5\26\0\7\5\1\0\1\5\1\u0141\6\5"+
    "\2\0\3\5\1\0\1\5\10\0\32\5\26\0\7\5"+
    "\1\0\10\5\2\0\3\5\1\0\1\5\10\0\6\5"+
    "\1\u0142\23\5\26\0\7\5\1\0\10\5\2\0\3\5"+
    "\1\0\1\5\10\0\4\5\1\u0143\25\5\26\0\7\5"+
    "\1\0\5\5\1\u0144\2\5\2\0\3\5\1\0\1\5"+
    "\10\0\32\5\26\0\7\5\1\0\10\5\2\0\3\5"+
    "\1\0\1\5\10\0\1\5\1\u0145\30\5\26\0\7\5"+
    "\1\0\10\5\2\0\3\5\1\0\1\5\10\0\1\5"+
    "\1\u0146\30\5\26\0\7\5\1\0\10\5\2\0\3\5"+
    "\1\0\1\5\10\0\15\5\1\u0147\14\5\26\0\7\5"+
    "\1\0\10\5\2\0\3\5\1\0\1\5\10\0\15\5"+
    "\1\u0148\14\5\26\0\7\5\1\0\10\5\2\0\3\5"+
    "\1\0\1\5\10\0\1\u0149\1\5\1\u014a\27\5\26\0"+
    "\7\5\1\0\10\5\2\0\3\5\1\0\1\5\10\0"+
    "\6\5\1\u014b\23\5\26\0\7\5\1\0\10\5\2\0"+
    "\3\5\1\0\1\5\10\0\4\5\1\u014c\25\5\26\0"+
    "\7\5\1\0\10\5\2\0\3\5\1\0\1\5\10\0"+
    "\11\5\1\u014d\20\5\26\0\7\5\1\0\10\5\2\0"+
    "\1\u014e\2\5\1\0\1\5\10\0\32\5\26\0\7\5"+
    "\1\0\5\5\1\u014f\2\5\2\0\3\5\1\0\1\5"+
    "\10\0\32\5\26\0\7\5\1\0\10\5\2\0\3\5"+
    "\1\0\1\5\10\0\6\5\1\u0150\23\5\26\0\7\5"+
    "\1\0\10\5\2\0\3\5\1\0\1\5\10\0\12\5"+
    "\1\u0151\17\5\26\0\7\5\1\0\10\5\2\0\3\5"+
    "\1\0\1\5\10\0\12\5\1\u0152\17\5\26\0\7\5"+
    "\1\0\10\5\2\0\3\5\1\0\1\5\10\0\4\5"+
    "\1\u0153\25\5\26\0\7\5\1\0\10\5\2\0\3\5"+
    "\1\0\1\5\10\0\1\5\1\u0154\30\5\26\0\7\5"+
    "\1\0\10\5\2\0\3\5\1\0\1\5\10\0\3\5"+
    "\1\u0155\26\5\26\0\7\5\1\0\10\5\2\0\3\5"+
    "\1\0\1\5\10\0\4\5\1\u0156\25\5\26\0\7\5"+
    "\1\0\10\5\2\0\3\5\1\0\1\5\10\0\2\5"+
    "\1\u0157\27\5\26\0\7\5\1\0\10\5\2\0\3\5"+
    "\1\0\1\5\10\0\1\5\1\u0158\30\5\26\0\7\5"+
    "\1\0\10\5\2\0\3\5\1\0\1\5\10\0\15\5"+
    "\1\u0159\14\5\26\0\7\5\1\0\10\5\2\0\3\5"+
    "\1\0\1\5\10\0\7\5\1\u015a\22\5\26\0\7\5"+
    "\1\0\1\5\1\u015b\6\5\2\0\3\5\1\0\1\5"+
    "\10\0\32\5\26\0\7\5\1\0\10\5\2\0\2\5"+
    "\1\u015c\1\0\1\5\10\0\32\5\26\0\7\5\1\0"+
    "\10\5\2\0\3\5\1\0\1\5\10\0\6\5\1\u015d"+
    "\23\5\26\0\7\5\1\0\10\5\2\0\3\5\1\0"+
    "\1\5\10\0\1\u015e\31\5\26\0\7\5\1\0\10\5"+
    "\2\0\3\5\1\0\1\5\10\0\3\5\1\u015f\26\5"+
    "\26\0\7\5\1\0\10\5\2\0\3\5\1\0\1\5"+
    "\10\0\15\5\1\u0160\14\5\26\0\7\5\1\0\10\5"+
    "\2\0\3\5\1\0\1\5\10\0\15\5\1\u0161\14\5"+
    "\26\0\7\5\1\0\10\5\2\0\3\5\1\0\1\5"+
    "\10\0\3\5\1\u0162\26\5\26\0\7\5\1\0\10\5"+
    "\2\0\3\5\1\0\1\5\10\0\20\5\1\u0163\11\5"+
    "\26\0\7\5\1\0\10\5\2\0\3\5\1\0\1\5"+
    "\10\0\3\5\1\u0164\26\5\26\0\7\5\1\0\10\5"+
    "\2\0\1\u0165\2\5\1\0\1\5\10\0\32\5\26\0"+
    "\7\5\1\0\10\5\2\0\3\5\1\0\1\5\10\0"+
    "\1\u0166\31\5\26\0\7\5\1\0\3\5\1\u0167\4\5"+
    "\2\0\3\5\1\0\1\5\10\0\32\5\26\0\7\5"+
    "\1\0\10\5\2\0\3\5\1\0\1\5\10\0\21\5"+
    "\1\u0168\10\5\26\0\7\5\1\0\10\5\2\0\3\5"+
    "\1\0\1\5\10\0\20\5\1\u0169\11\5\26\0\7\5"+
    "\1\0\10\5\2\0\3\5\1\0\1\5\10\0\7\5"+
    "\1\u016a\22\5\26\0\7\5\1\0\10\5\2\0\3\5"+
    "\1\0\1\5\10\0\2\5\1\u016b\27\5\26\0\7\5"+
    "\1\0\10\5\2\0\3\5\1\0\1\5\10\0\4\5"+
    "\1\u016c\25\5\26\0\7\5\1\0\10\5\2\0\3\5"+
    "\1\0\1\5\10\0\7\5\1\u016d\22\5\26\0\7\5"+
    "\1\0\10\5\2\0\3\5\1\0\1\5\10\0\6\5"+
    "\1\u016e\23\5\26\0\7\5\1\0\10\5\2\0\3\5"+
    "\1\0\1\5\10\0\4\5\1\u016f\25\5\26\0\7\5"+
    "\1\0\10\5\2\0\3\5\1\0\1\5\10\0\1\u0170"+
    "\31\5\26\0\7\5\1\0\10\5\2\0\3\5\1\0"+
    "\1\5\10\0\3\5\1\u0171\26\5\26\0\7\5\1\0"+
    "\3\5\1\u0172\4\5\2\0\3\5\1\0\1\5\10\0"+
    "\32\5\26\0\7\5\1\0\10\5\2\0\3\5\1\0"+
    "\1\5\10\0\1\5\1\u0173\30\5\25\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[22278];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\10\1\1\11\1\1\1\11\34\1\5\11"+
    "\1\1\5\11\1\1\3\0\3\1\1\0\2\11\4\1"+
    "\2\0\5\1\1\0\2\11\1\1\1\11\1\1\2\0"+
    "\2\1\1\0\42\1\4\11\1\1\1\11\1\1\10\11"+
    "\1\1\1\0\1\1\1\0\1\1\1\11\13\1\1\11"+
    "\1\1\2\0\1\1\1\0\2\11\3\0\50\1\2\11"+
    "\1\0\10\1\1\0\236\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[371];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    /* Local variables */
    
    private ComplexSymbolFactory symbolFactory;
    private Medium medium;
    
    private String unit;
    
    // list for storing all generated tokens
    private LinkedList<ComplexSymbol> tokens = new LinkedList<ComplexSymbol>();
    

    /*public Lexer(java.io.InputStream in, ComplexSymbolFactory sf, Medium m) {
        this(in);
        symbolFactory = sf;
        medium = m;
    }*/

    public Lexer(java.io.Reader in, ComplexSymbolFactory sf, Medium m) {
	    this(in);
	    symbolFactory = sf;
	    medium = m;
    }
    
    public void setUnit(String unit) {
    	this.unit = unit;
    }

    private ComplexSymbolFactory.Location getLeft() {
        return new Location(unit,yyline+1,yycolumn+1,yychar);
    }
    private ComplexSymbolFactory.Location getRight() {
        return LocationMethods.calcRight(getLeft(), yytext());
    }

    private ComplexSymbol symbol(DefaultTreeNodeSymbol symbol) {
    	ComplexSymbol s = (ComplexSymbol)symbolFactory.newSymbol(symbol.name, symbol.sym, getLeft(), getRight(), symbol);
    	symbol.setSymbol(s);
		tokens.add(s);
        return s;
    }
    
    /*
     * a list of tokens is stored
     * tokens can be reused without the need to recalculate them
     */
    public LinkedList<ComplexSymbol> getTokens() {
    	return tokens;
    }
    
    private void error(String message) {
    	medium.error(getLeft(), getRight(), message);
    }
    private void warning(String message) {
    	medium.warning(getLeft(), getRight(), message);
    }
    
    public Medium getMedium() {
    	return medium;
    }
    
    private void addWhiteSpaceFiller(String filler) {
    	medium.addWhiteSpaceFiller(getLeft(), getRight(), filler);
    }
    
    


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 232) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;           
    int totalRead = 0;
    while (totalRead < requested) {
      int numRead = zzReader.read(zzBuffer, zzEndRead + totalRead, requested - totalRead);
      if (numRead == -1) {
        break;
      }
      totalRead += numRead;
    }

    if (totalRead > 0) {
      zzEndRead += totalRead;
      if (totalRead == requested) { /* possibly more input available */
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      return false;
    }

    // totalRead = 0: End of stream
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { error("unknown character");
          }
        case 108: break;
        case 2: 
          { return symbol(new TSIConstant(yytext()));
          }
        case 109: break;
        case 3: 
          { if (medium.lookupType(yytext()) || yytext().equals("__builtin_va_list")) {
		return symbol(new TSTypedefName(yytext()));
	} else {
		return symbol(new TSIdentifier(yytext()));
	}
          }
        case 110: break;
        case 4: 
          { return symbol(new TSAddOp());
          }
        case 111: break;
        case 5: 
          { return symbol(new TSQues());
          }
        case 112: break;
        case 6: 
          { /* ignore whitespace */
          }
        case 113: break;
        case 7: 
          { return symbol(new TSDivOp());
          }
        case 114: break;
        case 8: 
          { return symbol(new TSMulOp());
          }
        case 115: break;
        case 9: 
          { String directive = yytext();
	
	if (directive.contains("include")) {
		// we have to collect typedef names in included files
	
		// TODO: find arguments
		ProcessBuilder pb = new ProcessBuilder("cpp", "-P", "-D", "__attribute__(ARGS)=", "-D", "__extension__=", "-D", "__asm__(ARGS)=");
		String parent = new File(unit).getParent();
		if (parent != null)
			pb.directory(new File(parent));
		Process p = pb.start();
		
		BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(p.getOutputStream()));
		writer.write(directive);
		writer.flush();
		writer.close();
		
		medium.setCalmedMode(true);
	
		Lexer scanner = new Lexer(new InputStreamReader(p.getInputStream()), new ComplexSymbolFactory(), medium);
		scanner.setUnit(directive.trim());
		
		Parser parser = new Parser(scanner, new ComplexSymbolFactory(), medium);
		try {
			parser.parse();
		} catch (Exception e1) {
			error(e1.getMessage());
		}
		medium.setCalmedMode(false);
		
		// TODO: need to improve error handling; might also block like this
		BufferedReader br = new BufferedReader(new InputStreamReader(p.getErrorStream()));
		StringBuilder lines = new StringBuilder();
		String line;
		while ((line = br.readLine()) != null) {
	        lines.append(line+"\n");
	    }
	    if (lines.length() != 0)
		    warning(lines.toString());

		try {
			p.waitFor();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		
	}
	
	// we don't want to resolve preprocessor directives, but to preserve them
	addWhiteSpaceFiller(directive);
          }
        case 116: break;
        case 10: 
          { return symbol(new TSDot());
          }
        case 117: break;
        case 11: 
          { return symbol(new TSSubOp());
          }
        case 118: break;
        case 12: 
          { return symbol(new TSModOp());
          }
        case 119: break;
        case 13: 
          { return symbol(new TSLtOp());
          }
        case 120: break;
        case 14: 
          { return symbol(new TSGtOp());
          }
        case 121: break;
        case 15: 
          { return symbol(new TSBandOp());
          }
        case 122: break;
        case 16: 
          { return symbol(new TSXorOp());
          }
        case 123: break;
        case 17: 
          { return symbol(new TSBorOp());
          }
        case 124: break;
        case 18: 
          { return symbol(new TSAssign());
          }
        case 125: break;
        case 19: 
          { return symbol(new TSExcl());
          }
        case 126: break;
        case 20: 
          { return symbol(new TSBraceLeft());
          }
        case 127: break;
        case 21: 
          { return symbol(new TSBraceRight());
          }
        case 128: break;
        case 22: 
          { return symbol(new TSParLeft());
          }
        case 129: break;
        case 23: 
          { return symbol(new TSParRight());
          }
        case 130: break;
        case 24: 
          { return symbol(new TSBracketLeft());
          }
        case 131: break;
        case 25: 
          { return symbol(new TSColon());
          }
        case 132: break;
        case 26: 
          { return symbol(new TSBracketRight());
          }
        case 133: break;
        case 27: 
          { return symbol(new TSSemicolon());
          }
        case 134: break;
        case 28: 
          { return symbol(new TSComma());
          }
        case 135: break;
        case 29: 
          { return symbol(new TSTilde());
          }
        case 136: break;
        case 30: 
          { return symbol(new TSCompOp());
          }
        case 137: break;
        case 31: 
          { return symbol(new TSIncOp());
          }
        case 138: break;
        case 32: 
          { return symbol(new TSAddAssign());
          }
        case 139: break;
        case 33: 
          { // we want to preserve comments, but don't pass on a token
	addWhiteSpaceFiller(yytext());
          }
        case 140: break;
        case 34: 
          { return symbol(new TSDivAssign());
          }
        case 141: break;
        case 35: 
          { return symbol(new TSMulAssign());
          }
        case 142: break;
        case 36: 
          { return symbol(new TSFConstant(yytext()));
          }
        case 143: break;
        case 37: 
          { return symbol(new TSSetOp());
          }
        case 144: break;
        case 38: 
          { return symbol(new TSStringLiteral(yytext()));
          }
        case 145: break;
        case 39: 
          { return symbol(new TSIf());
          }
        case 146: break;
        case 40: 
          { return symbol(new TSDo());
          }
        case 147: break;
        case 41: 
          { return symbol(new TSDecOp());
          }
        case 148: break;
        case 42: 
          { return symbol(new TSPtrOp());
          }
        case 149: break;
        case 43: 
          { return symbol(new TSSubAssign());
          }
        case 150: break;
        case 44: 
          { return symbol(new TSModAssign());
          }
        case 151: break;
        case 45: 
          { return symbol(new TSLeftOp());
          }
        case 152: break;
        case 46: 
          { return symbol(new TSLeOp());
          }
        case 153: break;
        case 47: 
          { return symbol(new TSRightOp());
          }
        case 154: break;
        case 48: 
          { return symbol(new TSGeOp());
          }
        case 155: break;
        case 49: 
          { return symbol(new TSAndOp());
          }
        case 156: break;
        case 50: 
          { return symbol(new TSAndAssign());
          }
        case 157: break;
        case 51: 
          { return symbol(new TSXorAssign());
          }
        case 158: break;
        case 52: 
          { return symbol(new TSOrOp());
          }
        case 159: break;
        case 53: 
          { return symbol(new TSOrAssign());
          }
        case 160: break;
        case 54: 
          { return symbol(new TSEqOp());
          }
        case 161: break;
        case 55: 
          { return symbol(new TSNeOp());
          }
        case 162: break;
        case 56: 
          { return symbol(new TSFor());
          }
        case 163: break;
        case 57: 
          { return symbol(new TSEllipsis());
          }
        case 164: break;
        case 58: 
          { return symbol(new TSCut());
          }
        case 165: break;
        case 59: 
          { return symbol(new TSInt());
          }
        case 166: break;
        case 60: 
          { return symbol(new TSLeftAssign());
          }
        case 167: break;
        case 61: 
          { return symbol(new TSRightAssign());
          }
        case 168: break;
        case 62: 
          { return symbol(new TSLong());
          }
        case 169: break;
        case 63: 
          { return symbol(new TSVoid());
          }
        case 170: break;
        case 64: 
          { return symbol(new TSElse());
          }
        case 171: break;
        case 65: 
          { return symbol(new TSEnum());
          }
        case 172: break;
        case 66: 
          { return symbol(new TSCase());
          }
        case 173: break;
        case 67: 
          { return symbol(new TSChar());
          }
        case 174: break;
        case 68: 
          { return symbol(new TSGoto());
          }
        case 175: break;
        case 69: 
          { return symbol(new TSWith());
          }
        case 176: break;
        case 70: 
          { return symbol(new TSFloat());
          }
        case 177: break;
        case 71: 
          { return symbol(new TSUnion());
          }
        case 178: break;
        case 72: 
          { return symbol(new TSBreak());
          }
        case 179: break;
        case 73: 
          { return symbol(new TSConst());
          }
        case 180: break;
        case 74: 
          { return symbol(new TSShort());
          }
        case 181: break;
        case 75: 
          { return symbol(new TSBool());
          }
        case 182: break;
        case 76: 
          { return symbol(new TSWhile());
          }
        case 183: break;
        case 77: 
          { return symbol(new TSYield());
          }
        case 184: break;
        case 78: 
          { return symbol(new TSReturn());
          }
        case 185: break;
        case 79: 
          { return symbol(new TSExtern());
          }
        case 186: break;
        case 80: 
          { return symbol(new TSStatic());
          }
        case 187: break;
        case 81: 
          { return symbol(new TSStruct());
          }
        case 188: break;
        case 82: 
          { return symbol(new TSSigned());
          }
        case 189: break;
        case 83: 
          { return symbol(new TSSizeof());
          }
        case 190: break;
        case 84: 
          { return symbol(new TSSwitch());
          }
        case 191: break;
        case 85: 
          { return symbol(new TSInline());
          }
        case 192: break;
        case 86: 
          { return symbol(new TSDouble());
          }
        case 193: break;
        case 87: 
          { return symbol(new TSMacro());
          }
        case 194: break;
        case 88: 
          { return symbol(new TSFinally());
          }
        case 195: break;
        case 89: 
          { return symbol(new TSTypedef());
          }
        case 196: break;
        case 90: 
          { return symbol(new TSDefault());
          }
        case 197: break;
        case 91: 
          { return symbol(new TSAtomic());
          }
        case 198: break;
        case 92: 
          { return symbol(new TSUnsigned());
          }
        case 199: break;
        case 93: 
          { return symbol(new TSVolatile());
          }
        case 200: break;
        case 94: 
          { return symbol(new TSRestrict());
          }
        case 201: break;
        case 95: 
          { return symbol(new TSRegister());
          }
        case 202: break;
        case 96: 
          { return symbol(new TSContinue());
          }
        case 203: break;
        case 97: 
          { return symbol(new TSFuncName());
          }
        case 204: break;
        case 98: 
          { return symbol(new TSAlignas());
          }
        case 205: break;
        case 99: 
          { return symbol(new TSAlignof());
          }
        case 206: break;
        case 100: 
          { return symbol(new TSComplex());
          }
        case 207: break;
        case 101: 
          { return symbol(new TSGeneric());
          }
        case 208: break;
        case 102: 
          { return symbol(new TSGenerator());
          }
        case 209: break;
        case 103: 
          { return symbol(new TSNoreturn());
          }
        case 210: break;
        case 104: 
          { return symbol(new TSImaginary());
          }
        case 211: break;
        case 105: 
          { return symbol(new TSMacroType());
          }
        case 212: break;
        case 106: 
          { return symbol(new TSThreadLocal());
          }
        case 213: break;
        case 107: 
          { return symbol(new TSStaticAssert());
          }
        case 214: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {      return symbolFactory.newSymbol("EOF", parser.sym.EOF, getLeft(), getLeft());
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
