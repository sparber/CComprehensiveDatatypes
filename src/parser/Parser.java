
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20140801 (SVN rev 36)
// Sat Nov 22 17:14:02 CET 2014
//----------------------------------------------------

package parser;

import java_cup.runtime.Symbol;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory;
import errors.CXSyntaxError;
import lexer.Lexer;
import generation.Medium;
import tree.DefaultTreeNodeSymbol;
import tree.symbols.*;
import tree.expressions.*;
import tree.declarations.*;
import tree.statements.*;
import tree.translation_unit.*;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20140801 (SVN rev 36) generated parser.
  * @version Sat Nov 22 17:14:02 CET 2014
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0142\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\005" +
    "\000\002\002\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\004\003\000\002\005\003\000\002" +
    "\005\003\000\002\047\003\000\002\047\004\000\002\050" +
    "\006\000\002\050\007\000\002\046\003\000\002\046\003" +
    "\000\002\046\005\000\002\046\005\000\002\006\010\000" +
    "\002\007\003\000\002\007\005\000\002\010\005\000\002" +
    "\010\005\000\002\011\003\000\002\011\006\000\002\011" +
    "\005\000\002\011\006\000\002\011\005\000\002\011\005" +
    "\000\002\011\004\000\002\011\004\000\002\011\010\000" +
    "\002\011\011\000\002\012\003\000\002\012\005\000\002" +
    "\013\003\000\002\013\004\000\002\013\004\000\002\013" +
    "\004\000\002\013\004\000\002\013\006\000\002\013\006" +
    "\000\002\013\007\000\002\014\003\000\002\014\004\000" +
    "\002\014\005\000\002\014\006\000\002\015\003\000\002" +
    "\015\005\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\020\003\000\002\020\005\000" +
    "\002\020\004\000\002\017\003\000\002\017\006\000\002" +
    "\021\003\000\002\021\005\000\002\021\005\000\002\021" +
    "\005\000\002\022\003\000\002\022\005\000\002\022\005" +
    "\000\002\023\003\000\002\023\005\000\002\023\005\000" +
    "\002\024\003\000\002\024\005\000\002\024\005\000\002" +
    "\024\005\000\002\024\005\000\002\025\003\000\002\025" +
    "\005\000\002\025\005\000\002\026\003\000\002\026\005" +
    "\000\002\027\003\000\002\027\005\000\002\030\003\000" +
    "\002\030\005\000\002\031\003\000\002\031\005\000\002" +
    "\032\003\000\002\032\005\000\002\033\003\000\002\033" +
    "\007\000\002\034\003\000\002\034\005\000\002\035\003" +
    "\000\002\035\003\000\002\035\003\000\002\035\003\000" +
    "\002\035\003\000\002\035\003\000\002\035\003\000\002" +
    "\035\003\000\002\035\003\000\002\035\003\000\002\035" +
    "\003\000\002\036\003\000\002\036\005\000\002\037\003" +
    "\000\002\040\004\000\002\127\002\000\002\040\006\000" +
    "\002\040\003\000\002\041\004\000\002\041\003\000\002" +
    "\041\004\000\002\041\003\000\002\041\004\000\002\041" +
    "\003\000\002\041\004\000\002\041\003\000\002\041\004" +
    "\000\002\041\003\000\002\042\003\000\002\042\005\000" +
    "\002\043\005\000\002\043\003\000\002\043\004\000\002" +
    "\044\003\000\002\044\003\000\002\044\003\000\002\044" +
    "\003\000\002\044\003\000\002\044\003\000\002\045\003" +
    "\000\002\045\003\000\002\045\003\000\002\045\003\000" +
    "\002\045\003\000\002\045\003\000\002\045\003\000\002" +
    "\045\003\000\002\045\003\000\002\045\003\000\002\045" +
    "\003\000\002\045\003\000\002\045\003\000\002\045\003" +
    "\000\002\045\003\000\002\045\003\000\002\045\003\000" +
    "\002\051\006\000\002\051\007\000\002\052\006\000\002" +
    "\052\007\000\002\052\004\000\002\052\004\000\002\053" +
    "\003\000\002\053\003\000\002\054\003\000\002\054\004" +
    "\000\002\055\004\000\002\055\005\000\002\055\003\000" +
    "\002\056\004\000\002\056\003\000\002\056\004\000\002" +
    "\056\003\000\002\057\003\000\002\057\005\000\002\060" +
    "\004\000\002\060\005\000\002\060\003\000\002\061\006" +
    "\000\002\061\007\000\002\061\007\000\002\061\010\000" +
    "\002\061\004\000\002\062\003\000\002\062\005\000\002" +
    "\063\005\000\002\063\003\000\002\064\006\000\002\065" +
    "\003\000\002\065\003\000\002\065\003\000\002\065\003" +
    "\000\002\066\003\000\002\066\003\000\002\067\006\000" +
    "\002\067\006\000\002\070\004\000\002\070\003\000\002" +
    "\071\003\000\002\071\005\000\002\071\005\000\002\071" +
    "\006\000\002\071\010\000\002\071\007\000\002\071\007" +
    "\000\002\071\010\000\002\071\007\000\002\071\006\000" +
    "\002\071\006\000\002\071\006\000\002\071\005\000\002" +
    "\071\006\000\002\071\004\000\002\072\005\000\002\072" +
    "\004\000\002\072\004\000\002\072\003\000\002\072\005" +
    "\000\002\072\004\000\002\072\004\000\002\072\003\000" +
    "\002\073\003\000\002\073\004\000\002\074\005\000\002" +
    "\074\003\000\002\075\003\000\002\075\005\000\002\076" +
    "\004\000\002\076\004\000\002\076\003\000\002\077\003" +
    "\000\002\077\005\000\002\100\004\000\002\100\003\000" +
    "\002\101\004\000\002\101\003\000\002\101\003\000\002" +
    "\102\005\000\002\102\004\000\002\102\005\000\002\102" +
    "\007\000\002\102\006\000\002\102\007\000\002\102\006" +
    "\000\002\102\005\000\002\102\005\000\002\102\005\000" +
    "\002\102\006\000\002\102\010\000\002\102\007\000\002" +
    "\102\007\000\002\102\010\000\002\102\006\000\002\102" +
    "\006\000\002\102\004\000\002\102\005\000\002\102\005" +
    "\000\002\102\006\000\002\102\003\000\002\102\004\000" +
    "\002\103\005\000\002\103\006\000\002\103\003\000\002" +
    "\104\004\000\002\104\003\000\002\104\006\000\002\104" +
    "\005\000\002\105\004\000\002\106\003\000\002\106\004" +
    "\000\002\107\005\000\002\107\004\000\002\110\011\000" +
    "\002\111\003\000\002\130\002\000\002\111\004\000\002" +
    "\111\003\000\002\111\003\000\002\111\003\000\002\111" +
    "\003\000\002\112\005\000\002\112\006\000\002\112\005" +
    "\000\002\114\004\000\002\114\005\000\002\114\006\000" +
    "\002\113\004\000\002\115\003\000\002\115\004\000\002" +
    "\116\003\000\002\116\003\000\002\116\004\000\002\117" +
    "\003\000\002\117\004\000\002\120\011\000\002\120\007" +
    "\000\002\120\007\000\002\121\007\000\002\121\011\000" +
    "\002\121\010\000\002\121\011\000\002\121\010\000\002" +
    "\121\011\000\002\122\005\000\002\122\004\000\002\122" +
    "\004\000\002\122\004\000\002\122\005\000\002\122\005" +
    "\000\002\122\004\000\002\122\005\000\002\122\004\000" +
    "\002\123\003\000\002\123\004\000\002\124\003\000\002" +
    "\124\003\000\002\124\004\000\002\124\004\000\002\124" +
    "\004\000\002\124\004\000\002\131\002\000\002\125\007" +
    "\000\002\132\002\000\002\125\006\000\002\126\003\000" +
    "\002\126\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0229\000\102\003\036\037\026\041\032\042\030\043" +
    "\023\044\040\045\017\046\061\047\007\050\057\051\055" +
    "\052\024\053\010\054\005\055\016\056\054\057\045\060" +
    "\037\061\050\062\013\063\041\064\033\065\044\066\062" +
    "\067\042\070\046\106\031\110\035\112\051\113\012\114" +
    "\021\146\020\001\002\000\014\004\341\117\u01c8\123\u01c7" +
    "\135\161\153\165\001\002\000\002\001\uff78\000\002\001" +
    "\uff6c\000\002\001\uff49\000\002\001\uff79\000\002\001\uff6d" +
    "\000\004\117\u021e\001\002\000\002\001\uff74\000\076\037" +
    "\026\041\032\042\030\043\023\044\040\045\017\046\061" +
    "\047\007\050\057\051\055\052\024\053\010\054\005\055" +
    "\016\056\054\057\045\060\037\061\050\062\013\063\041" +
    "\064\033\065\044\066\062\067\042\070\046\106\031\110" +
    "\035\112\051\114\021\146\020\001\uff86\000\002\001\ufecb" +
    "\000\002\001\uff77\000\002\001\uff7b\000\004\004\u0218\001" +
    "\002\000\002\001\uff7d\000\010\004\u0201\037\u0203\115\u0202" +
    "\001\002\000\002\001\uff7e\000\002\001\uff71\000\002\001" +
    "\uff6a\000\002\001\uff6b\000\002\001\uff90\000\002\001\uff7f" +
    "\000\004\117\u01fc\001\002\000\002\001\uff80\000\002\001" +
    "\uff70\000\076\037\026\041\032\042\030\043\023\044\040" +
    "\045\017\046\061\047\007\050\057\051\055\052\024\053" +
    "\010\054\005\055\016\056\054\057\045\060\037\061\050" +
    "\062\013\063\041\064\033\065\044\066\062\067\042\070" +
    "\046\106\031\110\035\112\051\114\021\146\020\001\uff8c" +
    "\000\004\117\u01f8\001\uff46\000\104\037\026\041\032\042" +
    "\030\043\023\044\040\045\017\046\061\047\007\050\057" +
    "\051\055\052\024\053\010\054\005\055\016\056\054\057" +
    "\045\060\037\061\050\062\013\063\041\064\033\065\044" +
    "\066\062\067\042\070\046\106\031\110\035\112\051\113" +
    "\012\114\021\115\u018b\123\u0189\146\020\001\002\000\002" +
    "\001\uff72\000\002\001\uff7c\000\002\001\uff7a\000\002\001" +
    "\uff62\000\076\037\026\041\032\042\030\043\023\044\040" +
    "\045\017\046\061\047\007\050\057\051\055\052\024\053" +
    "\010\054\005\055\016\056\054\057\045\060\037\061\050" +
    "\062\013\063\041\064\033\065\044\066\062\067\042\070" +
    "\046\106\031\110\035\112\051\114\021\146\020\001\uff8a" +
    "\000\002\001\uff6f\000\002\001\uff73\000\006\004\070\115" +
    "\071\001\002\000\002\001\ufecd\000\002\001\uff75\000\002" +
    "\001\uff44\000\104\002\066\003\036\037\026\041\032\042" +
    "\030\043\023\044\040\045\017\046\061\047\007\050\057" +
    "\051\055\052\024\053\010\054\005\055\016\056\054\057" +
    "\045\060\037\061\050\062\013\063\041\064\033\065\044" +
    "\066\062\067\042\070\046\106\031\110\035\112\051\113" +
    "\012\114\021\146\020\001\002\000\002\001\uff6e\000\002" +
    "\001\uff76\000\002\001\uff47\000\076\037\026\041\032\042" +
    "\030\043\023\044\040\045\017\046\061\047\007\050\057" +
    "\051\055\052\024\053\010\054\005\055\016\056\054\057" +
    "\045\060\037\061\050\062\013\063\041\064\033\065\044" +
    "\066\062\067\042\070\046\106\031\110\035\112\051\114" +
    "\021\146\020\001\uff88\000\002\001\uff48\000\002\001\ufeca" +
    "\000\002\001\uff45\000\002\001\uff63\000\076\037\026\041" +
    "\032\042\030\043\023\044\040\045\017\046\061\047\007" +
    "\050\057\051\055\052\024\053\010\054\005\055\016\056" +
    "\054\057\045\060\037\061\050\062\013\063\041\064\033" +
    "\065\044\066\062\067\042\070\046\106\031\110\035\112" +
    "\051\114\021\146\020\001\uff8e\000\002\001\uff8f\000\002" +
    "\001\uff89\000\002\001\001\000\002\001\ufecc\000\004\115" +
    "\u0181\001\uff4f\000\004\004\073\001\002\000\006\116\u017e" +
    "\124\u017d\001\002\000\002\001\ufff7\000\004\132\076\001" +
    "\uff4b\000\002\001\uff4e\000\054\004\152\005\113\006\133" +
    "\007\077\010\145\011\120\013\112\014\102\040\104\107" +
    "\151\111\142\117\107\127\127\130\115\133\100\134\110" +
    "\135\101\142\137\144\126\145\114\153\103\001\002\000" +
    "\002\001\ufff6\000\002\001\uffca\000\002\001\uffcc\000\054" +
    "\004\152\005\113\006\133\007\077\010\145\011\120\013" +
    "\112\014\102\040\104\107\151\111\142\117\221\127\127" +
    "\130\115\133\100\134\110\135\101\142\137\144\126\145" +
    "\114\153\103\001\002\000\004\117\u016f\001\002\000\002" +
    "\001\ufff8\000\006\133\u011f\134\u011e\001\uffba\000\002\001" +
    "\uffc3\000\126\004\152\005\113\006\133\007\077\010\145" +
    "\011\120\013\112\014\102\037\026\040\104\047\007\050" +
    "\057\051\055\052\024\053\010\054\005\055\016\056\054" +
    "\057\045\060\037\061\050\062\013\063\041\064\033\065" +
    "\044\066\062\067\042\070\046\107\151\110\035\111\142" +
    "\117\107\127\127\130\115\133\100\134\110\135\101\142" +
    "\137\144\126\145\114\146\020\153\103\001\002\000\002" +
    "\001\uffcb\000\002\001\uff4c\000\054\004\152\005\113\006" +
    "\133\007\077\010\145\011\120\013\112\014\102\040\104" +
    "\107\151\111\142\117\221\127\127\130\115\133\100\134" +
    "\110\135\101\142\137\144\126\145\114\153\103\001\002" +
    "\000\002\001\ufffa\000\004\004\u0161\001\002\000\002\001" +
    "\uffc9\000\002\001\ufffe\000\002\001\uffe7\000\054\004\152" +
    "\005\113\006\133\007\077\010\145\011\120\013\112\014" +
    "\102\040\104\107\151\111\142\117\u015e\127\127\130\115" +
    "\133\100\134\110\135\101\142\137\144\126\145\114\153" +
    "\103\001\002\000\006\024\u0157\131\u0158\001\uffa5\000\006" +
    "\021\u0141\022\u0142\001\uffaf\000\004\143\u013d\001\uffab\000" +
    "\002\001\ufff4\000\002\001\uffc1\000\002\001\uffc7\000\002" +
    "\001\uffc8\000\004\154\205\001\uffc6\000\002\001\uff94\000" +
    "\002\001\uffff\000\002\001\ufff9\000\016\012\u014a\013\u0147" +
    "\014\u0149\117\u0148\121\u014b\126\u014c\001\uffdb\000\004\023" +
    "\u0145\001\uffa7\000\006\015\u011b\016\u011c\001\uffb7\000\002" +
    "\001\uffcd\000\004\142\u013f\001\uffad\000\004\144\u013b\001" +
    "\uffa9\000\004\117\u012d\001\002\000\010\135\u0122\136\u0123" +
    "\137\u0121\001\uffbd\000\004\145\114\001\ufffd\000\002\001" +
    "\ufff5\000\002\001\ufffb\000\012\017\u0117\020\u0119\140\u0116" +
    "\141\u0118\001\uffb2\000\054\004\152\005\113\006\133\007" +
    "\077\010\145\011\120\013\112\014\102\040\104\107\151" +
    "\111\142\117\107\127\127\130\115\133\100\134\110\135" +
    "\101\142\137\144\126\145\114\153\103\001\002\000\004" +
    "\117\153\001\002\000\002\001\000\000\054\037\026\047" +
    "\007\050\057\051\055\052\024\053\010\054\005\055\016" +
    "\056\054\057\045\060\037\061\050\062\013\063\041\064" +
    "\033\065\044\066\062\067\042\070\046\110\035\146\020" +
    "\001\002\000\054\037\026\047\007\050\057\051\055\052" +
    "\024\053\010\054\005\055\016\056\054\057\045\060\037" +
    "\061\050\062\013\063\041\064\033\065\044\066\062\067" +
    "\042\070\046\110\035\146\020\001\uff5b\000\004\120\u0113" +
    "\001\002\000\054\037\026\047\007\050\057\051\055\052" +
    "\024\053\010\054\005\055\016\056\054\057\045\060\037" +
    "\061\050\062\013\063\041\064\033\065\044\066\062\067" +
    "\042\070\046\110\035\146\020\001\uff59\000\014\117\163" +
    "\121\167\135\161\147\162\153\165\001\uff1c\000\002\001" +
    "\uff1d\000\016\047\007\050\057\051\055\110\175\135\161" +
    "\153\165\001\uff2d\000\002\001\uff03\000\112\037\026\041" +
    "\032\042\030\043\023\044\040\045\017\046\061\047\007" +
    "\050\057\051\055\052\024\053\010\054\005\055\016\056" +
    "\054\057\045\060\037\061\050\062\013\063\041\064\033" +
    "\065\044\066\062\067\042\070\046\106\031\110\035\112" +
    "\051\114\021\117\163\120\345\121\167\135\161\146\020" +
    "\147\162\153\165\001\002\000\010\117\302\121\303\147" +
    "\301\001\uff19\000\016\047\007\050\057\051\055\110\175" +
    "\135\161\153\165\001\uff29\000\010\117\163\121\167\147" +
    "\162\001\uff1a\000\070\004\152\005\113\006\133\007\077" +
    "\010\145\011\120\013\112\014\102\040\104\043\173\047" +
    "\007\050\057\051\055\107\151\110\175\111\142\117\107" +
    "\122\172\127\127\130\115\133\100\134\110\135\170\142" +
    "\137\144\126\145\114\153\103\001\002\000\004\122\277" +
    "\001\uffcc\000\070\004\152\005\113\006\133\007\077\010" +
    "\145\011\120\013\112\014\102\040\104\043\272\047\007" +
    "\050\057\051\055\107\151\110\175\111\142\117\107\122" +
    "\271\127\127\130\115\133\100\134\110\135\101\142\137" +
    "\144\126\145\114\153\103\001\002\000\002\001\uff17\000" +
    "\064\004\152\005\113\006\133\007\077\010\145\011\120" +
    "\013\112\014\102\040\104\047\007\050\057\051\055\107" +
    "\151\110\175\111\142\117\107\127\127\130\115\133\100" +
    "\134\110\135\101\142\137\144\126\145\114\153\103\001" +
    "\002\000\032\025\203\026\210\027\214\030\207\031\206" +
    "\032\216\033\204\034\211\035\202\036\215\132\213\154" +
    "\205\001\uffc6\000\002\001\uff46\000\002\001\uffa3\000\002" +
    "\001\uff28\000\004\122\201\001\002\000\002\001\uff10\000" +
    "\002\001\uff98\000\002\001\uffa0\000\002\001\uff9a\000\042" +
    "\004\152\005\113\006\133\007\077\010\145\011\120\013" +
    "\112\014\102\040\104\107\151\111\142\117\221\127\127" +
    "\130\115\145\114\153\103\001\uffc4\000\002\001\uff9c\000" +
    "\002\001\uff9d\000\002\001\uff9f\000\002\001\uff99\000\054" +
    "\004\152\005\113\006\133\007\077\010\145\011\120\013" +
    "\112\014\102\040\104\107\151\111\142\117\107\127\127" +
    "\130\115\133\100\134\110\135\101\142\137\144\126\145" +
    "\114\153\103\001\002\000\002\001\uffa1\000\002\001\uff9e" +
    "\000\002\001\uff97\000\002\001\uff9b\000\002\001\uffa2\000" +
    "\002\001\uffc5\000\126\004\152\005\113\006\133\007\077" +
    "\010\145\011\120\013\112\014\102\037\026\040\104\047" +
    "\007\050\057\051\055\052\024\053\010\054\005\055\016" +
    "\056\054\057\045\060\037\061\050\062\013\063\041\064" +
    "\033\065\044\066\062\067\042\070\046\107\151\110\035" +
    "\111\142\117\107\127\127\130\115\133\100\134\110\135" +
    "\101\142\137\144\126\145\114\146\020\153\103\001\002" +
    "\000\004\120\230\001\002\000\002\001\uff96\000\006\120" +
    "\226\124\225\001\002\000\054\004\152\005\113\006\133" +
    "\007\077\010\145\011\120\013\112\014\102\040\104\107" +
    "\151\111\142\117\107\127\127\130\115\133\100\134\110" +
    "\135\101\142\137\144\126\145\114\153\103\001\002\000" +
    "\002\001\ufffc\000\002\001\uff95\000\004\115\231\001\002" +
    "\000\062\004\152\005\113\006\133\007\077\010\145\011" +
    "\120\013\112\014\102\040\104\107\151\111\142\115\242" +
    "\117\107\121\235\126\237\127\127\130\115\133\100\134" +
    "\110\135\101\142\137\144\126\145\114\153\103\001\002" +
    "\000\002\001\ufef9\000\002\001\ufefd\000\006\116\261\124" +
    "\260\001\002\000\054\004\152\005\113\006\133\007\077" +
    "\010\145\011\120\013\112\014\102\040\104\107\151\111" +
    "\142\117\107\127\127\130\115\133\100\134\110\135\101" +
    "\142\137\144\126\145\114\153\103\001\002\000\056\004" +
    "\152\005\113\006\133\007\077\010\145\011\120\013\112" +
    "\014\102\040\104\107\151\111\142\115\242\117\107\127" +
    "\127\130\115\133\100\134\110\135\101\142\137\144\126" +
    "\145\114\153\103\001\002\000\004\004\254\001\002\000" +
    "\002\001\ufeff\000\010\121\235\126\237\132\253\001\002" +
    "\000\062\004\152\005\113\006\133\007\077\010\145\011" +
    "\120\013\112\014\102\040\104\107\151\111\142\115\242" +
    "\117\107\121\235\126\237\127\127\130\115\133\100\134" +
    "\110\135\101\142\137\144\126\145\114\153\103\001\002" +
    "\000\006\116\245\124\244\001\002\000\064\004\152\005" +
    "\113\006\133\007\077\010\145\011\120\013\112\014\102" +
    "\040\104\107\151\111\142\115\242\116\250\117\107\121" +
    "\235\126\237\127\127\130\115\133\100\134\110\135\101" +
    "\142\137\144\126\145\114\153\103\001\002\000\002\001" +
    "\uff01\000\002\001\ufefb\000\056\004\152\005\113\006\133" +
    "\007\077\010\145\011\120\013\112\014\102\040\104\107" +
    "\151\111\142\115\242\117\107\127\127\130\115\133\100" +
    "\134\110\135\101\142\137\144\126\145\114\153\103\001" +
    "\002\000\002\001\uff00\000\002\001\ufefc\000\002\001\ufef8" +
    "\000\002\001\ufefa\000\002\001\ufef6\000\002\001\ufefe\000" +
    "\004\122\257\001\002\000\002\001\ufef7\000\064\004\152" +
    "\005\113\006\133\007\077\010\145\011\120\013\112\014" +
    "\102\040\104\107\151\111\142\115\242\116\262\117\107" +
    "\121\235\126\237\127\127\130\115\133\100\134\110\135" +
    "\101\142\137\144\126\145\114\153\103\001\002\000\002" +
    "\001\uffdf\000\002\001\uffde\000\064\004\152\005\113\006" +
    "\133\007\077\010\145\011\120\013\112\014\102\040\104" +
    "\047\007\050\057\051\055\107\151\110\175\111\142\117" +
    "\107\127\127\130\115\133\100\134\110\135\101\142\137" +
    "\144\126\145\114\153\103\001\002\000\004\122\265\001" +
    "\002\000\002\001\uff14\000\002\001\uff27\000\004\122\270" +
    "\001\002\000\002\001\uff15\000\002\001\uff11\000\054\004" +
    "\152\005\113\006\133\007\077\010\145\011\120\013\112" +
    "\014\102\040\104\107\151\111\142\117\107\127\127\130" +
    "\115\133\100\134\110\135\101\142\137\144\126\145\114" +
    "\153\103\001\002\000\004\122\274\001\002\000\002\001" +
    "\uff12\000\004\122\276\001\002\000\002\001\uff13\000\002" +
    "\001\uff16\000\010\117\302\121\303\147\301\001\uff1b\000" +
    "\002\001\uff02\000\100\037\026\041\032\042\030\043\023" +
    "\044\040\045\017\046\061\047\007\050\057\051\055\052" +
    "\024\053\010\054\005\055\016\056\054\057\045\060\037" +
    "\061\050\062\013\063\041\064\033\065\044\066\062\067" +
    "\042\070\046\106\031\110\035\112\051\114\021\120\327" +
    "\146\020\001\002\000\070\004\152\005\113\006\133\007" +
    "\077\010\145\011\120\013\112\014\102\040\104\043\307" +
    "\047\007\050\057\051\055\107\151\110\175\111\142\117" +
    "\107\122\306\127\127\130\115\133\100\134\110\135\304" +
    "\142\137\144\126\145\114\153\103\001\002\000\004\122" +
    "\325\001\uffcc\000\070\004\152\005\113\006\133\007\077" +
    "\010\145\011\120\013\112\014\102\040\104\043\320\047" +
    "\007\050\057\051\055\107\151\110\175\111\142\117\107" +
    "\122\317\127\127\130\115\133\100\134\110\135\101\142" +
    "\137\144\126\145\114\153\103\001\002\000\002\001\uff0f" +
    "\000\064\004\152\005\113\006\133\007\077\010\145\011" +
    "\120\013\112\014\102\040\104\047\007\050\057\051\055" +
    "\107\151\110\175\111\142\117\107\127\127\130\115\133" +
    "\100\134\110\135\101\142\137\144\126\145\114\153\103" +
    "\001\002\000\004\122\311\001\002\000\002\001\uff08\000" +
    "\064\004\152\005\113\006\133\007\077\010\145\011\120" +
    "\013\112\014\102\040\104\047\007\050\057\051\055\107" +
    "\151\110\175\111\142\117\107\127\127\130\115\133\100" +
    "\134\110\135\101\142\137\144\126\145\114\153\103\001" +
    "\002\000\004\122\314\001\002\000\002\001\uff0c\000\004" +
    "\122\316\001\002\000\002\001\uff0d\000\002\001\uff09\000" +
    "\054\004\152\005\113\006\133\007\077\010\145\011\120" +
    "\013\112\014\102\040\104\107\151\111\142\117\107\127" +
    "\127\130\115\133\100\134\110\135\101\142\137\144\126" +
    "\145\114\153\103\001\002\000\004\122\322\001\002\000" +
    "\002\001\uff0b\000\004\122\324\001\002\000\002\001\uff0a" +
    "\000\002\001\uff0e\000\016\004\341\117\343\121\167\135" +
    "\161\147\162\153\165\001\uff20\000\002\001\uff05\000\004" +
    "\120\336\001\002\000\002\001\uff24\000\004\124\333\001" +
    "\uff25\000\100\037\026\041\032\042\030\043\023\044\040" +
    "\045\017\046\061\047\007\050\057\051\055\052\024\053" +
    "\010\054\005\055\016\056\054\057\045\060\037\061\050" +
    "\062\013\063\041\064\033\065\044\066\062\067\042\070" +
    "\046\071\334\106\031\110\035\112\051\114\021\146\020" +
    "\001\002\000\002\001\uff26\000\002\001\uff23\000\002\001" +
    "\uff04\000\012\004\341\117\343\121\167\147\162\001\uff1a" +
    "\000\010\117\355\121\356\147\354\001\uff40\000\002\001" +
    "\uff3f\000\002\001\uff21\000\114\004\341\037\026\041\032" +
    "\042\030\043\023\044\040\045\017\046\061\047\007\050" +
    "\057\051\055\052\024\053\010\054\005\055\016\056\054" +
    "\057\045\060\037\061\050\062\013\063\041\064\033\065" +
    "\044\066\062\067\042\070\046\106\031\110\035\112\051" +
    "\114\021\117\343\120\345\121\167\135\161\146\020\147" +
    "\162\153\165\001\002\000\002\001\uff22\000\002\001\uff07" +
    "\000\004\120\353\001\002\000\004\120\352\001\002\000" +
    "\004\120\351\001\002\000\002\001\uff3e\000\002\001\uff18" +
    "\000\002\001\uff06\000\002\001\uff31\000\102\004\u0106\037" +
    "\026\041\032\042\030\043\023\044\040\045\017\046\061" +
    "\047\007\050\057\051\055\052\024\053\010\054\005\055" +
    "\016\056\054\057\045\060\037\061\050\062\013\063\041" +
    "\064\033\065\044\066\062\067\042\070\046\106\031\110" +
    "\035\112\051\114\021\120\u0103\146\020\001\002\000\070" +
    "\004\152\005\113\006\133\007\077\010\145\011\120\013" +
    "\112\014\102\040\104\043\362\047\007\050\057\051\055" +
    "\107\151\110\175\111\142\117\107\122\361\127\127\130" +
    "\115\133\100\134\110\135\357\142\137\144\126\145\114" +
    "\153\103\001\002\000\004\122\u0102\001\uffcc\000\070\004" +
    "\152\005\113\006\133\007\077\010\145\011\120\013\112" +
    "\014\102\040\104\043\374\047\007\050\057\051\055\107" +
    "\151\110\175\111\142\117\107\122\373\127\127\130\115" +
    "\133\100\134\110\135\372\142\137\144\126\145\114\153" +
    "\103\001\002\000\002\001\uff3d\000\064\004\152\005\113" +
    "\006\133\007\077\010\145\011\120\013\112\014\102\040" +
    "\104\047\007\050\057\051\055\107\151\110\175\111\142" +
    "\117\107\127\127\130\115\133\100\134\110\135\101\142" +
    "\137\144\126\145\114\153\103\001\002\000\004\122\364" +
    "\001\002\000\002\001\uff35\000\064\004\152\005\113\006" +
    "\133\007\077\010\145\011\120\013\112\014\102\040\104" +
    "\047\007\050\057\051\055\107\151\110\175\111\142\117" +
    "\107\127\127\130\115\133\100\134\110\135\101\142\137" +
    "\144\126\145\114\153\103\001\002\000\004\122\367\001" +
    "\002\000\002\001\uff3a\000\004\122\371\001\002\000\002" +
    "\001\uff3b\000\004\122\u0101\001\uffcc\000\002\001\uff36\000" +
    "\054\004\152\005\113\006\133\007\077\010\145\011\120" +
    "\013\112\014\102\040\104\107\151\111\142\117\107\127" +
    "\127\130\115\133\100\134\110\135\101\142\137\144\126" +
    "\145\114\153\103\001\002\000\004\122\376\001\002\000" +
    "\002\001\uff37\000\004\122\u0100\001\002\000\002\001\uff38" +
    "\000\002\001\uff39\000\002\001\uff3c\000\002\001\uff33\000" +
    "\004\120\u010a\001\002\000\006\120\u0108\124\u0107\001\002" +
    "\000\002\001\uff1f\000\004\004\u0109\001\002\000\002\001" +
    "\uff32\000\002\001\uff1e\000\002\001\uff34\000\010\117\355" +
    "\121\356\147\354\001\uff41\000\002\001\uff2a\000\016\047" +
    "\007\050\057\051\055\110\175\135\161\153\165\001\uff2b" +
    "\000\002\001\uff2c\000\002\001\uff2e\000\016\047\007\050" +
    "\057\051\055\110\175\135\161\153\165\001\uff2f\000\002" +
    "\001\uff30\000\002\001\uff5a\000\002\001\uffd5\000\002\001" +
    "\uff5c\000\002\001\uffd8\000\054\004\152\005\113\006\133" +
    "\007\077\010\145\011\120\013\112\014\102\040\104\107" +
    "\151\111\142\117\107\127\127\130\115\133\100\134\110" +
    "\135\101\142\137\144\126\145\114\153\103\001\002\000" +
    "\054\004\152\005\113\006\133\007\077\010\145\011\120" +
    "\013\112\014\102\040\104\107\151\111\142\117\107\127" +
    "\127\130\115\133\100\134\110\135\101\142\137\144\126" +
    "\145\114\153\103\001\002\000\054\004\152\005\113\006" +
    "\133\007\077\010\145\011\120\013\112\014\102\040\104" +
    "\107\151\111\142\117\107\127\127\130\115\133\100\134" +
    "\110\135\101\142\137\144\126\145\114\153\103\001\002" +
    "\000\054\004\152\005\113\006\133\007\077\010\145\011" +
    "\120\013\112\014\102\040\104\107\151\111\142\117\107" +
    "\127\127\130\115\133\100\134\110\135\101\142\137\144" +
    "\126\145\114\153\103\001\002\000\006\015\u011b\016\u011c" +
    "\001\uffb3\000\054\004\152\005\113\006\133\007\077\010" +
    "\145\011\120\013\112\014\102\040\104\107\151\111\142" +
    "\117\107\127\127\130\115\133\100\134\110\135\101\142" +
    "\137\144\126\145\114\153\103\001\002\000\054\004\152" +
    "\005\113\006\133\007\077\010\145\011\120\013\112\014" +
    "\102\040\104\107\151\111\142\117\107\127\127\130\115" +
    "\133\100\134\110\135\101\142\137\144\126\145\114\153" +
    "\103\001\002\000\006\133\u011f\134\u011e\001\uffb8\000\054" +
    "\004\152\005\113\006\133\007\077\010\145\011\120\013" +
    "\112\014\102\040\104\107\151\111\142\117\107\127\127" +
    "\130\115\133\100\134\110\135\101\142\137\144\126\145" +
    "\114\153\103\001\002\000\054\004\152\005\113\006\133" +
    "\007\077\010\145\011\120\013\112\014\102\040\104\107" +
    "\151\111\142\117\107\127\127\130\115\133\100\134\110" +
    "\135\101\142\137\144\126\145\114\153\103\001\002\000" +
    "\010\135\u0122\136\u0123\137\u0121\001\uffbb\000\054\004\152" +
    "\005\113\006\133\007\077\010\145\011\120\013\112\014" +
    "\102\040\104\107\151\111\142\117\107\127\127\130\115" +
    "\133\100\134\110\135\101\142\137\144\126\145\114\153" +
    "\103\001\002\000\054\004\152\005\113\006\133\007\077" +
    "\010\145\011\120\013\112\014\102\040\104\107\151\111" +
    "\142\117\107\127\127\130\115\133\100\134\110\135\101" +
    "\142\137\144\126\145\114\153\103\001\002\000\054\004" +
    "\152\005\113\006\133\007\077\010\145\011\120\013\112" +
    "\014\102\040\104\107\151\111\142\117\107\127\127\130" +
    "\115\133\100\134\110\135\101\142\137\144\126\145\114" +
    "\153\103\001\002\000\002\001\uffbf\000\002\001\uffc0\000" +
    "\002\001\uffbe\000\010\135\u0122\136\u0123\137\u0121\001\uffbc" +
    "\000\006\133\u011f\134\u011e\001\uffb9\000\006\015\u011b\016" +
    "\u011c\001\uffb5\000\006\015\u011b\016\u011c\001\uffb4\000\006" +
    "\015\u011b\016\u011c\001\uffb6\000\002\001\ufff3\000\054\004" +
    "\152\005\113\006\133\007\077\010\145\011\120\013\112" +
    "\014\102\040\104\107\151\111\142\117\107\127\127\130" +
    "\115\133\100\134\110\135\101\142\137\144\126\145\114" +
    "\153\103\001\002\000\004\124\u012f\001\002\000\056\037" +
    "\026\047\007\050\057\051\055\052\024\053\010\054\005" +
    "\055\016\056\054\057\045\060\037\061\050\062\013\063" +
    "\041\064\033\065\044\066\062\067\042\070\046\073\u0132" +
    "\110\035\146\020\001\002\000\002\001\uffeb\000\006\120" +
    "\u0139\124\u0138\001\002\000\004\125\u0136\001\002\000\004" +
    "\125\u0134\001\002\000\054\004\152\005\113\006\133\007" +
    "\077\010\145\011\120\013\112\014\102\040\104\107\151" +
    "\111\142\117\107\127\127\130\115\133\100\134\110\135" +
    "\101\142\137\144\126\145\114\153\103\001\002\000\002" +
    "\001\uffe9\000\054\004\152\005\113\006\133\007\077\010" +
    "\145\011\120\013\112\014\102\040\104\107\151\111\142" +
    "\117\107\127\127\130\115\133\100\134\110\135\101\142" +
    "\137\144\126\145\114\153\103\001\002\000\002\001\uffe8" +
    "\000\056\037\026\047\007\050\057\051\055\052\024\053" +
    "\010\054\005\055\016\056\054\057\045\060\037\061\050" +
    "\062\013\063\041\064\033\065\044\066\062\067\042\070" +
    "\046\073\u0132\110\035\146\020\001\002\000\002\001\uffec" +
    "\000\002\001\uffea\000\054\004\152\005\113\006\133\007" +
    "\077\010\145\011\120\013\112\014\102\040\104\107\151" +
    "\111\142\117\107\127\127\130\115\133\100\134\110\135" +
    "\101\142\137\144\126\145\114\153\103\001\002\000\004" +
    "\143\u013d\001\uffaa\000\054\004\152\005\113\006\133\007" +
    "\077\010\145\011\120\013\112\014\102\040\104\107\151" +
    "\111\142\117\107\127\127\130\115\133\100\134\110\135" +
    "\101\142\137\144\126\145\114\153\103\001\002\000\004" +
    "\142\u013f\001\uffac\000\054\004\152\005\113\006\133\007" +
    "\077\010\145\011\120\013\112\014\102\040\104\107\151" +
    "\111\142\117\107\127\127\130\115\133\100\134\110\135" +
    "\101\142\137\144\126\145\114\153\103\001\002\000\006" +
    "\021\u0141\022\u0142\001\uffae\000\054\004\152\005\113\006" +
    "\133\007\077\010\145\011\120\013\112\014\102\040\104" +
    "\107\151\111\142\117\107\127\127\130\115\133\100\134" +
    "\110\135\101\142\137\144\126\145\114\153\103\001\002" +
    "\000\054\004\152\005\113\006\133\007\077\010\145\011" +
    "\120\013\112\014\102\040\104\107\151\111\142\117\107" +
    "\127\127\130\115\133\100\134\110\135\101\142\137\144" +
    "\126\145\114\153\103\001\002\000\012\017\u0117\020\u0119" +
    "\140\u0116\141\u0118\001\uffb0\000\012\017\u0117\020\u0119\140" +
    "\u0116\141\u0118\001\uffb1\000\054\004\152\005\113\006\133" +
    "\007\077\010\145\011\120\013\112\014\102\040\104\107" +
    "\151\111\142\117\107\127\127\130\115\133\100\134\110" +
    "\135\101\142\137\144\126\145\114\153\103\001\002\000" +
    "\004\144\u013b\001\uffa8\000\002\001\uffe1\000\056\004\152" +
    "\005\113\006\133\007\077\010\145\011\120\013\112\014" +
    "\102\040\104\107\151\111\142\117\107\120\u0152\127\127" +
    "\130\115\133\100\134\110\135\101\142\137\144\126\145" +
    "\114\153\103\001\002\000\002\001\uffe0\000\004\004\u0150" +
    "\001\002\000\054\004\152\005\113\006\133\007\077\010" +
    "\145\011\120\013\112\014\102\040\104\107\151\111\142" +
    "\117\107\127\127\130\115\133\100\134\110\135\101\142" +
    "\137\144\126\145\114\153\103\001\002\000\004\004\u014d" +
    "\001\002\000\002\001\uffe3\000\006\122\u014f\124\225\001" +
    "\002\000\002\001\uffe6\000\002\001\uffe2\000\006\120\u0155" +
    "\124\u0154\001\002\000\002\001\uffe5\000\002\001\uffdd\000" +
    "\054\004\152\005\113\006\133\007\077\010\145\011\120" +
    "\013\112\014\102\040\104\107\151\111\142\117\107\127" +
    "\127\130\115\133\100\134\110\135\101\142\137\144\126" +
    "\145\114\153\103\001\002\000\002\001\uffe4\000\002\001" +
    "\uffdc\000\054\004\152\005\113\006\133\007\077\010\145" +
    "\011\120\013\112\014\102\040\104\107\151\111\142\117" +
    "\107\127\127\130\115\133\100\134\110\135\101\142\137" +
    "\144\126\145\114\153\103\001\002\000\054\004\152\005" +
    "\113\006\133\007\077\010\145\011\120\013\112\014\102" +
    "\040\104\107\151\111\142\117\107\127\127\130\115\133" +
    "\100\134\110\135\101\142\137\144\126\145\114\153\103" +
    "\001\002\000\006\124\225\125\u015a\001\002\000\054\004" +
    "\152\005\113\006\133\007\077\010\145\011\120\013\112" +
    "\014\102\040\104\107\151\111\142\117\107\127\127\130" +
    "\115\133\100\134\110\135\101\142\137\144\126\145\114" +
    "\153\103\001\002\000\002\001\uffa4\000\004\023\u0145\001" +
    "\uffa6\000\002\001\uffd7\000\126\004\152\005\113\006\133" +
    "\007\077\010\145\011\120\013\112\014\102\037\026\040" +
    "\104\047\007\050\057\051\055\052\024\053\010\054\005" +
    "\055\016\056\054\057\045\060\037\061\050\062\013\063" +
    "\041\064\033\065\044\066\062\067\042\070\046\107\151" +
    "\110\035\111\142\117\107\127\127\130\115\133\100\134" +
    "\110\135\101\142\137\144\126\145\114\146\020\153\103" +
    "\001\002\000\004\120\u0160\001\002\000\004\115\231\001" +
    "\uffd6\000\004\117\u0162\001\002\000\152\004\152\005\113" +
    "\006\133\007\077\010\145\011\120\013\112\014\102\037" +
    "\026\040\104\041\032\042\030\043\023\044\040\045\017" +
    "\046\061\047\007\050\057\051\055\052\024\053\010\054" +
    "\005\055\016\056\054\057\045\060\037\061\050\062\013" +
    "\063\041\064\033\065\044\066\062\067\042\070\046\106" +
    "\031\107\151\110\035\111\142\112\051\114\021\117\107" +
    "\120\u0164\127\127\130\115\133\100\134\110\135\101\142" +
    "\137\144\126\145\114\146\020\153\103\001\002\000\006" +
    "\120\u0168\124\u0167\001\002\000\002\001\ufff2\000\002\001" +
    "\ufff0\000\002\001\uffef\000\150\004\152\005\113\006\133" +
    "\007\077\010\145\011\120\013\112\014\102\037\026\040" +
    "\104\041\032\042\030\043\023\044\040\045\017\046\061" +
    "\047\007\050\057\051\055\052\024\053\010\054\005\055" +
    "\016\056\054\057\045\060\037\061\050\062\013\063\041" +
    "\064\033\065\044\066\062\067\042\070\046\106\031\107" +
    "\151\110\035\111\142\112\051\114\021\117\107\127\127" +
    "\130\115\133\100\134\110\135\101\142\137\144\126\145" +
    "\114\146\020\153\103\001\002\000\002\001\ufff1\000\002" +
    "\001\uffee\000\002\001\uffed\000\002\001\uffda\000\004\120" +
    "\u016d\001\002\000\056\004\152\005\113\006\133\007\077" +
    "\010\145\011\120\013\112\014\102\040\104\107\151\111" +
    "\142\115\231\117\107\127\127\130\115\133\100\134\110" +
    "\135\101\142\137\144\126\145\114\153\103\001\002\000" +
    "\002\001\uffc2\000\054\037\026\047\007\050\057\051\055" +
    "\052\024\053\010\054\005\055\016\056\054\057\045\060" +
    "\037\061\050\062\013\063\041\064\033\065\044\066\062" +
    "\067\042\070\046\110\035\146\020\001\002\000\004\120" +
    "\u0171\001\002\000\056\004\152\005\113\006\133\007\077" +
    "\010\145\011\120\013\112\014\102\040\104\107\151\111" +
    "\142\115\u0174\117\107\127\127\130\115\133\100\134\110" +
    "\135\101\142\137\144\126\145\114\153\103\001\002\000" +
    "\002\001\uffd3\000\002\001\uffd4\000\056\004\152\005\113" +
    "\006\133\007\077\010\145\011\120\013\112\014\102\040" +
    "\104\107\151\111\142\116\u0177\117\107\127\127\130\115" +
    "\133\100\134\110\135\101\142\137\144\126\145\114\153" +
    "\103\001\002\000\006\116\u0179\124\u0178\001\002\000\002" +
    "\001\uffcf\000\002\001\uffd2\000\056\004\152\005\113\006" +
    "\133\007\077\010\145\011\120\013\112\014\102\040\104" +
    "\107\151\111\142\116\u017b\117\107\127\127\130\115\133" +
    "\100\134\110\135\101\142\137\144\126\145\114\153\103" +
    "\001\002\000\002\001\uffd1\000\002\001\uffce\000\002\001" +
    "\uffd0\000\002\001\uffd9\000\006\004\073\116\u017f\001\002" +
    "\000\002\001\uff53\000\002\001\uff52\000\002\001\uff4d\000" +
    "\004\004\073\001\002\000\006\116\u0184\124\u0183\001\002" +
    "\000\006\004\073\116\u0185\001\002\000\002\001\uff51\000" +
    "\002\001\uff50\000\002\001\uff8b\000\002\001\ufec8\000\002" +
    "\001\ufec7\000\002\001\ufec6\000\002\001\ufec9\000\214\003" +
    "\u01a1\004\u018c\005\113\006\133\007\077\010\145\011\120" +
    "\013\112\014\102\037\026\040\104\041\032\042\030\043" +
    "\023\044\040\045\017\046\061\047\007\050\057\051\055" +
    "\052\024\053\010\054\005\055\016\056\054\057\045\060" +
    "\037\061\050\062\013\063\041\064\033\065\044\066\062" +
    "\067\042\070\046\072\u01a6\073\u019c\074\u01a4\076\u0193\077" +
    "\u0191\100\u0194\101\u0195\102\u0190\103\u01a3\104\u019a\105\u0198" +
    "\106\031\107\151\110\035\111\142\112\051\113\012\114" +
    "\021\116\u01a5\117\107\123\u019b\127\127\130\115\133\100" +
    "\134\110\135\101\142\137\144\126\145\114\146\020\150" +
    "\u018e\151\u01a8\152\u019d\153\103\001\ufef3\000\004\125\u01f6" +
    "\001\000\000\002\001\ufeee\000\056\004\152\005\113\006" +
    "\133\007\077\010\145\011\120\013\112\014\102\040\104" +
    "\107\151\111\142\117\107\123\u01f3\127\127\130\115\133" +
    "\100\134\110\135\101\142\137\144\126\145\114\153\103" +
    "\001\002\000\004\115\u018b\001\002\000\004\004\u01f0\001" +
    "\002\000\004\117\u01ec\001\002\000\002\001\ufee6\000\004" +
    "\117\u01e8\001\002\000\112\004\u018c\005\113\006\133\007" +
    "\077\010\145\011\120\013\112\014\102\040\104\072\u01a6" +
    "\073\u019c\074\u01a4\076\u0193\077\u0191\100\u0194\101\u0195\102" +
    "\u0190\103\u01a3\104\u019a\105\u0198\107\151\111\142\117\107" +
    "\123\u019b\127\127\130\115\133\100\134\110\135\101\142" +
    "\137\144\126\145\114\150\u018e\151\u01a8\152\u019d\153\103" +
    "\001\ufef3\000\004\117\u01d3\001\002\000\002\001\ufeef\000" +
    "\014\004\341\117\u01c8\123\u01c7\135\161\153\165\001\002" +
    "\000\056\004\152\005\113\006\133\007\077\010\145\011" +
    "\120\013\112\014\102\040\104\107\151\111\142\117\107" +
    "\123\u01c2\127\127\130\115\133\100\134\110\135\101\142" +
    "\137\144\126\145\114\153\103\001\002\000\002\001\ufef1" +
    "\000\004\123\u01c1\001\002\000\002\001\ufee1\000\004\125" +
    "\u01bf\001\002\000\004\123\u01be\001\002\000\216\003\u01a1" +
    "\004\u018c\005\113\006\133\007\077\010\145\011\120\013" +
    "\112\014\102\037\026\040\104\041\032\042\030\043\023" +
    "\044\040\045\017\046\061\047\007\050\057\051\055\052" +
    "\024\053\010\054\005\055\016\056\054\057\045\060\037" +
    "\061\050\062\013\063\041\064\033\065\044\066\062\067" +
    "\042\070\046\072\u01a6\073\u019c\074\u01a4\076\u0193\077\u0191" +
    "\100\u0194\101\u0195\102\u0190\103\u01a3\104\u019a\105\u0198\106" +
    "\031\107\151\110\035\111\142\112\051\113\012\114\021" +
    "\116\u01bb\117\107\123\u019b\127\127\130\115\133\100\134" +
    "\110\135\101\142\137\144\126\145\114\146\020\150\u018e" +
    "\151\u01a8\152\u019d\153\103\155\u01ba\001\ufef3\000\006\123" +
    "\u01b7\124\225\001\002\000\002\001\ufef0\000\004\123\u01b6" +
    "\001\002\000\002\001\ufef4\000\004\123\u01b5\001\002\000" +
    "\004\117\u01af\001\002\000\002\001\ufeea\000\054\004\152" +
    "\005\113\006\133\007\077\010\145\011\120\013\112\014" +
    "\102\040\104\107\151\111\142\117\107\127\127\130\115" +
    "\133\100\134\110\135\101\142\137\144\126\145\114\153" +
    "\103\001\002\000\002\001\ufee3\000\054\004\152\005\113" +
    "\006\133\007\077\010\145\011\120\013\112\014\102\040" +
    "\104\107\151\111\142\117\107\127\127\130\115\133\100" +
    "\134\110\135\101\142\137\144\126\145\114\153\103\001" +
    "\002\000\002\001\ufee4\000\004\123\u01ab\001\002\000\002" +
    "\001\ufed1\000\004\125\u01ad\001\002\000\112\004\u018c\005" +
    "\113\006\133\007\077\010\145\011\120\013\112\014\102" +
    "\040\104\072\u01a6\073\u019c\074\u01a4\076\u0193\077\u0191\100" +
    "\u0194\101\u0195\102\u0190\103\u01a3\104\u019a\105\u0198\107\151" +
    "\111\142\117\107\123\u019b\127\127\130\115\133\100\134" +
    "\110\135\101\142\137\144\126\145\114\150\u018e\151\u01a8" +
    "\152\u019d\153\103\001\ufef3\000\002\001\ufeec\000\054\004" +
    "\152\005\113\006\133\007\077\010\145\011\120\013\112" +
    "\014\102\040\104\107\151\111\142\117\107\127\127\130" +
    "\115\133\100\134\110\135\101\142\137\144\126\145\114" +
    "\153\103\001\002\000\006\120\u01b1\124\225\001\002\000" +
    "\112\004\u018c\005\113\006\133\007\077\010\145\011\120" +
    "\013\112\014\102\040\104\072\u01a6\073\u019c\074\u01a4\076" +
    "\u0193\077\u0191\100\u0194\101\u0195\102\u0190\103\u01a3\104\u019a" +
    "\105\u0198\107\151\111\142\117\107\123\u019b\127\127\130" +
    "\115\133\100\134\110\135\101\142\137\144\126\145\114" +
    "\150\u018e\151\u01a8\152\u019d\153\103\001\ufef3\000\004\075" +
    "\u01b3\001\ufede\000\112\004\u018c\005\113\006\133\007\077" +
    "\010\145\011\120\013\112\014\102\040\104\072\u01a6\073" +
    "\u019c\074\u01a4\076\u0193\077\u0191\100\u0194\101\u0195\102\u0190" +
    "\103\u01a3\104\u019a\105\u0198\107\151\111\142\117\107\123" +
    "\u019b\127\127\130\115\133\100\134\110\135\101\142\137" +
    "\144\126\145\114\150\u018e\151\u01a8\152\u019d\153\103\001" +
    "\ufef3\000\002\001\ufedf\000\002\001\ufed5\000\002\001\ufee2" +
    "\000\002\001\ufee0\000\004\116\u01bd\001\002\000\002\001" +
    "\ufee5\000\112\004\u018c\005\113\006\133\007\077\010\145" +
    "\011\120\013\112\014\102\040\104\072\u01a6\073\u019c\074" +
    "\u01a4\076\u0193\077\u0191\100\u0194\101\u0195\102\u0190\103\u01a3" +
    "\104\u019a\105\u0198\107\151\111\142\117\107\123\u019b\127" +
    "\127\130\115\133\100\134\110\135\101\142\137\144\126" +
    "\145\114\150\u018e\151\u01a8\152\u019d\153\103\001\ufef3\000" +
    "\002\001\ufee9\000\002\001\ufee7\000\002\001\ufee8\000\002" +
    "\001\ufed0\000\112\004\u018c\005\113\006\133\007\077\010" +
    "\145\011\120\013\112\014\102\040\104\072\u01a6\073\u019c" +
    "\074\u01a4\076\u0193\077\u0191\100\u0194\101\u0195\102\u0190\103" +
    "\u01a3\104\u019a\105\u0198\107\151\111\142\117\107\123\u019b" +
    "\127\127\130\115\133\100\134\110\135\101\142\137\144" +
    "\126\145\114\150\u018e\151\u01a8\152\u019d\153\103\001\ufef3" +
    "\000\002\001\ufeeb\000\002\001\ufed4\000\002\001\ufed3\000" +
    "\004\123\u01c4\001\002\000\002\001\ufed2\000\004\124\u01cf" +
    "\001\uff92\000\010\004\341\037\u01ce\117\u01c8\001\002\000" +
    "\002\001\uff93\000\012\004\341\117\u01c8\135\161\153\165" +
    "\001\002\000\004\132\u01cb\001\uff82\000\002\001\uff85\000" +
    "\056\004\152\005\113\006\133\007\077\010\145\011\120" +
    "\013\112\014\102\040\104\107\151\111\142\115\242\117" +
    "\107\127\127\130\115\133\100\134\110\135\101\142\137" +
    "\144\126\145\114\153\103\001\002\000\002\001\uff83\000" +
    "\006\004\341\117\u01c8\001\002\000\002\001\uff81\000\012" +
    "\004\341\117\u01c8\135\161\153\165\001\002\000\004\123" +
    "\u01d1\001\002\000\002\001\uff91\000\002\001\uff84\000\154" +
    "\004\152\005\113\006\133\007\077\010\145\011\120\013" +
    "\112\014\102\037\026\040\104\041\032\042\030\043\023" +
    "\044\040\045\017\046\061\047\007\050\057\051\055\052" +
    "\024\053\010\054\005\055\016\056\054\057\045\060\037" +
    "\061\050\062\013\063\041\064\033\065\044\066\062\067" +
    "\042\070\046\106\031\107\151\110\035\111\142\112\051" +
    "\113\012\114\021\117\107\123\u019b\127\127\130\115\133" +
    "\100\134\110\135\101\142\137\144\126\145\114\146\020" +
    "\153\103\001\002\000\056\004\152\005\113\006\133\007" +
    "\077\010\145\011\120\013\112\014\102\040\104\107\151" +
    "\111\142\117\107\123\u019b\127\127\130\115\133\100\134" +
    "\110\135\101\142\137\144\126\145\114\153\103\001\002" +
    "\000\056\004\152\005\113\006\133\007\077\010\145\011" +
    "\120\013\112\014\102\040\104\107\151\111\142\117\107" +
    "\123\u019b\127\127\130\115\133\100\134\110\135\101\142" +
    "\137\144\126\145\114\153\103\001\002\000\056\004\152" +
    "\005\113\006\133\007\077\010\145\011\120\013\112\014" +
    "\102\040\104\107\151\111\142\117\107\120\u01d7\127\127" +
    "\130\115\133\100\134\110\135\101\142\137\144\126\145" +
    "\114\153\103\001\002\000\112\004\u018c\005\113\006\133" +
    "\007\077\010\145\011\120\013\112\014\102\040\104\072" +
    "\u01a6\073\u019c\074\u01a4\076\u0193\077\u0191\100\u0194\101\u0195" +
    "\102\u0190\103\u01a3\104\u019a\105\u0198\107\151\111\142\117" +
    "\107\123\u019b\127\127\130\115\133\100\134\110\135\101" +
    "\142\137\144\126\145\114\150\u018e\151\u01a8\152\u019d\153" +
    "\103\001\ufef3\000\006\120\u01d9\124\225\001\002\000\112" +
    "\004\u018c\005\113\006\133\007\077\010\145\011\120\013" +
    "\112\014\102\040\104\072\u01a6\073\u019c\074\u01a4\076\u0193" +
    "\077\u0191\100\u0194\101\u0195\102\u0190\103\u01a3\104\u019a\105" +
    "\u0198\107\151\111\142\117\107\123\u019b\127\127\130\115" +
    "\133\100\134\110\135\101\142\137\144\126\145\114\150" +
    "\u018e\151\u01a8\152\u019d\153\103\001\ufef3\000\002\001\ufed7" +
    "\000\002\001\ufed8\000\056\004\152\005\113\006\133\007" +
    "\077\010\145\011\120\013\112\014\102\040\104\107\151" +
    "\111\142\117\107\120\u01dd\127\127\130\115\133\100\134" +
    "\110\135\101\142\137\144\126\145\114\153\103\001\002" +
    "\000\112\004\u018c\005\113\006\133\007\077\010\145\011" +
    "\120\013\112\014\102\040\104\072\u01a6\073\u019c\074\u01a4" +
    "\076\u0193\077\u0191\100\u0194\101\u0195\102\u0190\103\u01a3\104" +
    "\u019a\105\u0198\107\151\111\142\117\107\123\u019b\127\127" +
    "\130\115\133\100\134\110\135\101\142\137\144\126\145" +
    "\114\150\u018e\151\u01a8\152\u019d\153\103\001\ufef3\000\006" +
    "\120\u01df\124\225\001\002\000\112\004\u018c\005\113\006" +
    "\133\007\077\010\145\011\120\013\112\014\102\040\104" +
    "\072\u01a6\073\u019c\074\u01a4\076\u0193\077\u0191\100\u0194\101" +
    "\u0195\102\u0190\103\u01a3\104\u019a\105\u0198\107\151\111\142" +
    "\117\107\123\u019b\127\127\130\115\133\100\134\110\135" +
    "\101\142\137\144\126\145\114\150\u018e\151\u01a8\152\u019d" +
    "\153\103\001\ufef3\000\002\001\ufed9\000\002\001\ufeda\000" +
    "\004\077\u01e3\001\002\000\004\117\u01e4\001\002\000\054" +
    "\004\152\005\113\006\133\007\077\010\145\011\120\013" +
    "\112\014\102\040\104\107\151\111\142\117\107\127\127" +
    "\130\115\133\100\134\110\135\101\142\137\144\126\145" +
    "\114\153\103\001\002\000\006\120\u01e6\124\225\001\002" +
    "\000\004\123\u01e7\001\002\000\002\001\ufedb\000\054\004" +
    "\152\005\113\006\133\007\077\010\145\011\120\013\112" +
    "\014\102\040\104\107\151\111\142\117\107\127\127\130" +
    "\115\133\100\134\110\135\101\142\137\144\126\145\114" +
    "\153\103\001\002\000\006\120\u01ea\124\225\001\002\000" +
    "\112\004\u018c\005\113\006\133\007\077\010\145\011\120" +
    "\013\112\014\102\040\104\072\u01a6\073\u019c\074\u01a4\076" +
    "\u0193\077\u0191\100\u0194\101\u0195\102\u0190\103\u01a3\104\u019a" +
    "\105\u0198\107\151\111\142\117\107\123\u019b\127\127\130" +
    "\115\133\100\134\110\135\101\142\137\144\126\145\114" +
    "\150\u018e\151\u01a8\152\u019d\153\103\001\ufef3\000\002\001" +
    "\ufedd\000\054\004\152\005\113\006\133\007\077\010\145" +
    "\011\120\013\112\014\102\040\104\107\151\111\142\117" +
    "\107\127\127\130\115\133\100\134\110\135\101\142\137" +
    "\144\126\145\114\153\103\001\002\000\006\120\u01ee\124" +
    "\225\001\002\000\112\004\u018c\005\113\006\133\007\077" +
    "\010\145\011\120\013\112\014\102\040\104\072\u01a6\073" +
    "\u019c\074\u01a4\076\u0193\077\u0191\100\u0194\101\u0195\102\u0190" +
    "\103\u01a3\104\u019a\105\u0198\107\151\111\142\117\107\123" +
    "\u019b\127\127\130\115\133\100\134\110\135\101\142\137" +
    "\144\126\145\114\150\u018e\151\u01a8\152\u019d\153\103\001" +
    "\ufef3\000\002\001\ufedc\000\004\123\u01f1\001\002\000\002" +
    "\001\ufed6\000\002\001\ufef2\000\002\001\ufece\000\004\123" +
    "\u01f5\001\002\000\002\001\ufecf\000\112\004\u018c\005\113" +
    "\006\133\007\077\010\145\011\120\013\112\014\102\040" +
    "\104\072\u01a6\073\u019c\074\u01a4\076\u0193\077\u0191\100\u0194" +
    "\101\u0195\102\u0190\103\u01a3\104\u019a\105\u0198\107\151\111" +
    "\142\117\107\123\u019b\127\127\130\115\133\100\134\110" +
    "\135\101\142\137\144\126\145\114\150\u018e\151\u01a8\152" +
    "\u019d\153\103\001\ufef3\000\002\001\ufeed\000\054\037\026" +
    "\047\007\050\057\051\055\052\024\053\010\054\005\055" +
    "\016\056\054\057\045\060\037\061\050\062\013\063\041" +
    "\064\033\065\044\066\062\067\042\070\046\110\035\146" +
    "\020\001\002\000\004\120\u01fa\001\002\000\002\001\uff4a" +
    "\000\002\001\uff8d\000\126\004\152\005\113\006\133\007" +
    "\077\010\145\011\120\013\112\014\102\037\026\040\104" +
    "\047\007\050\057\051\055\052\024\053\010\054\005\055" +
    "\016\056\054\057\045\060\037\061\050\062\013\063\041" +
    "\064\033\065\044\066\062\067\042\070\046\107\151\110" +
    "\035\111\142\117\107\127\127\130\115\133\100\134\110" +
    "\135\101\142\137\144\126\145\114\146\020\153\103\001" +
    "\002\000\004\120\u0200\001\002\000\004\120\u01ff\001\002" +
    "\000\002\001\uff42\000\002\001\uff43\000\004\115\u0215\001" +
    "\uff65\000\056\037\026\047\007\050\057\051\055\052\024" +
    "\053\010\054\005\055\016\056\054\057\045\060\037\061" +
    "\050\062\013\063\041\064\033\065\044\066\062\067\042" +
    "\070\046\110\035\113\012\146\020\001\002\000\002\001" +
    "\uff64\000\002\001\uff5d\000\060\037\026\047\007\050\057" +
    "\051\055\052\024\053\010\054\005\055\016\056\054\057" +
    "\045\060\037\061\050\062\013\063\041\064\033\065\044" +
    "\066\062\067\042\070\046\110\035\113\012\116\u0213\146" +
    "\020\001\002\000\002\001\uff61\000\016\004\341\117\u01c8" +
    "\123\u020b\125\u0208\135\161\153\165\001\002\000\054\004" +
    "\152\005\113\006\133\007\077\010\145\011\120\013\112" +
    "\014\102\040\104\107\151\111\142\117\107\127\127\130" +
    "\115\133\100\134\110\135\101\142\137\144\126\145\114" +
    "\153\103\001\002\000\002\001\uff58\000\006\123\u0210\124" +
    "\u020f\001\002\000\002\001\uff5f\000\004\125\u020d\001\uff54" +
    "\000\054\004\152\005\113\006\133\007\077\010\145\011" +
    "\120\013\112\014\102\040\104\107\151\111\142\117\107" +
    "\127\127\130\115\133\100\134\110\135\101\142\137\144" +
    "\126\145\114\153\103\001\002\000\002\001\uff55\000\014" +
    "\004\341\117\u01c8\125\u0208\135\161\153\165\001\002\000" +
    "\002\001\uff5e\000\002\001\uff57\000\002\001\uff56\000\002" +
    "\001\uff67\000\002\001\uff60\000\056\037\026\047\007\050" +
    "\057\051\055\052\024\053\010\054\005\055\016\056\054" +
    "\057\045\060\037\061\050\062\013\063\041\064\033\065" +
    "\044\066\062\067\042\070\046\110\035\113\012\146\020" +
    "\001\002\000\060\037\026\047\007\050\057\051\055\052" +
    "\024\053\010\054\005\055\016\056\054\057\045\060\037" +
    "\061\050\062\013\063\041\064\033\065\044\066\062\067" +
    "\042\070\046\110\035\113\012\116\u0217\146\020\001\002" +
    "\000\002\001\uff66\000\004\117\u0219\001\002\000\152\004" +
    "\152\005\113\006\133\007\077\010\145\011\120\013\112" +
    "\014\102\037\026\040\104\041\032\042\030\043\023\044" +
    "\040\045\017\046\061\047\007\050\057\051\055\052\024" +
    "\053\010\054\005\055\016\056\054\057\045\060\037\061" +
    "\050\062\013\063\041\064\033\065\044\066\062\067\042" +
    "\070\046\106\031\107\151\110\035\111\142\112\051\114" +
    "\021\117\107\120\u021b\127\127\130\115\133\100\134\110" +
    "\135\101\142\137\144\126\145\114\146\020\153\103\001" +
    "\002\000\006\120\u021c\124\u0167\001\002\000\002\001\uff69" +
    "\000\002\001\uff68\000\002\001\uff87\000\054\004\152\005" +
    "\113\006\133\007\077\010\145\011\120\013\112\014\102" +
    "\040\104\107\151\111\142\117\107\127\127\130\115\133" +
    "\100\134\110\135\101\142\137\144\126\145\114\153\103" +
    "\001\002\000\004\124\u0220\001\002\000\004\007\u0221\001" +
    "\002\000\004\120\u0222\001\002\000\004\123\u0223\001\002" +
    "\000\002\001\ufef5\000\104\037\026\041\032\042\030\043" +
    "\023\044\040\045\017\046\061\047\007\050\057\051\055" +
    "\052\024\053\010\054\005\055\016\056\054\057\045\060" +
    "\037\061\050\062\013\063\041\064\033\065\044\066\062" +
    "\067\042\070\046\106\031\110\035\112\051\113\012\114" +
    "\021\115\ufec3\132\u01cb\146\020\001\uff82\000\004\115\u018b" +
    "\001\002\000\100\037\026\041\032\042\030\043\023\044" +
    "\040\045\017\046\061\047\007\050\057\051\055\052\024" +
    "\053\010\054\005\055\016\056\054\057\045\060\037\061" +
    "\050\062\013\063\041\064\033\065\044\066\062\067\042" +
    "\070\046\106\031\110\035\112\051\113\012\114\021\146" +
    "\020\001\ufec5\000\002\001\ufec1\000\004\115\u018b\001\002" +
    "\000\002\001\ufec0\000\002\001\ufec4\000\002\001\ufec2" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0229\000\042\040\057\041\003\044\062\045\033\051" +
    "\024\052\010\053\021\061\005\064\052\065\042\066\055" +
    "\067\013\110\026\123\051\124\046\125\014\001\001\000" +
    "\014\042\u01c4\043\u01c9\070\u0223\071\337\072\u01c5\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\041\u021c\044\062\045\033\051\024\052" +
    "\010\053\021\061\005\064\052\065\042\066\055\067\013" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\041" +
    "\u01fa\044\062\045\033\051\024\052\010\053\021\061\005" +
    "\064\052\065\042\066\055\067\013\001\001\000\002\001" +
    "\001\000\040\040\u0189\041\003\044\062\045\033\051\024" +
    "\052\010\053\021\061\005\064\052\065\042\066\055\067" +
    "\013\110\026\114\u0187\125\u0186\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\041\u0185\044\062\045\033\051\024\052\010\053\021" +
    "\061\005\064\052\065\042\066\055\067\013\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\040" +
    "\057\041\003\044\062\045\033\051\024\052\010\053\021" +
    "\061\005\064\052\065\042\066\055\067\013\110\026\124" +
    "\066\125\014\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\041\064\044\062\045\033\051" +
    "\024\052\010\053\021\061\005\064\052\065\042\066\055" +
    "\067\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\041\063\044\062" +
    "\045\033\051\024\052\010\053\021\061\005\064\052\065" +
    "\042\066\055\067\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\004\073\062\071\063\074\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\060\002\116\003\131\005\115\006\145\011\133" +
    "\013\127\016\147\017\124\020\105\021\142\022\104\023" +
    "\135\024\146\025\121\026\137\027\122\030\140\031\134" +
    "\032\120\033\130\037\110\047\143\050\123\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\002\116\003\131\005\115\006\145\011\133\013\u017b\016" +
    "\147\047\143\050\123\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\104\002" +
    "\116\003\131\005\115\006\145\011\133\013\173\016\147" +
    "\017\124\020\105\021\142\022\104\023\135\024\146\025" +
    "\121\026\137\027\122\030\140\031\134\032\120\033\175" +
    "\034\222\036\223\045\153\047\143\050\123\051\024\052" +
    "\010\053\021\056\156\061\005\064\052\065\155\100\u016b" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\002" +
    "\116\003\131\005\115\006\145\011\133\013\u016a\016\147" +
    "\047\143\050\123\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\002\116\003\131\005\115\006\145\011\133\013" +
    "\u015c\016\147\047\143\050\123\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\050\u012b\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\002\116\003\131\005\115\006\145\011\133\013\127" +
    "\016\147\017\u0114\020\105\047\143\050\123\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\045\153\051\024" +
    "\052\010\053\021\056\156\061\005\064\052\065\155\100" +
    "\154\001\001\000\022\045\153\051\024\052\010\053\021" +
    "\056\u0113\061\005\064\052\065\155\001\001\000\002\001" +
    "\001\000\022\045\153\051\024\052\010\053\021\056\u0111" +
    "\061\005\064\052\065\155\001\001\000\010\072\165\101" +
    "\157\102\163\001\001\000\002\001\001\000\010\065\176" +
    "\072\u010e\073\u010f\001\001\000\002\001\001\000\044\041" +
    "\325\044\062\045\033\051\024\052\010\053\021\061\005" +
    "\064\052\065\042\066\055\067\013\072\165\074\345\075" +
    "\331\076\330\101\346\102\163\001\001\000\002\001\001" +
    "\000\010\065\176\072\u010b\073\u010c\001\001\000\004\102" +
    "\277\001\001\000\064\002\116\003\131\005\115\006\145" +
    "\011\133\013\173\016\147\017\124\020\105\021\142\022" +
    "\104\023\135\024\146\025\121\026\137\027\122\030\140" +
    "\031\134\032\120\033\175\034\177\047\143\050\123\065" +
    "\176\073\170\001\001\000\002\001\001\000\062\002\116" +
    "\003\131\005\115\006\145\011\133\013\173\016\147\017" +
    "\124\020\105\021\142\022\104\023\135\024\146\025\121" +
    "\026\137\027\122\030\140\031\134\032\120\033\175\034" +
    "\272\047\143\050\123\065\265\001\001\000\002\001\001" +
    "\000\064\002\116\003\131\005\115\006\145\011\133\013" +
    "\173\016\147\017\124\020\105\021\142\022\104\023\135" +
    "\024\146\025\121\026\137\027\122\030\140\031\134\032" +
    "\120\033\175\034\263\047\143\050\123\065\176\073\262" +
    "\001\001\000\004\035\211\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\002\116\003\131\005\115\006\145\011\133" +
    "\013\217\016\147\047\143\050\123\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\060\002\116\003\131\005\115\006\145\011\133\013" +
    "\173\016\147\017\124\020\105\021\142\022\104\023\135" +
    "\024\146\025\121\026\137\027\122\030\140\031\134\032" +
    "\120\033\175\034\216\047\143\050\123\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\104\002\116" +
    "\003\131\005\115\006\145\011\133\013\173\016\147\017" +
    "\124\020\105\021\142\022\104\023\135\024\146\025\121" +
    "\026\137\027\122\030\140\031\134\032\120\033\175\034" +
    "\222\036\223\045\153\047\143\050\123\051\024\052\010" +
    "\053\021\056\156\061\005\064\052\065\155\100\221\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\060\002\116\003\131\005\115\006\145\011\133\013" +
    "\173\016\147\017\124\020\105\021\142\022\104\023\135" +
    "\024\146\025\121\026\137\027\122\030\140\031\134\032" +
    "\120\033\175\034\226\047\143\050\123\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\072\002" +
    "\116\003\131\005\115\006\145\011\133\013\173\016\147" +
    "\017\124\020\105\021\142\022\104\023\135\024\146\025" +
    "\121\026\137\027\122\030\140\031\134\032\120\033\175" +
    "\034\237\047\143\050\123\103\232\104\233\105\235\106" +
    "\240\107\231\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\060\002\116\003\131\005\115\006" +
    "\145\011\133\013\127\016\147\017\124\020\105\021\142" +
    "\022\104\023\135\024\146\025\121\026\137\027\122\030" +
    "\140\031\134\032\120\033\130\037\255\047\143\050\123" +
    "\001\001\000\062\002\116\003\131\005\115\006\145\011" +
    "\133\013\173\016\147\017\124\020\105\021\142\022\104" +
    "\023\135\024\146\025\121\026\137\027\122\030\140\031" +
    "\134\032\120\033\175\034\237\047\143\050\123\103\254" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\107" +
    "\251\001\001\000\072\002\116\003\131\005\115\006\145" +
    "\011\133\013\173\016\147\017\124\020\105\021\142\022" +
    "\104\023\135\024\146\025\121\026\137\027\122\030\140" +
    "\031\134\032\120\033\175\034\237\047\143\050\123\103" +
    "\232\104\242\105\235\106\240\107\231\001\001\000\002" +
    "\001\001\000\070\002\116\003\131\005\115\006\145\011" +
    "\133\013\173\016\147\017\124\020\105\021\142\022\104" +
    "\023\135\024\146\025\121\026\137\027\122\030\140\031" +
    "\134\032\120\033\175\034\237\047\143\050\123\103\245" +
    "\105\246\106\240\107\231\001\001\000\002\001\001\000" +
    "\002\001\001\000\062\002\116\003\131\005\115\006\145" +
    "\011\133\013\173\016\147\017\124\020\105\021\142\022" +
    "\104\023\135\024\146\025\121\026\137\027\122\030\140" +
    "\031\134\032\120\033\175\034\237\047\143\050\123\103" +
    "\250\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\070\002\116" +
    "\003\131\005\115\006\145\011\133\013\173\016\147\017" +
    "\124\020\105\021\142\022\104\023\135\024\146\025\121" +
    "\026\137\027\122\030\140\031\134\032\120\033\175\034" +
    "\237\047\143\050\123\103\245\105\246\106\240\107\231" +
    "\001\001\000\002\001\001\000\002\001\001\000\062\002" +
    "\116\003\131\005\115\006\145\011\133\013\173\016\147" +
    "\017\124\020\105\021\142\022\104\023\135\024\146\025" +
    "\121\026\137\027\122\030\140\031\134\032\120\033\175" +
    "\034\266\047\143\050\123\065\265\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\060\002\116\003" +
    "\131\005\115\006\145\011\133\013\173\016\147\017\124" +
    "\020\105\021\142\022\104\023\135\024\146\025\121\026" +
    "\137\027\122\030\140\031\134\032\120\033\175\034\274" +
    "\047\143\050\123\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\041\325\044" +
    "\062\045\033\051\024\052\010\053\021\061\005\064\052" +
    "\065\042\066\055\067\013\074\327\075\331\076\330\001" +
    "\001\000\064\002\116\003\131\005\115\006\145\011\133" +
    "\013\173\016\147\017\124\020\105\021\142\022\104\023" +
    "\135\024\146\025\121\026\137\027\122\030\140\031\134" +
    "\032\120\033\175\034\307\047\143\050\123\065\176\073" +
    "\304\001\001\000\002\001\001\000\062\002\116\003\131" +
    "\005\115\006\145\011\133\013\173\016\147\017\124\020" +
    "\105\021\142\022\104\023\135\024\146\025\121\026\137" +
    "\027\122\030\140\031\134\032\120\033\175\034\320\047" +
    "\143\050\123\065\265\001\001\000\002\001\001\000\064" +
    "\002\116\003\131\005\115\006\145\011\133\013\173\016" +
    "\147\017\124\020\105\021\142\022\104\023\135\024\146" +
    "\025\121\026\137\027\122\030\140\031\134\032\120\033" +
    "\175\034\312\047\143\050\123\065\176\073\311\001\001" +
    "\000\002\001\001\000\002\001\001\000\062\002\116\003" +
    "\131\005\115\006\145\011\133\013\173\016\147\017\124" +
    "\020\105\021\142\022\104\023\135\024\146\025\121\026" +
    "\137\027\122\030\140\031\134\032\120\033\175\034\314" +
    "\047\143\050\123\065\265\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\060\002\116\003\131\005\115\006\145\011" +
    "\133\013\173\016\147\017\124\020\105\021\142\022\104" +
    "\023\135\024\146\025\121\026\137\027\122\030\140\031" +
    "\134\032\120\033\175\034\322\047\143\050\123\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\070\343\071\337" +
    "\072\336\101\341\102\163\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\041\325\044\062\045\033\051\024\052\010\053\021\061" +
    "\005\064\052\065\042\066\055\067\013\076\334\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\071\u010a\102\277\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\050\041\325\044\062\045" +
    "\033\051\024\052\010\053\021\061\005\064\052\065\042" +
    "\066\055\067\013\070\347\071\337\072\336\074\345\075" +
    "\331\076\330\101\346\102\163\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\041\325\044\062\045" +
    "\033\051\024\052\010\053\021\061\005\064\052\065\042" +
    "\066\055\067\013\074\u0103\075\331\076\330\077\u0104\001" +
    "\001\000\064\002\116\003\131\005\115\006\145\011\133" +
    "\013\173\016\147\017\124\020\105\021\142\022\104\023" +
    "\135\024\146\025\121\026\137\027\122\030\140\031\134" +
    "\032\120\033\175\034\362\047\143\050\123\065\176\073" +
    "\357\001\001\000\002\001\001\000\062\002\116\003\131" +
    "\005\115\006\145\011\133\013\173\016\147\017\124\020" +
    "\105\021\142\022\104\023\135\024\146\025\121\026\137" +
    "\027\122\030\140\031\134\032\120\033\175\034\374\047" +
    "\143\050\123\065\265\001\001\000\002\001\001\000\064" +
    "\002\116\003\131\005\115\006\145\011\133\013\173\016" +
    "\147\017\124\020\105\021\142\022\104\023\135\024\146" +
    "\025\121\026\137\027\122\030\140\031\134\032\120\033" +
    "\175\034\365\047\143\050\123\065\176\073\364\001\001" +
    "\000\002\001\001\000\002\001\001\000\062\002\116\003" +
    "\131\005\115\006\145\011\133\013\173\016\147\017\124" +
    "\020\105\021\142\022\104\023\135\024\146\025\121\026" +
    "\137\027\122\030\140\031\134\032\120\033\175\034\367" +
    "\047\143\050\123\065\265\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\060\002\116\003\131\005" +
    "\115\006\145\011\133\013\173\016\147\017\124\020\105" +
    "\021\142\022\104\023\135\024\146\025\121\026\137\027" +
    "\122\030\140\031\134\032\120\033\175\034\376\047\143" +
    "\050\123\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\065\265\072\u010d\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\065\265\072\u0110\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\002\116\003" +
    "\131\005\115\006\145\011\133\013\127\016\147\017\124" +
    "\020\105\021\142\022\104\023\u012a\047\143\050\123\001" +
    "\001\000\036\002\116\003\131\005\115\006\145\011\133" +
    "\013\127\016\147\017\124\020\105\021\142\022\104\023" +
    "\u0129\047\143\050\123\001\001\000\036\002\116\003\131" +
    "\005\115\006\145\011\133\013\127\016\147\017\124\020" +
    "\105\021\142\022\104\023\u0128\047\143\050\123\001\001" +
    "\000\036\002\116\003\131\005\115\006\145\011\133\013" +
    "\127\016\147\017\124\020\105\021\142\022\104\023\u0119" +
    "\047\143\050\123\001\001\000\002\001\001\000\034\002" +
    "\116\003\131\005\115\006\145\011\133\013\127\016\147" +
    "\017\124\020\105\021\142\022\u0127\047\143\050\123\001" +
    "\001\000\034\002\116\003\131\005\115\006\145\011\133" +
    "\013\127\016\147\017\124\020\105\021\142\022\u011c\047" +
    "\143\050\123\001\001\000\002\001\001\000\032\002\116" +
    "\003\131\005\115\006\145\011\133\013\127\016\147\017" +
    "\124\020\105\021\u0126\047\143\050\123\001\001\000\032" +
    "\002\116\003\131\005\115\006\145\011\133\013\127\016" +
    "\147\017\124\020\105\021\u011f\047\143\050\123\001\001" +
    "\000\002\001\001\000\030\002\116\003\131\005\115\006" +
    "\145\011\133\013\127\016\147\017\u0125\020\105\047\143" +
    "\050\123\001\001\000\030\002\116\003\131\005\115\006" +
    "\145\011\133\013\127\016\147\017\u0124\020\105\047\143" +
    "\050\123\001\001\000\030\002\116\003\131\005\115\006" +
    "\145\011\133\013\127\016\147\017\u0123\020\105\047\143" +
    "\050\123\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\060\002\116\003\131\005\115\006\145\011\133" +
    "\013\173\016\147\017\124\020\105\021\142\022\104\023" +
    "\135\024\146\025\121\026\137\027\122\030\140\031\134" +
    "\032\120\033\175\034\u012d\047\143\050\123\001\001\000" +
    "\002\001\001\000\030\007\u0130\010\u012f\045\153\051\024" +
    "\052\010\053\021\056\156\061\005\064\052\065\155\100" +
    "\u0132\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\060\002\116\003\131\005" +
    "\115\006\145\011\133\013\173\016\147\017\124\020\105" +
    "\021\142\022\104\023\135\024\146\025\121\026\137\027" +
    "\122\030\140\031\134\032\120\033\175\034\u0134\047\143" +
    "\050\123\001\001\000\002\001\001\000\060\002\116\003" +
    "\131\005\115\006\145\011\133\013\173\016\147\017\124" +
    "\020\105\021\142\022\104\023\135\024\146\025\121\026" +
    "\137\027\122\030\140\031\134\032\120\033\175\034\u0136" +
    "\047\143\050\123\001\001\000\002\001\001\000\026\010" +
    "\u0139\045\153\051\024\052\010\053\021\056\156\061\005" +
    "\064\052\065\155\100\u0132\001\001\000\002\001\001\000" +
    "\002\001\001\000\046\002\116\003\131\005\115\006\145" +
    "\011\133\013\127\016\147\017\124\020\105\021\142\022" +
    "\104\023\135\024\146\025\121\026\137\027\u013b\047\143" +
    "\050\123\001\001\000\002\001\001\000\044\002\116\003" +
    "\131\005\115\006\145\011\133\013\127\016\147\017\124" +
    "\020\105\021\142\022\104\023\135\024\146\025\121\026" +
    "\u013d\047\143\050\123\001\001\000\002\001\001\000\042" +
    "\002\116\003\131\005\115\006\145\011\133\013\127\016" +
    "\147\017\124\020\105\021\142\022\104\023\135\024\146" +
    "\025\u013f\047\143\050\123\001\001\000\002\001\001\000" +
    "\040\002\116\003\131\005\115\006\145\011\133\013\127" +
    "\016\147\017\124\020\105\021\142\022\104\023\135\024" +
    "\u0143\047\143\050\123\001\001\000\040\002\116\003\131" +
    "\005\115\006\145\011\133\013\127\016\147\017\124\020" +
    "\105\021\142\022\104\023\135\024\u0142\047\143\050\123" +
    "\001\001\000\002\001\001\000\002\001\001\000\050\002" +
    "\116\003\131\005\115\006\145\011\133\013\127\016\147" +
    "\017\124\020\105\021\142\022\104\023\135\024\146\025" +
    "\121\026\137\027\122\030\u0145\047\143\050\123\001\001" +
    "\000\002\001\001\000\002\001\001\000\062\002\116\003" +
    "\131\005\115\006\145\011\133\012\u0150\013\173\016\147" +
    "\017\124\020\105\021\142\022\104\023\135\024\146\025" +
    "\121\026\137\027\122\030\140\031\134\032\120\033\175" +
    "\034\u0152\047\143\050\123\001\001\000\002\001\001\000" +
    "\002\001\001\000\062\002\116\003\131\005\115\006\145" +
    "\011\133\013\173\016\147\017\124\020\105\021\142\022" +
    "\104\023\135\024\146\025\121\026\137\027\122\030\140" +
    "\031\134\032\120\033\175\034\222\036\u014d\047\143\050" +
    "\123\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\060\002\116" +
    "\003\131\005\115\006\145\011\133\013\173\016\147\017" +
    "\124\020\105\021\142\022\104\023\135\024\146\025\121" +
    "\026\137\027\122\030\140\031\134\032\120\033\175\034" +
    "\u0155\047\143\050\123\001\001\000\002\001\001\000\002" +
    "\001\001\000\052\002\116\003\131\005\115\006\145\011" +
    "\133\013\127\016\147\017\124\020\105\021\142\022\104" +
    "\023\135\024\146\025\121\026\137\027\122\030\140\031" +
    "\u015b\047\143\050\123\001\001\000\062\002\116\003\131" +
    "\005\115\006\145\011\133\013\173\016\147\017\124\020" +
    "\105\021\142\022\104\023\135\024\146\025\121\026\137" +
    "\027\122\030\140\031\134\032\120\033\175\034\222\036" +
    "\u0158\047\143\050\123\001\001\000\002\001\001\000\056" +
    "\002\116\003\131\005\115\006\145\011\133\013\127\016" +
    "\147\017\124\020\105\021\142\022\104\023\135\024\146" +
    "\025\121\026\137\027\122\030\140\031\134\032\120\033" +
    "\u015a\047\143\050\123\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\104\002\116\003\131\005" +
    "\115\006\145\011\133\013\173\016\147\017\124\020\105" +
    "\021\142\022\104\023\135\024\146\025\121\026\137\027" +
    "\122\030\140\031\134\032\120\033\175\034\222\036\223" +
    "\045\153\047\143\050\123\051\024\052\010\053\021\056" +
    "\156\061\005\064\052\065\155\100\u015e\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\112\002" +
    "\116\003\131\005\115\006\145\011\133\013\173\016\147" +
    "\017\124\020\105\021\142\022\104\023\135\024\146\025" +
    "\121\026\137\027\122\030\140\031\134\032\120\033\175" +
    "\034\u0164\041\325\044\062\045\033\046\u0162\047\143\050" +
    "\123\051\024\052\010\053\021\061\005\064\052\065\042" +
    "\066\055\067\013\076\u0165\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\110" +
    "\002\116\003\131\005\115\006\145\011\133\013\173\016" +
    "\147\017\124\020\105\021\142\022\104\023\135\024\146" +
    "\025\121\026\137\027\122\030\140\031\134\032\120\033" +
    "\175\034\u0168\041\325\044\062\045\033\047\143\050\123" +
    "\051\024\052\010\053\021\061\005\064\052\065\042\066" +
    "\055\067\013\076\u0169\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\002\116\003\131\005\115\006\145\011\133" +
    "\013\127\016\147\017\u016d\020\105\047\143\050\123\001" +
    "\001\000\002\001\001\000\024\045\153\051\024\052\010" +
    "\053\021\056\156\061\005\064\052\065\155\100\u016f\001" +
    "\001\000\002\001\001\000\032\002\116\003\131\005\115" +
    "\006\145\011\133\013\127\014\u0172\016\147\017\u0171\020" +
    "\105\047\143\050\123\001\001\000\002\001\001\000\002" +
    "\001\001\000\062\002\116\003\131\005\115\006\145\011" +
    "\133\013\173\015\u0174\016\147\017\124\020\105\021\142" +
    "\022\104\023\135\024\146\025\121\026\137\027\122\030" +
    "\140\031\134\032\120\033\175\034\u0175\047\143\050\123" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\060\002\116\003\131\005\115\006\145\011\133" +
    "\013\173\016\147\017\124\020\105\021\142\022\104\023" +
    "\135\024\146\025\121\026\137\027\122\030\140\031\134" +
    "\032\120\033\175\034\u0179\047\143\050\123\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\004\073\063\u017f\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\004\073" +
    "\062\u0181\063\074\001\001\000\002\001\001\000\006\004" +
    "\073\063\u017f\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\136\002\116\003\131" +
    "\005\115\006\145\011\133\013\173\016\147\017\124\020" +
    "\105\021\142\022\104\023\135\024\146\025\121\026\137" +
    "\027\122\030\140\031\134\032\120\033\175\034\222\036" +
    "\u019e\040\u01a8\041\u0196\044\062\045\033\047\143\050\123" +
    "\051\024\052\010\053\021\061\005\064\052\065\042\066" +
    "\055\067\013\110\026\111\u01a6\112\u01a1\115\u019d\116\u0191" +
    "\117\u0198\120\u019f\121\u0195\122\u018c\130\u018e\001\001\000" +
    "\002\001\001\000\002\001\001\000\060\002\116\003\131" +
    "\005\115\006\145\011\133\013\173\016\147\017\124\020" +
    "\105\021\142\022\104\023\135\024\146\025\121\026\137" +
    "\027\122\030\140\031\134\032\120\033\175\034\u01f3\047" +
    "\143\050\123\001\001\000\004\114\u01f1\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\100\002\116\003\131\005\115\006\145\011\133" +
    "\013\173\016\147\017\124\020\105\021\142\022\104\023" +
    "\135\024\146\025\121\026\137\027\122\030\140\031\134" +
    "\032\120\033\175\034\222\036\u019e\047\143\050\123\111" +
    "\u01e1\112\u01a1\117\u0198\120\u019f\121\u0195\122\u018c\130\u018e" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\042" +
    "\u01c4\043\u01c9\070\u01c8\071\337\072\u01c5\001\001\000\060" +
    "\002\116\003\131\005\115\006\145\011\133\013\173\016" +
    "\147\017\124\020\105\021\142\022\104\023\135\024\146" +
    "\025\121\026\137\027\122\030\140\031\134\032\120\033" +
    "\175\034\u01c2\047\143\050\123\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\136\002\116\003\131\005\115\006\145" +
    "\011\133\013\173\016\147\017\124\020\105\021\142\022" +
    "\104\023\135\024\146\025\121\026\137\027\122\030\140" +
    "\031\134\032\120\033\175\034\222\036\u019e\040\u01a8\041" +
    "\u0196\044\062\045\033\047\143\050\123\051\024\052\010" +
    "\053\021\061\005\064\052\065\042\066\055\067\013\110" +
    "\026\111\u01a6\112\u01a1\113\u01b7\116\u01b8\117\u0198\120\u019f" +
    "\121\u0195\122\u018c\130\u018e\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\060\002" +
    "\116\003\131\005\115\006\145\011\133\013\127\016\147" +
    "\017\124\020\105\021\142\022\104\023\135\024\146\025" +
    "\121\026\137\027\122\030\140\031\134\032\120\033\130" +
    "\037\u01ab\047\143\050\123\001\001\000\002\001\001\000" +
    "\060\002\116\003\131\005\115\006\145\011\133\013\173" +
    "\016\147\017\124\020\105\021\142\022\104\023\135\024" +
    "\146\025\121\026\137\027\122\030\140\031\134\032\120" +
    "\033\175\034\u01a9\047\143\050\123\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\100\002\116\003\131\005\115\006\145\011\133\013" +
    "\173\016\147\017\124\020\105\021\142\022\104\023\135" +
    "\024\146\025\121\026\137\027\122\030\140\031\134\032" +
    "\120\033\175\034\222\036\u019e\047\143\050\123\111\u01ad" +
    "\112\u01a1\117\u0198\120\u019f\121\u0195\122\u018c\130\u018e\001" +
    "\001\000\002\001\001\000\062\002\116\003\131\005\115" +
    "\006\145\011\133\013\173\016\147\017\124\020\105\021" +
    "\142\022\104\023\135\024\146\025\121\026\137\027\122" +
    "\030\140\031\134\032\120\033\175\034\222\036\u01af\047" +
    "\143\050\123\001\001\000\002\001\001\000\100\002\116" +
    "\003\131\005\115\006\145\011\133\013\173\016\147\017" +
    "\124\020\105\021\142\022\104\023\135\024\146\025\121" +
    "\026\137\027\122\030\140\031\134\032\120\033\175\034" +
    "\222\036\u019e\047\143\050\123\111\u01b1\112\u01a1\117\u0198" +
    "\120\u019f\121\u0195\122\u018c\130\u018e\001\001\000\002\001" +
    "\001\000\100\002\116\003\131\005\115\006\145\011\133" +
    "\013\173\016\147\017\124\020\105\021\142\022\104\023" +
    "\135\024\146\025\121\026\137\027\122\030\140\031\134" +
    "\032\120\033\175\034\222\036\u019e\047\143\050\123\111" +
    "\u01b3\112\u01a1\117\u0198\120\u019f\121\u0195\122\u018c\130\u018e" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\100\002\116\003\131\005\115\006\145\011\133\013" +
    "\173\016\147\017\124\020\105\021\142\022\104\023\135" +
    "\024\146\025\121\026\137\027\122\030\140\031\134\032" +
    "\120\033\175\034\222\036\u019e\047\143\050\123\111\u01bb" +
    "\112\u01a1\117\u0198\120\u019f\121\u0195\122\u018c\130\u018e\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\100\002\116\003\131\005\115\006" +
    "\145\011\133\013\173\016\147\017\124\020\105\021\142" +
    "\022\104\023\135\024\146\025\121\026\137\027\122\030" +
    "\140\031\134\032\120\033\175\034\222\036\u019e\047\143" +
    "\050\123\111\u01bf\112\u01a1\117\u0198\120\u019f\121\u0195\122" +
    "\u018c\130\u018e\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\127\u01cf\001\001\000\004\071\u010a\001\001\000\002" +
    "\001\001\000\010\070\347\071\337\072\u01cc\001\001\000" +
    "\002\001\001\000\002\001\001\000\062\002\116\003\131" +
    "\005\115\006\145\011\133\013\173\016\147\017\124\020" +
    "\105\021\142\022\104\023\135\024\146\025\121\026\137" +
    "\027\122\030\140\031\134\032\120\033\175\034\237\047" +
    "\143\050\123\103\u01cb\001\001\000\002\001\001\000\004" +
    "\071\u010a\001\001\000\002\001\001\000\012\043\u01d1\070" +
    "\u01c8\071\337\072\u01c5\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\116\002\116\003\131\005" +
    "\115\006\145\011\133\013\173\016\147\017\124\020\105" +
    "\021\142\022\104\023\135\024\146\025\121\026\137\027" +
    "\122\030\140\031\134\032\120\033\175\034\222\036\u019e" +
    "\040\u01d4\041\u0196\044\062\045\033\047\143\050\123\051" +
    "\024\052\010\053\021\061\005\064\052\065\042\066\055" +
    "\067\013\110\026\117\u01d3\001\001\000\064\002\116\003" +
    "\131\005\115\006\145\011\133\013\173\016\147\017\124" +
    "\020\105\021\142\022\104\023\135\024\146\025\121\026" +
    "\137\027\122\030\140\031\134\032\120\033\175\034\222" +
    "\036\u019e\047\143\050\123\117\u01db\001\001\000\064\002" +
    "\116\003\131\005\115\006\145\011\133\013\173\016\147" +
    "\017\124\020\105\021\142\022\104\023\135\024\146\025" +
    "\121\026\137\027\122\030\140\031\134\032\120\033\175" +
    "\034\222\036\u019e\047\143\050\123\117\u01d5\001\001\000" +
    "\062\002\116\003\131\005\115\006\145\011\133\013\173" +
    "\016\147\017\124\020\105\021\142\022\104\023\135\024" +
    "\146\025\121\026\137\027\122\030\140\031\134\032\120" +
    "\033\175\034\222\036\u01d7\047\143\050\123\001\001\000" +
    "\100\002\116\003\131\005\115\006\145\011\133\013\173" +
    "\016\147\017\124\020\105\021\142\022\104\023\135\024" +
    "\146\025\121\026\137\027\122\030\140\031\134\032\120" +
    "\033\175\034\222\036\u019e\047\143\050\123\111\u01da\112" +
    "\u01a1\117\u0198\120\u019f\121\u0195\122\u018c\130\u018e\001\001" +
    "\000\002\001\001\000\100\002\116\003\131\005\115\006" +
    "\145\011\133\013\173\016\147\017\124\020\105\021\142" +
    "\022\104\023\135\024\146\025\121\026\137\027\122\030" +
    "\140\031\134\032\120\033\175\034\222\036\u019e\047\143" +
    "\050\123\111\u01d9\112\u01a1\117\u0198\120\u019f\121\u0195\122" +
    "\u018c\130\u018e\001\001\000\002\001\001\000\002\001\001" +
    "\000\062\002\116\003\131\005\115\006\145\011\133\013" +
    "\173\016\147\017\124\020\105\021\142\022\104\023\135" +
    "\024\146\025\121\026\137\027\122\030\140\031\134\032" +
    "\120\033\175\034\222\036\u01dd\047\143\050\123\001\001" +
    "\000\100\002\116\003\131\005\115\006\145\011\133\013" +
    "\173\016\147\017\124\020\105\021\142\022\104\023\135" +
    "\024\146\025\121\026\137\027\122\030\140\031\134\032" +
    "\120\033\175\034\222\036\u019e\047\143\050\123\111\u01e0" +
    "\112\u01a1\117\u0198\120\u019f\121\u0195\122\u018c\130\u018e\001" +
    "\001\000\002\001\001\000\100\002\116\003\131\005\115" +
    "\006\145\011\133\013\173\016\147\017\124\020\105\021" +
    "\142\022\104\023\135\024\146\025\121\026\137\027\122" +
    "\030\140\031\134\032\120\033\175\034\222\036\u019e\047" +
    "\143\050\123\111\u01df\112\u01a1\117\u0198\120\u019f\121\u0195" +
    "\122\u018c\130\u018e\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\062\002\116" +
    "\003\131\005\115\006\145\011\133\013\173\016\147\017" +
    "\124\020\105\021\142\022\104\023\135\024\146\025\121" +
    "\026\137\027\122\030\140\031\134\032\120\033\175\034" +
    "\222\036\u01e4\047\143\050\123\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\062\002\116\003" +
    "\131\005\115\006\145\011\133\013\173\016\147\017\124" +
    "\020\105\021\142\022\104\023\135\024\146\025\121\026" +
    "\137\027\122\030\140\031\134\032\120\033\175\034\222" +
    "\036\u01e8\047\143\050\123\001\001\000\002\001\001\000" +
    "\100\002\116\003\131\005\115\006\145\011\133\013\173" +
    "\016\147\017\124\020\105\021\142\022\104\023\135\024" +
    "\146\025\121\026\137\027\122\030\140\031\134\032\120" +
    "\033\175\034\222\036\u019e\047\143\050\123\111\u01ea\112" +
    "\u01a1\117\u0198\120\u019f\121\u0195\122\u018c\130\u018e\001\001" +
    "\000\002\001\001\000\062\002\116\003\131\005\115\006" +
    "\145\011\133\013\173\016\147\017\124\020\105\021\142" +
    "\022\104\023\135\024\146\025\121\026\137\027\122\030" +
    "\140\031\134\032\120\033\175\034\222\036\u01ec\047\143" +
    "\050\123\001\001\000\002\001\001\000\100\002\116\003" +
    "\131\005\115\006\145\011\133\013\173\016\147\017\124" +
    "\020\105\021\142\022\104\023\135\024\146\025\121\026" +
    "\137\027\122\030\140\031\134\032\120\033\175\034\222" +
    "\036\u019e\047\143\050\123\111\u01ee\112\u01a1\117\u0198\120" +
    "\u019f\121\u0195\122\u018c\130\u018e\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\100" +
    "\002\116\003\131\005\115\006\145\011\133\013\173\016" +
    "\147\017\124\020\105\021\142\022\104\023\135\024\146" +
    "\025\121\026\137\027\122\030\140\031\134\032\120\033" +
    "\175\034\222\036\u019e\047\143\050\123\111\u01f6\112\u01a1" +
    "\117\u0198\120\u019f\121\u0195\122\u018c\130\u018e\001\001\000" +
    "\002\001\001\000\024\045\153\051\024\052\010\053\021" +
    "\056\156\061\005\064\052\065\155\100\u01f8\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\102" +
    "\002\116\003\131\005\115\006\145\011\133\013\127\016" +
    "\147\017\124\020\105\021\142\022\104\023\135\024\146" +
    "\025\121\026\137\027\122\030\140\031\134\032\120\033" +
    "\130\037\u01fd\045\153\047\143\050\123\051\024\052\010" +
    "\053\021\056\156\061\005\064\052\065\155\100\u01fc\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\045\153\051" +
    "\024\052\010\053\021\054\u0204\055\u0205\056\u0206\061\005" +
    "\064\052\065\155\110\u0203\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\045\153\051\024\052\010\053\021" +
    "\055\u0213\056\u0206\061\005\064\052\065\155\110\u0203\001" +
    "\001\000\002\001\001\000\014\057\u0209\060\u0208\070\u020b" +
    "\071\337\072\u01cc\001\001\000\060\002\116\003\131\005" +
    "\115\006\145\011\133\013\127\016\147\017\124\020\105" +
    "\021\142\022\104\023\135\024\146\025\121\026\137\027" +
    "\122\030\140\031\134\032\120\033\130\037\u0211\047\143" +
    "\050\123\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\060\002\116\003\131" +
    "\005\115\006\145\011\133\013\127\016\147\017\124\020" +
    "\105\021\142\022\104\023\135\024\146\025\121\026\137" +
    "\027\122\030\140\031\134\032\120\033\130\037\u020d\047" +
    "\143\050\123\001\001\000\002\001\001\000\012\060\u0210" +
    "\070\u020b\071\337\072\u01cc\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\045\153\051\024\052\010\053\021\054" +
    "\u0215\055\u0205\056\u0206\061\005\064\052\065\155\110\u0203" +
    "\001\001\000\026\045\153\051\024\052\010\053\021\055" +
    "\u0213\056\u0206\061\005\064\052\065\155\110\u0203\001\001" +
    "\000\002\001\001\000\002\001\001\000\112\002\116\003" +
    "\131\005\115\006\145\011\133\013\173\016\147\017\124" +
    "\020\105\021\142\022\104\023\135\024\146\025\121\026" +
    "\137\027\122\030\140\031\134\032\120\033\175\034\u0164" +
    "\041\325\044\062\045\033\046\u0219\047\143\050\123\051" +
    "\024\052\010\053\021\061\005\064\052\065\042\066\055" +
    "\067\013\076\u0165\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\060\002\116" +
    "\003\131\005\115\006\145\011\133\013\127\016\147\017" +
    "\124\020\105\021\142\022\104\023\135\024\146\025\121" +
    "\026\137\027\122\030\140\031\134\032\120\033\130\037" +
    "\u021e\047\143\050\123\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\040\u0226\041\u0196\044\062\045\033\051\024" +
    "\052\010\053\021\061\005\064\052\065\042\066\055\067" +
    "\013\110\026\126\u0225\132\u0224\001\001\000\004\114\u022a" +
    "\001\001\000\036\040\u0228\041\u0196\044\062\045\033\051" +
    "\024\052\010\053\021\061\005\064\052\065\042\066\055" +
    "\067\013\110\026\131\u0227\001\001\000\002\001\001\000" +
    "\004\114\u0229\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 

	private Lexer lexer;
	private Medium medium;

	public Parser(Lexer lex, ComplexSymbolFactory sf, Medium m) {
		super(lex,sf);
		lexer = lex;
		medium = m;
		medium.newScope();
	}
	
	public Medium getMedium() {
		return medium;
	}
	
	public void report_error(String message, Object info) {
	
		if (info instanceof ComplexSymbol && ((ComplexSymbol)info).value instanceof DefaultTreeNodeSymbol) {
			medium.error(new CXSyntaxError(message, (DefaultTreeNodeSymbol) ((ComplexSymbol)info).value));
		} else {
			medium.error(new CXSyntaxError(message+" ("+info+")"));
		}
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= translation_unit EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TTranslationUnit start_val = (TTranslationUnit)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // primary_expression ::= IDENTIFIER 
            {
              TPrimaryExpression RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSIdentifier i = (TSIdentifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TPrimaryExpression(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary_expression",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // primary_expression ::= constant 
            {
              TPrimaryExpression RESULT =null;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TConstant c = (TConstant)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TPrimaryExpression(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary_expression",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // primary_expression ::= string 
            {
              TPrimaryExpression RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TString s = (TString)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TPrimaryExpression(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary_expression",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // primary_expression ::= macro_specifier_list 
            {
              TPrimaryExpression RESULT =null;
		Location mslxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location mslxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TMacroSpecifierList msl = (TMacroSpecifierList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TPrimaryExpression(msl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary_expression",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // primary_expression ::= PAR_LEFT expression PAR_RIGHT 
            {
              TPrimaryExpression RESULT =null;
		Location plxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location plxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TSParLeft pl = (TSParLeft)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TExpression e = (TExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location prxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location prxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSParRight pr = (TSParRight)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TPrimaryExpression(pl, e, pr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary_expression",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // primary_expression ::= generic_selection 
            {
              TPrimaryExpression RESULT =null;
		Location gsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location gsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TGenericSelection gs = (TGenericSelection)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TPrimaryExpression(gs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary_expression",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // constant ::= I_CONSTANT 
            {
              TConstant RESULT =null;
		Location icxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location icxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSIConstant ic = (TSIConstant)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TConstant(ic); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // constant ::= F_CONSTANT 
            {
              TConstant RESULT =null;
		Location fcxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location fcxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSFConstant fc = (TSFConstant)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TConstant(fc); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // constant ::= ENUMERATION_CONSTANT 
            {
              TConstant RESULT =null;
		Location ecxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ecxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSEnumerationConstant ec = (TSEnumerationConstant)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TConstant(ec); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // enumeration_constant ::= IDENTIFIER 
            {
              TEnumerationConstant RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSIdentifier i = (TSIdentifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TEnumerationConstant(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("enumeration_constant",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // string ::= STRING_LITERAL 
            {
              TString RESULT =null;
		Location slxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location slxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSStringLiteral sl = (TSStringLiteral)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TString(sl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("string",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // string ::= FUNC_NAME 
            {
              TString RESULT =null;
		Location fnxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location fnxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSFuncName fn = (TSFuncName)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TString(fn); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("string",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // macro_specifier_list ::= macro_specifier 
            {
              TMacroSpecifierList RESULT =null;
		Location msxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location msxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TMacroSpecifier ms = (TMacroSpecifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TMacroSpecifierList(ms); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("macro_specifier_list",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // macro_specifier_list ::= macro_specifier_list macro_specifier 
            {
              TMacroSpecifierList RESULT =null;
		Location mslxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location mslxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TMacroSpecifierList msl = (TMacroSpecifierList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location msxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location msxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TMacroSpecifier ms = (TMacroSpecifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TMacroSpecifierList(msl, ms); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("macro_specifier_list",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // macro_specifier ::= MACRO IDENTIFIER PAR_LEFT PAR_RIGHT 
            {
              TMacroSpecifier RESULT =null;
		Location mxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location mxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		TSMacro m = (TSMacro)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TSIdentifier i = (TSIdentifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location plxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location plxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSParLeft pl = (TSParLeft)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location prxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location prxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSParRight pr = (TSParRight)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TMacroSpecifier(m, i, pl, pr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("macro_specifier",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // macro_specifier ::= MACRO IDENTIFIER PAR_LEFT macro_argument_list PAR_RIGHT 
            {
              TMacroSpecifier RESULT =null;
		Location mxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location mxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		TSMacro m = (TSMacro)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		TSIdentifier i = (TSIdentifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location plxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location plxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TSParLeft pl = (TSParLeft)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location malxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location malxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TMacroArgumentList mal = (TMacroArgumentList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location prxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location prxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSParRight pr = (TSParRight)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TMacroSpecifier(m, i, pl, mal, pr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("macro_specifier",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // macro_argument_list ::= assignment_expression 
            {
              TMacroArgumentList RESULT =null;
		Location aexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location aexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TAssignmentExpression ae = (TAssignmentExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TMacroArgumentList(ae); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("macro_argument_list",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // macro_argument_list ::= parameter_declaration 
            {
              TMacroArgumentList RESULT =null;
		Location pdxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location pdxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TParameterDeclaration pd = (TParameterDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TMacroArgumentList(pd); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("macro_argument_list",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // macro_argument_list ::= macro_argument_list COMMA assignment_expression 
            {
              TMacroArgumentList RESULT =null;
		Location malxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location malxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TMacroArgumentList mal = (TMacroArgumentList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSComma c = (TSComma)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location aexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location aexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TAssignmentExpression ae = (TAssignmentExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TMacroArgumentList(mal, c, ae); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("macro_argument_list",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // macro_argument_list ::= macro_argument_list COMMA parameter_declaration 
            {
              TMacroArgumentList RESULT =null;
		Location malxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location malxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TMacroArgumentList mal = (TMacroArgumentList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSComma c = (TSComma)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location pdxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location pdxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TParameterDeclaration pd = (TParameterDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TMacroArgumentList(mal, c, pd); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("macro_argument_list",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // generic_selection ::= GENERIC PAR_LEFT assignment_expression COMMA generic_assoc_list PAR_RIGHT 
            {
              TGenericSelection RESULT =null;
		Location gxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location gxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		TSGeneric g = (TSGeneric)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location plxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location plxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		TSParLeft pl = (TSParLeft)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location aexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location aexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		TAssignmentExpression ae = (TAssignmentExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TSComma c = (TSComma)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location galxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location galxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TGenericAssocList gal = (TGenericAssocList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location prxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location prxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSParRight pr = (TSParRight)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TGenericSelection(g, pl, ae, c, gal, pr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("generic_selection",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // generic_assoc_list ::= generic_association 
            {
              TGenericAssocList RESULT =null;
		Location gaxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location gaxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TGenericAssociation ga = (TGenericAssociation)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TGenericAssocList(ga); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("generic_assoc_list",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // generic_assoc_list ::= generic_assoc_list COMMA generic_association 
            {
              TGenericAssocList RESULT =null;
		Location galxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location galxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TGenericAssocList gal = (TGenericAssocList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSComma c = (TSComma)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location gaxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location gaxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TGenericAssociation ga = (TGenericAssociation)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TGenericAssocList(gal, c, ga); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("generic_assoc_list",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // generic_association ::= type_name COLON assignment_expression 
            {
              TGenericAssociation RESULT =null;
		Location tnxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location tnxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TTypeName tn = (TTypeName)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSColon c = (TSColon)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location aexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location aexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TAssignmentExpression ae = (TAssignmentExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TGenericAssociation(tn, c, ae); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("generic_association",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // generic_association ::= DEFAULT COLON assignment_expression 
            {
              TGenericAssociation RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TSDefault d = (TSDefault)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSColon c = (TSColon)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location aexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location aexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TAssignmentExpression ae = (TAssignmentExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TGenericAssociation(d, c, ae); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("generic_association",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // postfix_expression ::= primary_expression 
            {
              TPostfixExpression RESULT =null;
		Location pexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location pexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TPrimaryExpression pe = (TPrimaryExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TPostfixExpressionP(pe); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // postfix_expression ::= postfix_expression BRACKET_LEFT expression BRACKET_RIGHT 
            {
              TPostfixExpression RESULT =null;
		Location pexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location pexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		TPostfixExpression pe = (TPostfixExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location blxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location blxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TSBracketLeft bl = (TSBracketLeft)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TExpression e = (TExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location brxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location brxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSBracketRight br = (TSBracketRight)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TPostfixExpressionA(pe, bl, e, br); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // postfix_expression ::= postfix_expression PAR_LEFT PAR_RIGHT 
            {
              TPostfixExpression RESULT =null;
		Location pexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location pexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TPostfixExpression pe = (TPostfixExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location plxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location plxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSParLeft pl = (TSParLeft)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location prxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location prxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSParRight pr = (TSParRight)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TPostfixExpressionIv(pe, pl, pr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // postfix_expression ::= postfix_expression PAR_LEFT argument_expression_list PAR_RIGHT 
            {
              TPostfixExpression RESULT =null;
		Location pexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location pexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		TPostfixExpression pe = (TPostfixExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location plxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location plxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TSParLeft pl = (TSParLeft)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location aelxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location aelxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TArgumentExpressionList ael = (TArgumentExpressionList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location prxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location prxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSParRight pr = (TSParRight)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TPostfixExpressionIv(pe, pl, ael, pr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // postfix_expression ::= postfix_expression DOT IDENTIFIER 
            {
              TPostfixExpression RESULT =null;
		Location pexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location pexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TPostfixExpression pe = (TPostfixExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSDot d = (TSDot)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSIdentifier i = (TSIdentifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TPostfixExpressionM(pe, d, i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // postfix_expression ::= postfix_expression PTR_OP IDENTIFIER 
            {
              TPostfixExpression RESULT =null;
		Location pexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location pexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TPostfixExpression pe = (TPostfixExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSPtrOp p = (TSPtrOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSIdentifier i = (TSIdentifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TPostfixExpressionM(pe, p, i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // postfix_expression ::= postfix_expression INC_OP 
            {
              TPostfixExpression RESULT =null;
		Location pexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location pexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TPostfixExpression pe = (TPostfixExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSIncOp i = (TSIncOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TPostfixExpressionID(pe, i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // postfix_expression ::= postfix_expression DEC_OP 
            {
              TPostfixExpression RESULT =null;
		Location pexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location pexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TPostfixExpression pe = (TPostfixExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSDecOp d = (TSDecOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TPostfixExpressionID(pe, d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // postfix_expression ::= PAR_LEFT type_name PAR_RIGHT BRACE_LEFT initializer_list BRACE_RIGHT 
            {
              TPostfixExpression RESULT =null;
		Location plxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location plxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		TSParLeft pl = (TSParLeft)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location tnxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location tnxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		TTypeName tn = (TTypeName)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location prxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location prxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		TSParRight pr = (TSParRight)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location blxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location blxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TSBraceLeft bl = (TSBraceLeft)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location ilxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location ilxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TInitializerList il = (TInitializerList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location brxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location brxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSBraceRight br = (TSBraceRight)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TPostfixExpressionIz(pl, tn, pr, bl, il, br); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // postfix_expression ::= PAR_LEFT type_name PAR_RIGHT BRACE_LEFT initializer_list COMMA BRACE_RIGHT 
            {
              TPostfixExpression RESULT =null;
		Location plxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xleft;
		Location plxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xright;
		TSParLeft pl = (TSParLeft)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Location tnxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location tnxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		TTypeName tn = (TTypeName)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location prxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location prxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		TSParRight pr = (TSParRight)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location blxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location blxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		TSBraceLeft bl = (TSBraceLeft)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location ilxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ilxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TInitializerList il = (TInitializerList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSComma c = (TSComma)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location brxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location brxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSBraceRight br = (TSBraceRight)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TPostfixExpressionIz(pl, tn, pr, bl, il, c, br); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // argument_expression_list ::= assignment_expression 
            {
              TArgumentExpressionList RESULT =null;
		Location aexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location aexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TAssignmentExpression ae = (TAssignmentExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TArgumentExpressionList(ae); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argument_expression_list",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // argument_expression_list ::= argument_expression_list COMMA assignment_expression 
            {
              TArgumentExpressionList RESULT =null;
		Location aelxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location aelxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TArgumentExpressionList ael = (TArgumentExpressionList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSComma c = (TSComma)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location aexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location aexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TAssignmentExpression ae = (TAssignmentExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TArgumentExpressionList(ael, c, ae); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argument_expression_list",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // unary_expression ::= postfix_expression 
            {
              TUnaryExpression RESULT =null;
		Location pexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location pexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TPostfixExpression pe = (TPostfixExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TUnaryExpression(pe); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // unary_expression ::= INC_OP unary_expression 
            {
              TUnaryExpression RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSIncOp i = (TSIncOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location uexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location uexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TUnaryExpression ue = (TUnaryExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TUnaryExpression(i, ue); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // unary_expression ::= DEC_OP unary_expression 
            {
              TUnaryExpression RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSDecOp d = (TSDecOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location uexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location uexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TUnaryExpression ue = (TUnaryExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TUnaryExpression(d, ue); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // unary_expression ::= unary_operator cast_expression 
            {
              TUnaryExpression RESULT =null;
		Location uoxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location uoxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TUnaryOperator uo = (TUnaryOperator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location cexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location cexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TCastExpression ce = (TCastExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TUnaryExpression(uo, ce); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // unary_expression ::= SIZEOF unary_expression 
            {
              TUnaryExpression RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSSizeof s = (TSSizeof)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location uexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location uexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TUnaryExpression ue = (TUnaryExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TUnaryExpression(s, ue); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // unary_expression ::= SIZEOF PAR_LEFT type_name PAR_RIGHT 
            {
              TUnaryExpression RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		TSSizeof s = (TSSizeof)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location plxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location plxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TSParLeft pl = (TSParLeft)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location tnxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location tnxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TTypeName tn = (TTypeName)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location prxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location prxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSParRight pr = (TSParRight)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TUnaryExpression(s, pl, tn, pr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // unary_expression ::= ALIGNOF PAR_LEFT type_name PAR_RIGHT 
            {
              TUnaryExpression RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		TSAlignof a = (TSAlignof)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location plxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location plxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TSParLeft pl = (TSParLeft)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location tnxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location tnxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TTypeName tn = (TTypeName)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location prxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location prxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSParRight pr = (TSParRight)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TUnaryExpression(a, pl, tn, pr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // unary_expression ::= COMP_OP PAR_LEFT type_name PAR_RIGHT comp_expression 
            {
              TUnaryExpression RESULT =null;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		TSCompOp c = (TSCompOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location plxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location plxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		TSParLeft pl = (TSParLeft)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location tnxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location tnxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TTypeName tn = (TTypeName)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location prxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location prxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSParRight pr = (TSParRight)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location cexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location cexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TCompExpression ce = (TCompExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TUnaryExpression(c, pl, tn, pr, ce); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // comp_expression ::= cast_expression 
            {
              TCompExpression RESULT =null;
		Location cexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location cexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TCastExpression ce = (TCastExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TCompExpression(ce); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comp_expression",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // comp_expression ::= BRACE_LEFT BRACE_RIGHT 
            {
              TCompExpression RESULT =null;
		Location blxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location blxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSBraceLeft bl = (TSBraceLeft)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location brxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location brxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSBraceRight br = (TSBraceRight)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TCompExpression(bl, br); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comp_expression",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // comp_expression ::= BRACE_LEFT comp_expression_list BRACE_RIGHT 
            {
              TCompExpression RESULT =null;
		Location blxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location blxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TSBraceLeft bl = (TSBraceLeft)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location celxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location celxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TCompExpressionList cel = (TCompExpressionList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location brxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location brxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSBraceRight br = (TSBraceRight)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TCompExpression(bl, cel, br); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comp_expression",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // comp_expression ::= BRACE_LEFT comp_expression_list COMMA BRACE_RIGHT 
            {
              TCompExpression RESULT =null;
		Location blxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location blxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		TSBraceLeft bl = (TSBraceLeft)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location celxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location celxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TCompExpressionList cel = (TCompExpressionList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSComma c = (TSComma)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location brxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location brxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSBraceRight br = (TSBraceRight)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TCompExpression(bl, cel, c, br); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comp_expression",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // comp_expression_list ::= assignment_expression 
            {
              TCompExpressionList RESULT =null;
		Location aexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location aexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TAssignmentExpression ae = (TAssignmentExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TCompExpressionList(ae); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comp_expression_list",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // comp_expression_list ::= comp_expression_list COMMA assignment_expression 
            {
              TCompExpressionList RESULT =null;
		Location celxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location celxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TCompExpressionList cel = (TCompExpressionList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSComma c = (TSComma)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location aexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location aexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TAssignmentExpression ae = (TAssignmentExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TCompExpressionList(cel, c, ae); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comp_expression_list",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // unary_operator ::= BAND_OP 
            {
              TUnaryOperator RESULT =null;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSBandOp b = (TSBandOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TUnaryOperator(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_operator",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // unary_operator ::= MUL_OP 
            {
              TUnaryOperator RESULT =null;
		Location mxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location mxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSMulOp m = (TSMulOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TUnaryOperator(m); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_operator",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // unary_operator ::= ADD_OP 
            {
              TUnaryOperator RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSAddOp a = (TSAddOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TUnaryOperator(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_operator",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // unary_operator ::= SUB_OP 
            {
              TUnaryOperator RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSSubOp s = (TSSubOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TUnaryOperator(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_operator",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // unary_operator ::= TILDE 
            {
              TUnaryOperator RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSTilde t = (TSTilde)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TUnaryOperator(t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_operator",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // unary_operator ::= EXCL 
            {
              TUnaryOperator RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSExcl e = (TSExcl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TUnaryOperator(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_operator",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // unary_operator ::= BOR_OP 
            {
              TUnaryOperator RESULT =null;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSBorOp b = (TSBorOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TUnaryOperator(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_operator",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // set_expression ::= unary_expression 
            {
              TSetExpression RESULT =null;
		Location uexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location uexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TUnaryExpression ue = (TUnaryExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TSetExpressionU(ue); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("set_expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // set_expression ::= unary_expression SET_OP unary_expression 
            {
              TSetExpression RESULT =null;
		Location ue1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ue1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TUnaryExpression ue1 = (TUnaryExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSSetOp s = (TSSetOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location ue2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ue2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TUnaryExpression ue2 = (TUnaryExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TSetExpressionSO(ue1, s, ue2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("set_expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // set_expression ::= unary_expression SET_OP 
            {
              TSetExpression RESULT =null;
		Location uexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location uexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TUnaryExpression ue = (TUnaryExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSSetOp s = (TSSetOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TSetExpressionSO(ue, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("set_expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // cast_expression ::= set_expression 
            {
              TCastExpression RESULT =null;
		Location sexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSetExpression se = (TSetExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TCastExpression(se); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cast_expression",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // cast_expression ::= PAR_LEFT type_name PAR_RIGHT cast_expression 
            {
              TCastExpression RESULT =null;
		Location plxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location plxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		TSParLeft pl = (TSParLeft)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location tnxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location tnxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TTypeName tn = (TTypeName)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location prxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location prxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSParRight pr = (TSParRight)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location cexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location cexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TCastExpression ce = (TCastExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TCastExpression(pl, tn, pr, ce); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cast_expression",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // multiplicative_expression ::= cast_expression 
            {
              TMultiplicativeExpression RESULT =null;
		Location cexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location cexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TCastExpression ce = (TCastExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TMultiplicativeExpression(ce); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // multiplicative_expression ::= multiplicative_expression MUL_OP cast_expression 
            {
              TMultiplicativeExpression RESULT =null;
		Location mexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location mexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TMultiplicativeExpression me = (TMultiplicativeExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location mxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location mxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSMulOp m = (TSMulOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location cexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location cexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TCastExpression ce = (TCastExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TMultiplicativeExpression(me, m, ce); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // multiplicative_expression ::= multiplicative_expression DIV_OP cast_expression 
            {
              TMultiplicativeExpression RESULT =null;
		Location mexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location mexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TMultiplicativeExpression me = (TMultiplicativeExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSDivOp d = (TSDivOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location cexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location cexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TCastExpression ce = (TCastExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TMultiplicativeExpression(me, d, ce); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // multiplicative_expression ::= multiplicative_expression MOD_OP cast_expression 
            {
              TMultiplicativeExpression RESULT =null;
		Location mexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location mexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TMultiplicativeExpression me = (TMultiplicativeExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location mxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location mxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSModOp m = (TSModOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location cexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location cexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TCastExpression ce = (TCastExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TMultiplicativeExpression(me, m, ce); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // additive_expression ::= multiplicative_expression 
            {
              TAdditiveExpression RESULT =null;
		Location mexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location mexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TMultiplicativeExpression me = (TMultiplicativeExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TAdditiveExpression(me); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("additive_expression",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // additive_expression ::= additive_expression ADD_OP multiplicative_expression 
            {
              TAdditiveExpression RESULT =null;
		Location aexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location aexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TAdditiveExpression ae = (TAdditiveExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSAddOp a = (TSAddOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location mexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location mexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TMultiplicativeExpression me = (TMultiplicativeExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TAdditiveExpression(ae, a, me); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("additive_expression",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // additive_expression ::= additive_expression SUB_OP multiplicative_expression 
            {
              TAdditiveExpression RESULT =null;
		Location aexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location aexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TAdditiveExpression ae = (TAdditiveExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSSubOp s = (TSSubOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location mexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location mexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TMultiplicativeExpression me = (TMultiplicativeExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TAdditiveExpression(ae, s, me); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("additive_expression",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // shift_expression ::= additive_expression 
            {
              TShiftExpression RESULT =null;
		Location aexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location aexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TAdditiveExpression ae = (TAdditiveExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TShiftExpression(ae); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("shift_expression",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // shift_expression ::= shift_expression LEFT_OP additive_expression 
            {
              TShiftExpression RESULT =null;
		Location sexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location sexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TShiftExpression se = (TShiftExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSLeftOp l = (TSLeftOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location aexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location aexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TAdditiveExpression ae = (TAdditiveExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TShiftExpression(se, l, ae); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("shift_expression",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // shift_expression ::= shift_expression RIGHT_OP additive_expression 
            {
              TShiftExpression RESULT =null;
		Location sexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location sexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TShiftExpression se = (TShiftExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSRightOp r = (TSRightOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location aexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location aexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TAdditiveExpression ae = (TAdditiveExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TShiftExpression(se, r, ae); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("shift_expression",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // relational_expression ::= shift_expression 
            {
              TRelationalExpression RESULT =null;
		Location sexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TShiftExpression se = (TShiftExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TRelationalExpression(se); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_expression",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // relational_expression ::= relational_expression LT_OP shift_expression 
            {
              TRelationalExpression RESULT =null;
		Location rexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location rexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TRelationalExpression re = (TRelationalExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSLtOp l = (TSLtOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location sexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TShiftExpression se = (TShiftExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TRelationalExpression(re, l, se); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_expression",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // relational_expression ::= relational_expression GT_OP shift_expression 
            {
              TRelationalExpression RESULT =null;
		Location rexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location rexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TRelationalExpression re = (TRelationalExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location gxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location gxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSGtOp g = (TSGtOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location sexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TShiftExpression se = (TShiftExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TRelationalExpression(re, g, se); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_expression",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // relational_expression ::= relational_expression LE_OP shift_expression 
            {
              TRelationalExpression RESULT =null;
		Location rexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location rexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TRelationalExpression re = (TRelationalExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSLeOp l = (TSLeOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location sexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TShiftExpression se = (TShiftExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TRelationalExpression(re, l, se); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_expression",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // relational_expression ::= relational_expression GE_OP shift_expression 
            {
              TRelationalExpression RESULT =null;
		Location rexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location rexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TRelationalExpression re = (TRelationalExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location gxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location gxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSGeOp g = (TSGeOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location sexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TShiftExpression se = (TShiftExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TRelationalExpression(re, g, se); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_expression",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // equality_expression ::= relational_expression 
            {
              TEqualityExpression RESULT =null;
		Location rexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location rexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TRelationalExpression re = (TRelationalExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TEqualityExpression(re); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality_expression",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // equality_expression ::= equality_expression EQ_OP relational_expression 
            {
              TEqualityExpression RESULT =null;
		Location eexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location eexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TEqualityExpression ee = (TEqualityExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSEqOp e = (TSEqOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location rexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location rexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TRelationalExpression re = (TRelationalExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TEqualityExpression(ee, e, re); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality_expression",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // equality_expression ::= equality_expression NE_OP relational_expression 
            {
              TEqualityExpression RESULT =null;
		Location eexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location eexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TEqualityExpression ee = (TEqualityExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSNeOp n = (TSNeOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location rexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location rexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TRelationalExpression re = (TRelationalExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TEqualityExpression(ee, n, re); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality_expression",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // and_expression ::= equality_expression 
            {
              TAndExpression RESULT =null;
		Location eexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location eexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TEqualityExpression ee = (TEqualityExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TAndExpression(ee); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("and_expression",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // and_expression ::= and_expression BAND_OP equality_expression 
            {
              TAndExpression RESULT =null;
		Location aexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location aexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TAndExpression ae = (TAndExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSBandOp b = (TSBandOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location eexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location eexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TEqualityExpression ee = (TEqualityExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TAndExpression(ae, b, ee); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("and_expression",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // exclusive_or_expression ::= and_expression 
            {
              TExclusiveOrExpression RESULT =null;
		Location aexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location aexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TAndExpression ae = (TAndExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TExclusiveOrExpression(ae); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exclusive_or_expression",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // exclusive_or_expression ::= exclusive_or_expression XOR_OP and_expression 
            {
              TExclusiveOrExpression RESULT =null;
		Location eoexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location eoexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TExclusiveOrExpression eoe = (TExclusiveOrExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location xxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location xxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSXorOp x = (TSXorOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location aexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location aexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TAndExpression ae = (TAndExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TExclusiveOrExpression(eoe, x, ae); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exclusive_or_expression",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // inclusive_or_expression ::= exclusive_or_expression 
            {
              TInclusiveOrExpression RESULT =null;
		Location eoexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location eoexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TExclusiveOrExpression eoe = (TExclusiveOrExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TInclusiveOrExpression(eoe); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inclusive_or_expression",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // inclusive_or_expression ::= inclusive_or_expression BOR_OP exclusive_or_expression 
            {
              TInclusiveOrExpression RESULT =null;
		Location ioexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ioexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TInclusiveOrExpression ioe = (TInclusiveOrExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSBorOp b = (TSBorOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location eoexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location eoexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TExclusiveOrExpression eoe = (TExclusiveOrExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TInclusiveOrExpression(ioe, b, eoe); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inclusive_or_expression",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // logical_and_expression ::= inclusive_or_expression 
            {
              TLogicalAndExpression RESULT =null;
		Location ioexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ioexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TInclusiveOrExpression ioe = (TInclusiveOrExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TLogicalAndExpression(ioe); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_and_expression",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // logical_and_expression ::= logical_and_expression AND_OP inclusive_or_expression 
            {
              TLogicalAndExpression RESULT =null;
		Location laexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location laexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TLogicalAndExpression lae = (TLogicalAndExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSAndOp a = (TSAndOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location ioexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ioexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TInclusiveOrExpression ioe = (TInclusiveOrExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TLogicalAndExpression(lae, a, ioe); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_and_expression",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // logical_or_expression ::= logical_and_expression 
            {
              TLogicalOrExpression RESULT =null;
		Location laexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location laexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TLogicalAndExpression lae = (TLogicalAndExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TLogicalOrExpression(lae); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_or_expression",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // logical_or_expression ::= logical_or_expression OR_OP logical_and_expression 
            {
              TLogicalOrExpression RESULT =null;
		Location loexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location loexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TLogicalOrExpression loe = (TLogicalOrExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location oxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location oxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSOrOp o = (TSOrOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location laexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location laexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TLogicalAndExpression lae = (TLogicalAndExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TLogicalOrExpression(loe, o, lae); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_or_expression",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // conditional_expression ::= logical_or_expression 
            {
              TConditionalExpression RESULT =null;
		Location loexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location loexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TLogicalOrExpression loe = (TLogicalOrExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TConditionalExpression(loe); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional_expression",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // conditional_expression ::= logical_or_expression QUES expression COLON conditional_expression 
            {
              TConditionalExpression RESULT =null;
		Location loexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location loexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		TLogicalOrExpression loe = (TLogicalOrExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location qxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location qxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		TSQues q = (TSQues)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TExpression e = (TExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSColon c = (TSColon)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location cexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location cexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TConditionalExpression ce = (TConditionalExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TConditionalExpression(loe, q, e, c, ce); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional_expression",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // assignment_expression ::= conditional_expression 
            {
              TAssignmentExpression RESULT =null;
		Location cexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location cexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TConditionalExpression ce = (TConditionalExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TAssignmentExpression(ce); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_expression",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // assignment_expression ::= unary_expression assignment_operator assignment_expression 
            {
              TAssignmentExpression RESULT =null;
		Location uexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location uexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TUnaryExpression ue = (TUnaryExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location aoxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location aoxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TAssignmentOperator ao = (TAssignmentOperator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location aexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location aexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TAssignmentExpression ae = (TAssignmentExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TAssignmentExpression(ue, ao, ae); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_expression",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // assignment_operator ::= ASSIGN 
            {
              TAssignmentOperator RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSAssign a = (TSAssign)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TAssignmentOperator(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // assignment_operator ::= MUL_ASSIGN 
            {
              TAssignmentOperator RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSMulAssign a = (TSMulAssign)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TAssignmentOperator(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // assignment_operator ::= DIV_ASSIGN 
            {
              TAssignmentOperator RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSDivAssign a = (TSDivAssign)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TAssignmentOperator(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // assignment_operator ::= MOD_ASSIGN 
            {
              TAssignmentOperator RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSModAssign a = (TSModAssign)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TAssignmentOperator(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // assignment_operator ::= ADD_ASSIGN 
            {
              TAssignmentOperator RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSAddAssign a = (TSAddAssign)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TAssignmentOperator(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // assignment_operator ::= SUB_ASSIGN 
            {
              TAssignmentOperator RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSSubAssign a = (TSSubAssign)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TAssignmentOperator(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // assignment_operator ::= LEFT_ASSIGN 
            {
              TAssignmentOperator RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSLeftAssign a = (TSLeftAssign)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TAssignmentOperator(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // assignment_operator ::= RIGHT_ASSIGN 
            {
              TAssignmentOperator RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSRightAssign a = (TSRightAssign)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TAssignmentOperator(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // assignment_operator ::= AND_ASSIGN 
            {
              TAssignmentOperator RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSAndAssign a = (TSAndAssign)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TAssignmentOperator(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // assignment_operator ::= XOR_ASSIGN 
            {
              TAssignmentOperator RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSXorAssign a = (TSXorAssign)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TAssignmentOperator(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // assignment_operator ::= OR_ASSIGN 
            {
              TAssignmentOperator RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSOrAssign a = (TSOrAssign)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TAssignmentOperator(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // expression ::= assignment_expression 
            {
              TExpression RESULT =null;
		Location aexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location aexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TAssignmentExpression ae = (TAssignmentExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TExpression(ae); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // expression ::= expression COMMA assignment_expression 
            {
              TExpression RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TExpression e = (TExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSComma c = (TSComma)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location aexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location aexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TAssignmentExpression ae = (TAssignmentExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TExpression(e, c, ae); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // constant_expression ::= conditional_expression 
            {
              TConstantExpression RESULT =null;
		Location cexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location cexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TConditionalExpression ce = (TConditionalExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TConstantExpression(ce); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant_expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // declaration ::= declaration_specifiers SEMICOLON 
            {
              TDeclaration RESULT =null;
		Location dsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location dsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TDeclarationSpecifiers ds = (TDeclarationSpecifiers)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSSemicolon s = (TSSemicolon)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TDeclarationDS(ds, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // NT$0 ::= 
            {
              TDeclaration RESULT =null;
		Location dsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location dsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TDeclarationSpecifiers ds = (TDeclarationSpecifiers)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location idlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TInitDeclaratorList idl = (TInitDeclaratorList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 
		if (ds.containsTypedef()) {
			for (String name : idl.getNewTypeNames()) {
				parser.getMedium().addType(name);
			}
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // declaration ::= declaration_specifiers init_declarator_list NT$0 SEMICOLON 
            {
              TDeclaration RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (TDeclaration) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location dsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location dsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		TDeclarationSpecifiers ds = (TDeclarationSpecifiers)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location idlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TInitDeclaratorList idl = (TInitDeclaratorList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSSemicolon s = (TSSemicolon)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TDeclarationDSIDL(ds, idl, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // declaration ::= static_assert_declaration 
            {
              TDeclaration RESULT =null;
		Location sadxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sadxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TStaticAssertDeclaration sad = (TStaticAssertDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TDeclarationSAD(sad); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // declaration_specifiers ::= storage_class_specifier declaration_specifiers 
            {
              TDeclarationSpecifiers RESULT =null;
		Location scsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location scsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TStorageClassSpecifier scs = (TStorageClassSpecifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location dsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TDeclarationSpecifiers ds = (TDeclarationSpecifiers)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TDeclarationSpecifiers(scs, ds); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_specifiers",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // declaration_specifiers ::= storage_class_specifier 
            {
              TDeclarationSpecifiers RESULT =null;
		Location scsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location scsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TStorageClassSpecifier scs = (TStorageClassSpecifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TDeclarationSpecifiers(scs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_specifiers",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // declaration_specifiers ::= type_specifier declaration_specifiers 
            {
              TDeclarationSpecifiers RESULT =null;
		Location tsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location tsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TTypeSpecifier ts = (TTypeSpecifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location dsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TDeclarationSpecifiers ds = (TDeclarationSpecifiers)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TDeclarationSpecifiers(ts, ds); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_specifiers",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // declaration_specifiers ::= type_specifier 
            {
              TDeclarationSpecifiers RESULT =null;
		Location tsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location tsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TTypeSpecifier ts = (TTypeSpecifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TDeclarationSpecifiers(ts); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_specifiers",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // declaration_specifiers ::= type_qualifier declaration_specifiers 
            {
              TDeclarationSpecifiers RESULT =null;
		Location tqxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location tqxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TTypeQualifier tq = (TTypeQualifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location dsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TDeclarationSpecifiers ds = (TDeclarationSpecifiers)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TDeclarationSpecifiers(tq, ds); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_specifiers",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // declaration_specifiers ::= type_qualifier 
            {
              TDeclarationSpecifiers RESULT =null;
		Location tqxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location tqxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TTypeQualifier tq = (TTypeQualifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TDeclarationSpecifiers(tq); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_specifiers",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // declaration_specifiers ::= function_specifier declaration_specifiers 
            {
              TDeclarationSpecifiers RESULT =null;
		Location fsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location fsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TFunctionSpecifier fs = (TFunctionSpecifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location dsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TDeclarationSpecifiers ds = (TDeclarationSpecifiers)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TDeclarationSpecifiers(fs, ds); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_specifiers",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // declaration_specifiers ::= function_specifier 
            {
              TDeclarationSpecifiers RESULT =null;
		Location fsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location fsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TFunctionSpecifier fs = (TFunctionSpecifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TDeclarationSpecifiers(fs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_specifiers",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // declaration_specifiers ::= alignment_specifier declaration_specifiers 
            {
              TDeclarationSpecifiers RESULT =null;
		Location asxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location asxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TAlignmentSpecifier as = (TAlignmentSpecifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location dsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TDeclarationSpecifiers ds = (TDeclarationSpecifiers)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TDeclarationSpecifiers(as, ds); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_specifiers",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // declaration_specifiers ::= alignment_specifier 
            {
              TDeclarationSpecifiers RESULT =null;
		Location asxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location asxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TAlignmentSpecifier as = (TAlignmentSpecifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TDeclarationSpecifiers(as); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_specifiers",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // init_declarator_list ::= init_declarator 
            {
              TInitDeclaratorList RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TInitDeclarator id = (TInitDeclarator)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TInitDeclaratorList(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("init_declarator_list",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // init_declarator_list ::= init_declarator_list COMMA init_declarator 
            {
              TInitDeclaratorList RESULT =null;
		Location idlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TInitDeclaratorList idl = (TInitDeclaratorList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSComma c = (TSComma)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TInitDeclarator id = (TInitDeclarator)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TInitDeclaratorList(idl, c, id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("init_declarator_list",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // init_declarator ::= declarator ASSIGN initializer 
            {
              TInitDeclarator RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TDeclarator d = (TDeclarator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSAssign a = (TSAssign)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TInitializer i = (TInitializer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TInitDeclarator(d, a, i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("init_declarator",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // init_declarator ::= declarator 
            {
              TInitDeclarator RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TDeclarator d = (TDeclarator)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TInitDeclarator(d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("init_declarator",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // init_declarator ::= pointer_comprehension TYPEDEF_NAME 
            {
              TInitDeclarator RESULT =null;
		 RESULT = new TInitDeclarator(new TDeclarator(new TDirectDeclaratorI(new TSIdentifier("")))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("init_declarator",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // storage_class_specifier ::= TYPEDEF 
            {
              TStorageClassSpecifier RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSTypedef s = (TSTypedef)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TStorageClassSpecifier(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("storage_class_specifier",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // storage_class_specifier ::= EXTERN 
            {
              TStorageClassSpecifier RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSExtern s = (TSExtern)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TStorageClassSpecifier(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("storage_class_specifier",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // storage_class_specifier ::= STATIC 
            {
              TStorageClassSpecifier RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSStatic s = (TSStatic)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TStorageClassSpecifier(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("storage_class_specifier",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // storage_class_specifier ::= THREAD_LOCAL 
            {
              TStorageClassSpecifier RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSThreadLocal s = (TSThreadLocal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TStorageClassSpecifier(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("storage_class_specifier",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // storage_class_specifier ::= AUTO 
            {
              TStorageClassSpecifier RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSAuto s = (TSAuto)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TStorageClassSpecifier(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("storage_class_specifier",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // storage_class_specifier ::= REGISTER 
            {
              TStorageClassSpecifier RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSRegister s = (TSRegister)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TStorageClassSpecifier(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("storage_class_specifier",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // type_specifier ::= VOID 
            {
              TTypeSpecifier RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSVoid t = (TSVoid)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TTypeSpecifier(t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // type_specifier ::= CHAR 
            {
              TTypeSpecifier RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSChar t = (TSChar)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TTypeSpecifier(t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // type_specifier ::= SHORT 
            {
              TTypeSpecifier RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSShort t = (TSShort)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TTypeSpecifier(t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // type_specifier ::= INT 
            {
              TTypeSpecifier RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSInt t = (TSInt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TTypeSpecifier(t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // type_specifier ::= LONG 
            {
              TTypeSpecifier RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSLong t = (TSLong)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TTypeSpecifier(t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // type_specifier ::= FLOAT 
            {
              TTypeSpecifier RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSFloat t = (TSFloat)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TTypeSpecifier(t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // type_specifier ::= DOUBLE 
            {
              TTypeSpecifier RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSDouble t = (TSDouble)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TTypeSpecifier(t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // type_specifier ::= SIGNED 
            {
              TTypeSpecifier RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSSigned t = (TSSigned)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TTypeSpecifier(t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // type_specifier ::= UNSIGNED 
            {
              TTypeSpecifier RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSUnsigned t = (TSUnsigned)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TTypeSpecifier(t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // type_specifier ::= BOOL 
            {
              TTypeSpecifier RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSBool t = (TSBool)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TTypeSpecifier(t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // type_specifier ::= COMPLEX 
            {
              TTypeSpecifier RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSComplex t = (TSComplex)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TTypeSpecifier(t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // type_specifier ::= IMAGINARY 
            {
              TTypeSpecifier RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSImaginary t = (TSImaginary)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TTypeSpecifier(t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // type_specifier ::= atomic_type_specifier 
            {
              TTypeSpecifier RESULT =null;
		Location atsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location atsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TAtomicTypeSpecifier ats = (TAtomicTypeSpecifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TTypeSpecifier(ats); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // type_specifier ::= struct_or_union_specifier 
            {
              TTypeSpecifier RESULT =null;
		Location sousxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sousxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TStructOrUnionSpecifier sous = (TStructOrUnionSpecifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TTypeSpecifier(sous); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // type_specifier ::= enum_specifier 
            {
              TTypeSpecifier RESULT =null;
		Location esxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location esxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TEnumSpecifier es = (TEnumSpecifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TTypeSpecifier(es); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // type_specifier ::= TYPEDEF_NAME 
            {
              TTypeSpecifier RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSTypedefName t = (TSTypedefName)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TTypeSpecifier(t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // type_specifier ::= macro_type_specifier 
            {
              TTypeSpecifier RESULT =null;
		Location mtsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location mtsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TMacroTypeSpecifier mts = (TMacroTypeSpecifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TTypeSpecifier(mts); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // macro_type_specifier ::= MACRO_TYPE IDENTIFIER PAR_LEFT PAR_RIGHT 
            {
              TMacroTypeSpecifier RESULT =null;
		Location mtxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location mtxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		TSMacroType mt = (TSMacroType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TSIdentifier i = (TSIdentifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location plxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location plxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSParLeft pl = (TSParLeft)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location prxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location prxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSParRight pr = (TSParRight)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TMacroTypeSpecifier(mt, i, pl, pr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("macro_type_specifier",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // macro_type_specifier ::= MACRO_TYPE IDENTIFIER PAR_LEFT macro_argument_list PAR_RIGHT 
            {
              TMacroTypeSpecifier RESULT =null;
		Location mtxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location mtxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		TSMacroType mt = (TSMacroType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		TSIdentifier i = (TSIdentifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location plxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location plxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TSParLeft pl = (TSParLeft)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location malxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location malxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TMacroArgumentList mal = (TMacroArgumentList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location prxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location prxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSParRight pr = (TSParRight)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TMacroTypeSpecifier(mt, i, pl, mal, pr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("macro_type_specifier",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // struct_or_union_specifier ::= struct_or_union BRACE_LEFT struct_declaration_list BRACE_RIGHT 
            {
              TStructOrUnionSpecifier RESULT =null;
		Location souxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location souxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		TStructOrUnion sou = (TStructOrUnion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location blxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location blxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TSBraceLeft bl = (TSBraceLeft)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location sdlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location sdlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TStructDeclarationList sdl = (TStructDeclarationList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location brxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location brxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSBraceRight br = (TSBraceRight)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TStructOrUnionSpecifier(sou, bl, sdl, br); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_or_union_specifier",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // struct_or_union_specifier ::= struct_or_union IDENTIFIER BRACE_LEFT struct_declaration_list BRACE_RIGHT 
            {
              TStructOrUnionSpecifier RESULT =null;
		Location souxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location souxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		TStructOrUnion sou = (TStructOrUnion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		TSIdentifier i = (TSIdentifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location blxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location blxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TSBraceLeft bl = (TSBraceLeft)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location sdlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location sdlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TStructDeclarationList sdl = (TStructDeclarationList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location brxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location brxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSBraceRight br = (TSBraceRight)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TStructOrUnionSpecifier(sou, i, bl, sdl, br); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_or_union_specifier",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // struct_or_union_specifier ::= struct_or_union IDENTIFIER 
            {
              TStructOrUnionSpecifier RESULT =null;
		Location souxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location souxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TStructOrUnion sou = (TStructOrUnion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSIdentifier i = (TSIdentifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TStructOrUnionSpecifier(sou, i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_or_union_specifier",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // struct_or_union_specifier ::= struct_or_union TYPEDEF_NAME 
            {
              TStructOrUnionSpecifier RESULT =null;
		Location souxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location souxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TStructOrUnion sou = (TStructOrUnion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSTypedefName t = (TSTypedefName)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TStructOrUnionSpecifier(sou, t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_or_union_specifier",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // struct_or_union ::= STRUCT 
            {
              TStructOrUnion RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSStruct s = (TSStruct)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TStructOrUnion(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_or_union",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // struct_or_union ::= UNION 
            {
              TStructOrUnion RESULT =null;
		Location uxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location uxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSUnion u = (TSUnion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TStructOrUnion(u); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_or_union",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // struct_declaration_list ::= struct_declaration 
            {
              TStructDeclarationList RESULT =null;
		Location sdxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sdxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TStructDeclaration sd = (TStructDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TStructDeclarationList(sd); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_declaration_list",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // struct_declaration_list ::= struct_declaration_list struct_declaration 
            {
              TStructDeclarationList RESULT =null;
		Location sdlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location sdlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TStructDeclarationList sdl = (TStructDeclarationList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location sdxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sdxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TStructDeclaration sd = (TStructDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TStructDeclarationList(sdl, sd); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_declaration_list",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // struct_declaration ::= specifier_qualifier_list SEMICOLON 
            {
              TStructDeclaration RESULT =null;
		Location sqlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location sqlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSpecifierQualifierList sql = (TSpecifierQualifierList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSSemicolon s = (TSSemicolon)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TStructDeclarationSQL(sql, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_declaration",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // struct_declaration ::= specifier_qualifier_list struct_declarator_list SEMICOLON 
            {
              TStructDeclaration RESULT =null;
		Location sqlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location sqlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TSpecifierQualifierList sql = (TSpecifierQualifierList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location sdlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location sdlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TStructDeclaratorList sdl = (TStructDeclaratorList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSSemicolon s = (TSSemicolon)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TStructDeclarationSQLSDL(sql, sdl, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_declaration",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // struct_declaration ::= static_assert_declaration 
            {
              TStructDeclaration RESULT =null;
		Location sadxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sadxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TStaticAssertDeclaration sad = (TStaticAssertDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TStructDeclarationSAD(sad); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_declaration",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // specifier_qualifier_list ::= type_specifier specifier_qualifier_list 
            {
              TSpecifierQualifierList RESULT =null;
		Location tsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location tsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TTypeSpecifier ts = (TTypeSpecifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location sqlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sqlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSpecifierQualifierList sql = (TSpecifierQualifierList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TSpecifierQualifierList(ts, sql); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("specifier_qualifier_list",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // specifier_qualifier_list ::= type_specifier 
            {
              TSpecifierQualifierList RESULT =null;
		Location tsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location tsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TTypeSpecifier ts = (TTypeSpecifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TSpecifierQualifierList(ts); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("specifier_qualifier_list",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // specifier_qualifier_list ::= type_qualifier specifier_qualifier_list 
            {
              TSpecifierQualifierList RESULT =null;
		Location tqxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location tqxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TTypeQualifier tq = (TTypeQualifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location sqlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sqlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSpecifierQualifierList sql = (TSpecifierQualifierList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TSpecifierQualifierList(tq, sql); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("specifier_qualifier_list",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // specifier_qualifier_list ::= type_qualifier 
            {
              TSpecifierQualifierList RESULT =null;
		Location tqxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location tqxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TTypeQualifier tq = (TTypeQualifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TSpecifierQualifierList(tq); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("specifier_qualifier_list",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // struct_declarator_list ::= struct_declarator 
            {
              TStructDeclaratorList RESULT =null;
		Location sdxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sdxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TStructDeclarator sd = (TStructDeclarator)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TStructDeclaratorList(sd); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_declarator_list",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // struct_declarator_list ::= struct_declarator_list COMMA struct_declarator 
            {
              TStructDeclaratorList RESULT =null;
		Location sdlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location sdlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TStructDeclaratorList sdl = (TStructDeclaratorList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSComma c = (TSComma)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location sdxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sdxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TStructDeclarator sd = (TStructDeclarator)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TStructDeclaratorList(sdl, c, sd); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_declarator_list",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // struct_declarator ::= COLON constant_expression 
            {
              TStructDeclarator RESULT =null;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSColon c = (TSColon)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location cexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location cexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TConstantExpression ce = (TConstantExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TStructDeclarator(c, ce); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_declarator",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // struct_declarator ::= declarator COLON constant_expression 
            {
              TStructDeclarator RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TDeclarator d = (TDeclarator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSColon c = (TSColon)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location cexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location cexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TConstantExpression ce = (TConstantExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TStructDeclarator(d, c, ce); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_declarator",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // struct_declarator ::= declarator 
            {
              TStructDeclarator RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TDeclarator d = (TDeclarator)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TStructDeclarator(d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_declarator",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // enum_specifier ::= ENUM BRACE_LEFT enumerator_list BRACE_RIGHT 
            {
              TEnumSpecifier RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		TSEnum e = (TSEnum)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location blxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location blxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TSBraceLeft bl = (TSBraceLeft)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location elxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location elxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TEnumeratorList el = (TEnumeratorList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location brxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location brxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSBraceRight br = (TSBraceRight)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TEnumSpecifier(e, bl, el, br); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("enum_specifier",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // enum_specifier ::= ENUM BRACE_LEFT enumerator_list COMMA BRACE_RIGHT 
            {
              TEnumSpecifier RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		TSEnum e = (TSEnum)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location blxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location blxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		TSBraceLeft bl = (TSBraceLeft)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location elxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location elxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TEnumeratorList el = (TEnumeratorList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSComma c = (TSComma)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location brxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location brxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSBraceRight br = (TSBraceRight)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TEnumSpecifier(e, bl, el, c, br); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("enum_specifier",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // enum_specifier ::= ENUM IDENTIFIER BRACE_LEFT enumerator_list BRACE_RIGHT 
            {
              TEnumSpecifier RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		TSEnum e = (TSEnum)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		TSIdentifier i = (TSIdentifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location blxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location blxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TSBraceLeft bl = (TSBraceLeft)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location elxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location elxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TEnumeratorList el = (TEnumeratorList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location brxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location brxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSBraceRight br = (TSBraceRight)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TEnumSpecifier(e, i, bl, el, br); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("enum_specifier",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // enum_specifier ::= ENUM IDENTIFIER BRACE_LEFT enumerator_list COMMA BRACE_RIGHT 
            {
              TEnumSpecifier RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		TSEnum e = (TSEnum)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		TSIdentifier i = (TSIdentifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location blxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location blxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		TSBraceLeft bl = (TSBraceLeft)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location elxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location elxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TEnumeratorList el = (TEnumeratorList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSComma c = (TSComma)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location brxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location brxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSBraceRight br = (TSBraceRight)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TEnumSpecifier(e, i, bl, el, c, br); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("enum_specifier",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // enum_specifier ::= ENUM IDENTIFIER 
            {
              TEnumSpecifier RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSEnum e = (TSEnum)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSIdentifier i = (TSIdentifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TEnumSpecifier(e, i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("enum_specifier",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // enumerator_list ::= enumerator 
            {
              TEnumeratorList RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TEnumerator e = (TEnumerator)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TEnumeratorList(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("enumerator_list",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // enumerator_list ::= enumerator_list COMMA enumerator 
            {
              TEnumeratorList RESULT =null;
		Location elxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location elxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TEnumeratorList el = (TEnumeratorList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSComma c = (TSComma)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TEnumerator e = (TEnumerator)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TEnumeratorList(el, c, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("enumerator_list",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // enumerator ::= enumeration_constant ASSIGN constant_expression 
            {
              TEnumerator RESULT =null;
		Location ecxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ecxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TEnumerationConstant ec = (TEnumerationConstant)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSAssign a = (TSAssign)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location cexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location cexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TConstantExpression ce = (TConstantExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TEnumerator(ec, a, ce); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("enumerator",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // enumerator ::= enumeration_constant 
            {
              TEnumerator RESULT =null;
		Location ecxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ecxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TEnumerationConstant ec = (TEnumerationConstant)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TEnumerator(ec); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("enumerator",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // atomic_type_specifier ::= ATOMIC PAR_LEFT type_name PAR_RIGHT 
            {
              TAtomicTypeSpecifier RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		TSAtomic a = (TSAtomic)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location plxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location plxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TSParLeft pl = (TSParLeft)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location tnxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location tnxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TTypeName tn = (TTypeName)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location prxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location prxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSParRight pr = (TSParRight)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TAtomicTypeSpecifier(a, pl, tn, pr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atomic_type_specifier",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // type_qualifier ::= CONST 
            {
              TTypeQualifier RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSConst t = (TSConst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TTypeQualifier(t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_qualifier",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // type_qualifier ::= RESTRICT 
            {
              TTypeQualifier RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSRestrict t = (TSRestrict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TTypeQualifier(t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_qualifier",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // type_qualifier ::= VOLATILE 
            {
              TTypeQualifier RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSVolatile t = (TSVolatile)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TTypeQualifier(t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_qualifier",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // type_qualifier ::= ATOMIC 
            {
              TTypeQualifier RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSAtomic t = (TSAtomic)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TTypeQualifier(t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_qualifier",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // function_specifier ::= INLINE 
            {
              TFunctionSpecifier RESULT =null;
		Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSInline f = (TSInline)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TFunctionSpecifier(f); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_specifier",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // function_specifier ::= NORETURN 
            {
              TFunctionSpecifier RESULT =null;
		Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSNoreturn f = (TSNoreturn)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TFunctionSpecifier(f); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_specifier",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // alignment_specifier ::= ALIGNAS PAR_LEFT type_name PAR_RIGHT 
            {
              TAlignmentSpecifier RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		TSAlignas a = (TSAlignas)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location plxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location plxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TSParLeft pl = (TSParLeft)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location tnxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location tnxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TTypeName tn = (TTypeName)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location prxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location prxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSParRight pr = (TSParRight)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TAlignmentSpecifier(a, pl, tn, pr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("alignment_specifier",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // alignment_specifier ::= ALIGNAS PAR_LEFT constant_expression PAR_RIGHT 
            {
              TAlignmentSpecifier RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		TSAlignas a = (TSAlignas)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location plxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location plxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TSParLeft pl = (TSParLeft)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location cexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location cexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TConstantExpression ce = (TConstantExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location prxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location prxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSParRight pr = (TSParRight)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TAlignmentSpecifier(a, pl, ce, pr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("alignment_specifier",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // declarator ::= pointer_comprehension direct_declarator 
            {
              TDeclarator RESULT =null;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TPointerComprehension p = (TPointerComprehension)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location ddxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ddxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TDirectDeclarator dd = (TDirectDeclarator)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TDeclarator(p, dd); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarator",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // declarator ::= direct_declarator 
            {
              TDeclarator RESULT =null;
		Location ddxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ddxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TDirectDeclarator dd = (TDirectDeclarator)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TDeclarator(dd); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarator",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // direct_declarator ::= IDENTIFIER 
            {
              TDirectDeclarator RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSIdentifier i = (TSIdentifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TDirectDeclaratorI(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direct_declarator",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // direct_declarator ::= PAR_LEFT declarator PAR_RIGHT 
            {
              TDirectDeclarator RESULT =null;
		Location plxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location plxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TSParLeft pl = (TSParLeft)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TDeclarator d = (TDeclarator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location prxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location prxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSParRight pr = (TSParRight)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TDirectDeclaratorD(pl, d, pr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direct_declarator",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // direct_declarator ::= direct_declarator BRACKET_LEFT BRACKET_RIGHT 
            {
              TDirectDeclarator RESULT =null;
		Location ddxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ddxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TDirectDeclarator dd = (TDirectDeclarator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location blxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location blxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSBracketLeft bl = (TSBracketLeft)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location brxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location brxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSBracketRight br = (TSBracketRight)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TDirectDeclaratorA(dd, bl, br); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direct_declarator",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // direct_declarator ::= direct_declarator BRACKET_LEFT MUL_OP BRACKET_RIGHT 
            {
              TDirectDeclarator RESULT =null;
		Location ddxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location ddxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		TDirectDeclarator dd = (TDirectDeclarator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location blxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location blxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TSBracketLeft bl = (TSBracketLeft)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location mxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location mxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSMulOp m = (TSMulOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location brxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location brxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSBracketRight br = (TSBracketRight)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TDirectDeclaratorA(dd, bl, m, br); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direct_declarator",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // direct_declarator ::= direct_declarator BRACKET_LEFT STATIC type_qualifier_list assignment_expression BRACKET_RIGHT 
            {
              TDirectDeclarator RESULT =null;
		Location ddxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location ddxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		TDirectDeclarator dd = (TDirectDeclarator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location blxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location blxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		TSBracketLeft bl = (TSBracketLeft)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		TSStatic s = (TSStatic)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location tqlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location tqlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TTypeQualifierList tql = (TTypeQualifierList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location aexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location aexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TAssignmentExpression ae = (TAssignmentExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location brxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location brxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSBracketRight br = (TSBracketRight)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TDirectDeclaratorA(dd, bl, s, tql, ae, br); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direct_declarator",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // direct_declarator ::= direct_declarator BRACKET_LEFT STATIC assignment_expression BRACKET_RIGHT 
            {
              TDirectDeclarator RESULT =null;
		Location ddxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location ddxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		TDirectDeclarator dd = (TDirectDeclarator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location blxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location blxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		TSBracketLeft bl = (TSBracketLeft)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TSStatic s = (TSStatic)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location aexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location aexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TAssignmentExpression ae = (TAssignmentExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location brxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location brxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSBracketRight br = (TSBracketRight)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TDirectDeclaratorA(dd, bl, s, ae, br); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direct_declarator",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // direct_declarator ::= direct_declarator BRACKET_LEFT type_qualifier_list MUL_OP BRACKET_RIGHT 
            {
              TDirectDeclarator RESULT =null;
		Location ddxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location ddxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		TDirectDeclarator dd = (TDirectDeclarator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location blxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location blxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		TSBracketLeft bl = (TSBracketLeft)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location tqlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location tqlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TTypeQualifierList tql = (TTypeQualifierList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location mxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location mxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSMulOp m = (TSMulOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location brxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location brxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSBracketRight br = (TSBracketRight)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TDirectDeclaratorA(dd, bl, tql, m, br); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direct_declarator",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // direct_declarator ::= direct_declarator BRACKET_LEFT type_qualifier_list STATIC assignment_expression BRACKET_RIGHT 
            {
              TDirectDeclarator RESULT =null;
		Location ddxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location ddxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		TDirectDeclarator dd = (TDirectDeclarator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location blxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location blxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		TSBracketLeft bl = (TSBracketLeft)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location tqlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location tqlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		TTypeQualifierList tql = (TTypeQualifierList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TSStatic s = (TSStatic)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location aexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location aexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TAssignmentExpression ae = (TAssignmentExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location brxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location brxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSBracketRight br = (TSBracketRight)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TDirectDeclaratorA(dd, bl, tql, s, ae, br); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direct_declarator",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // direct_declarator ::= direct_declarator BRACKET_LEFT type_qualifier_list assignment_expression BRACKET_RIGHT 
            {
              TDirectDeclarator RESULT =null;
		Location ddxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location ddxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		TDirectDeclarator dd = (TDirectDeclarator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location blxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location blxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		TSBracketLeft bl = (TSBracketLeft)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location tqlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location tqlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TTypeQualifierList tql = (TTypeQualifierList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location aexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location aexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TAssignmentExpression ae = (TAssignmentExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location brxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location brxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSBracketRight br = (TSBracketRight)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TDirectDeclaratorA(dd, bl, tql, ae, br); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direct_declarator",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // direct_declarator ::= direct_declarator BRACKET_LEFT type_qualifier_list BRACKET_RIGHT 
            {
              TDirectDeclarator RESULT =null;
		Location ddxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location ddxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		TDirectDeclarator dd = (TDirectDeclarator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location blxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location blxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TSBracketLeft bl = (TSBracketLeft)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location tqlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location tqlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TTypeQualifierList tql = (TTypeQualifierList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location brxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location brxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSBracketRight br = (TSBracketRight)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TDirectDeclaratorA(dd, bl, tql, br); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direct_declarator",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // direct_declarator ::= direct_declarator BRACKET_LEFT assignment_expression BRACKET_RIGHT 
            {
              TDirectDeclarator RESULT =null;
		Location ddxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location ddxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		TDirectDeclarator dd = (TDirectDeclarator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location blxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location blxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TSBracketLeft bl = (TSBracketLeft)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location aexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location aexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TAssignmentExpression ae = (TAssignmentExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location brxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location brxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSBracketRight br = (TSBracketRight)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TDirectDeclaratorA(dd, bl, ae, br); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direct_declarator",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // direct_declarator ::= direct_declarator PAR_LEFT parameter_type_list PAR_RIGHT 
            {
              TDirectDeclarator RESULT =null;
		Location ddxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location ddxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		TDirectDeclarator dd = (TDirectDeclarator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location plxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location plxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TSParLeft pl = (TSParLeft)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location ptlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location ptlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TParameterTypeList ptl = (TParameterTypeList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location prxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location prxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSParRight pr = (TSParRight)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TDirectDeclaratorF(dd, pl, ptl, pr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direct_declarator",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // direct_declarator ::= direct_declarator PAR_LEFT PAR_RIGHT 
            {
              TDirectDeclarator RESULT =null;
		Location ddxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ddxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TDirectDeclarator dd = (TDirectDeclarator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location plxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location plxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSParLeft pl = (TSParLeft)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location prxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location prxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSParRight pr = (TSParRight)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TDirectDeclaratorF(dd, pl, pr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direct_declarator",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // direct_declarator ::= direct_declarator PAR_LEFT identifier_list PAR_RIGHT 
            {
              TDirectDeclarator RESULT =null;
		Location ddxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location ddxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		TDirectDeclarator dd = (TDirectDeclarator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location plxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location plxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TSParLeft pl = (TSParLeft)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location ilxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location ilxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TIdentifierList il = (TIdentifierList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location prxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location prxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSParRight pr = (TSParRight)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TDirectDeclaratorF(dd, pl, il, pr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direct_declarator",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // direct_declarator ::= direct_declarator GENERATOR 
            {
              TDirectDeclarator RESULT =null;
		Location ddxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location ddxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TDirectDeclarator dd = (TDirectDeclarator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location gxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location gxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSGenerator g = (TSGenerator)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TDirectDeclaratorG(dd, g); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direct_declarator",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // pointer_comprehension ::= MUL_OP type_qualifier_list pointer_comprehension 
            {
              TPointerComprehension RESULT =null;
		Location mxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location mxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TSMulOp m = (TSMulOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location tqlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location tqlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TTypeQualifierList tql = (TTypeQualifierList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TPointerComprehension p = (TPointerComprehension)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TPointerComprehension(m, tql, p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pointer_comprehension",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // pointer_comprehension ::= MUL_OP type_qualifier_list 
            {
              TPointerComprehension RESULT =null;
		Location mxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location mxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSMulOp m = (TSMulOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location tqlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location tqlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TTypeQualifierList tql = (TTypeQualifierList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TPointerComprehension(m, tql); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pointer_comprehension",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // pointer_comprehension ::= MUL_OP pointer_comprehension 
            {
              TPointerComprehension RESULT =null;
		Location mxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location mxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSMulOp m = (TSMulOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TPointerComprehension p = (TPointerComprehension)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TPointerComprehension(m, p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pointer_comprehension",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // pointer_comprehension ::= MUL_OP 
            {
              TPointerComprehension RESULT =null;
		Location mxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location mxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSMulOp m = (TSMulOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TPointerComprehension(m); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pointer_comprehension",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // pointer_comprehension ::= COMP_OP type_qualifier_list pointer_comprehension 
            {
              TPointerComprehension RESULT =null;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TSCompOp c = (TSCompOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location tqlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location tqlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TTypeQualifierList tql = (TTypeQualifierList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TPointerComprehension p = (TPointerComprehension)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TPointerComprehension(c, tql, p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pointer_comprehension",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // pointer_comprehension ::= COMP_OP type_qualifier_list 
            {
              TPointerComprehension RESULT =null;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSCompOp c = (TSCompOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location tqlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location tqlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TTypeQualifierList tql = (TTypeQualifierList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TPointerComprehension(c, tql); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pointer_comprehension",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // pointer_comprehension ::= COMP_OP pointer_comprehension 
            {
              TPointerComprehension RESULT =null;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSCompOp c = (TSCompOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TPointerComprehension p = (TPointerComprehension)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TPointerComprehension(c, p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pointer_comprehension",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // pointer_comprehension ::= COMP_OP 
            {
              TPointerComprehension RESULT =null;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSCompOp c = (TSCompOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TPointerComprehension(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pointer_comprehension",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // type_qualifier_list ::= type_qualifier 
            {
              TTypeQualifierList RESULT =null;
		Location tqxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location tqxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TTypeQualifier tq = (TTypeQualifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TTypeQualifierList(tq); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_qualifier_list",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // type_qualifier_list ::= type_qualifier_list type_qualifier 
            {
              TTypeQualifierList RESULT =null;
		Location tqlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location tqlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TTypeQualifierList tql = (TTypeQualifierList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location tqxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location tqxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TTypeQualifier tq = (TTypeQualifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TTypeQualifierList(tql, tq); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_qualifier_list",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // parameter_type_list ::= parameter_list COMMA ELLIPSIS 
            {
              TParameterTypeList RESULT =null;
		Location plxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location plxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TParameterList pl = (TParameterList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSComma c = (TSComma)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSEllipsis e = (TSEllipsis)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TParameterTypeList(pl, c, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_type_list",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // parameter_type_list ::= parameter_list 
            {
              TParameterTypeList RESULT =null;
		Location plxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location plxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TParameterList pl = (TParameterList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TParameterTypeList(pl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_type_list",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // parameter_list ::= parameter_declaration 
            {
              TParameterList RESULT =null;
		Location pdxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location pdxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TParameterDeclaration pd = (TParameterDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TParameterList(pd); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_list",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // parameter_list ::= parameter_list COMMA parameter_declaration 
            {
              TParameterList RESULT =null;
		Location plxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location plxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TParameterList pl = (TParameterList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSComma c = (TSComma)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location pdxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location pdxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TParameterDeclaration pd = (TParameterDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TParameterList(pl, c, pd); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_list",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // parameter_declaration ::= declaration_specifiers declarator 
            {
              TParameterDeclaration RESULT =null;
		Location dsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location dsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TDeclarationSpecifiers ds = (TDeclarationSpecifiers)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TDeclarator d = (TDeclarator)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TParameterDeclaration(ds, d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_declaration",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // parameter_declaration ::= declaration_specifiers abstract_declarator 
            {
              TParameterDeclaration RESULT =null;
		Location dsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location dsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TDeclarationSpecifiers ds = (TDeclarationSpecifiers)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location adxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location adxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TAbstractDeclarator ad = (TAbstractDeclarator)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TParameterDeclaration(ds, ad); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_declaration",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // parameter_declaration ::= declaration_specifiers 
            {
              TParameterDeclaration RESULT =null;
		Location dsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TDeclarationSpecifiers ds = (TDeclarationSpecifiers)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TParameterDeclaration(ds); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_declaration",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // identifier_list ::= IDENTIFIER 
            {
              TIdentifierList RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSIdentifier i = (TSIdentifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TIdentifierList(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_list",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // identifier_list ::= identifier_list COMMA IDENTIFIER 
            {
              TIdentifierList RESULT =null;
		Location ilxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ilxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TIdentifierList il = (TIdentifierList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSComma c = (TSComma)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSIdentifier i = (TSIdentifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TIdentifierList(il, c, i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_list",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // type_name ::= specifier_qualifier_list abstract_declarator 
            {
              TTypeName RESULT =null;
		Location sqlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location sqlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSpecifierQualifierList sql = (TSpecifierQualifierList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location adxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location adxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TAbstractDeclarator ad = (TAbstractDeclarator)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TTypeName(sql, ad); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_name",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // type_name ::= specifier_qualifier_list 
            {
              TTypeName RESULT =null;
		Location sqlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sqlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSpecifierQualifierList sql = (TSpecifierQualifierList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TTypeName(sql); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_name",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // abstract_declarator ::= pointer_comprehension direct_abstract_declarator 
            {
              TAbstractDeclarator RESULT =null;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TPointerComprehension p = (TPointerComprehension)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location dadxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dadxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TDirectAbstractDeclarator dad = (TDirectAbstractDeclarator)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TAbstractDeclarator(p, dad); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("abstract_declarator",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // abstract_declarator ::= pointer_comprehension 
            {
              TAbstractDeclarator RESULT =null;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TPointerComprehension p = (TPointerComprehension)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TAbstractDeclarator(p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("abstract_declarator",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // abstract_declarator ::= direct_abstract_declarator 
            {
              TAbstractDeclarator RESULT =null;
		Location dadxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dadxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TDirectAbstractDeclarator dad = (TDirectAbstractDeclarator)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TAbstractDeclarator(dad); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("abstract_declarator",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // direct_abstract_declarator ::= PAR_LEFT abstract_declarator PAR_RIGHT 
            {
              TDirectAbstractDeclarator RESULT =null;
		Location plxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location plxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TSParLeft pl = (TSParLeft)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location adxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location adxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TAbstractDeclarator ad = (TAbstractDeclarator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location prxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location prxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSParRight pr = (TSParRight)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TDirectAbstractDeclaratorAD(pl, ad, pr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direct_abstract_declarator",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // direct_abstract_declarator ::= BRACKET_LEFT BRACKET_RIGHT 
            {
              TDirectAbstractDeclarator RESULT =null;
		Location blxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location blxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSBracketLeft bl = (TSBracketLeft)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location brxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location brxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSBracketRight br = (TSBracketRight)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TDirectAbstractDeclaratorA(bl, br); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direct_abstract_declarator",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // direct_abstract_declarator ::= BRACKET_LEFT MUL_OP BRACKET_RIGHT 
            {
              TDirectAbstractDeclarator RESULT =null;
		Location blxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location blxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TSBracketLeft bl = (TSBracketLeft)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location mxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location mxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSMulOp m = (TSMulOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location brxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location brxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSBracketRight br = (TSBracketRight)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TDirectAbstractDeclaratorA(bl, m, br); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direct_abstract_declarator",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // direct_abstract_declarator ::= BRACKET_LEFT STATIC type_qualifier_list assignment_expression BRACKET_RIGHT 
            {
              TDirectAbstractDeclarator RESULT =null;
		Location blxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location blxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		TSBracketLeft bl = (TSBracketLeft)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		TSStatic s = (TSStatic)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location tqlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location tqlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TTypeQualifierList tql = (TTypeQualifierList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location aexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location aexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TAssignmentExpression ae = (TAssignmentExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location brxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location brxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSBracketRight br = (TSBracketRight)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TDirectAbstractDeclaratorA(bl, s, tql, ae, br); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direct_abstract_declarator",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // direct_abstract_declarator ::= BRACKET_LEFT STATIC assignment_expression BRACKET_RIGHT 
            {
              TDirectAbstractDeclarator RESULT =null;
		Location blxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location blxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		TSBracketLeft bl = (TSBracketLeft)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TSStatic s = (TSStatic)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location aexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location aexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TAssignmentExpression ae = (TAssignmentExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location brxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location brxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSBracketRight br = (TSBracketRight)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TDirectAbstractDeclaratorA(bl, s, ae, br); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direct_abstract_declarator",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // direct_abstract_declarator ::= BRACKET_LEFT type_qualifier_list STATIC assignment_expression BRACKET_RIGHT 
            {
              TDirectAbstractDeclarator RESULT =null;
		Location blxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location blxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		TSBracketLeft bl = (TSBracketLeft)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location tqlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location tqlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		TTypeQualifierList tql = (TTypeQualifierList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TSStatic s = (TSStatic)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location aexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location aexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TAssignmentExpression ae = (TAssignmentExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location brxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location brxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSBracketRight br = (TSBracketRight)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TDirectAbstractDeclaratorA(bl, tql, s, ae, br); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direct_abstract_declarator",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // direct_abstract_declarator ::= BRACKET_LEFT type_qualifier_list assignment_expression BRACKET_RIGHT 
            {
              TDirectAbstractDeclarator RESULT =null;
		Location blxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location blxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		TSBracketLeft bl = (TSBracketLeft)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location tqlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location tqlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TTypeQualifierList tql = (TTypeQualifierList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location aexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location aexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TAssignmentExpression ae = (TAssignmentExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location brxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location brxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSBracketRight br = (TSBracketRight)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TDirectAbstractDeclaratorA(bl, tql, ae, br); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direct_abstract_declarator",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // direct_abstract_declarator ::= BRACKET_LEFT type_qualifier_list BRACKET_RIGHT 
            {
              TDirectAbstractDeclarator RESULT =null;
		Location blxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location blxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TSBracketLeft bl = (TSBracketLeft)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location tqlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location tqlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TTypeQualifierList tql = (TTypeQualifierList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location brxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location brxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSBracketRight br = (TSBracketRight)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TDirectAbstractDeclaratorA(bl, tql, br); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direct_abstract_declarator",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // direct_abstract_declarator ::= BRACKET_LEFT assignment_expression BRACKET_RIGHT 
            {
              TDirectAbstractDeclarator RESULT =null;
		Location blxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location blxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TSBracketLeft bl = (TSBracketLeft)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location aexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location aexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TAssignmentExpression ae = (TAssignmentExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location brxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location brxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSBracketRight br = (TSBracketRight)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TDirectAbstractDeclaratorA(bl, ae, br); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direct_abstract_declarator",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // direct_abstract_declarator ::= direct_abstract_declarator BRACKET_LEFT BRACKET_RIGHT 
            {
              TDirectAbstractDeclarator RESULT =null;
		Location dadxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location dadxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TDirectAbstractDeclarator dad = (TDirectAbstractDeclarator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location blxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location blxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSBracketLeft bl = (TSBracketLeft)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location brxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location brxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSBracketRight br = (TSBracketRight)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TDirectAbstractDeclaratorA(dad, bl, br); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direct_abstract_declarator",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // direct_abstract_declarator ::= direct_abstract_declarator BRACKET_LEFT MUL_OP BRACKET_RIGHT 
            {
              TDirectAbstractDeclarator RESULT =null;
		Location dadxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location dadxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		TDirectAbstractDeclarator dad = (TDirectAbstractDeclarator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location blxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location blxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TSBracketLeft bl = (TSBracketLeft)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location mxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location mxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSMulOp m = (TSMulOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location brxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location brxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSBracketRight br = (TSBracketRight)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TDirectAbstractDeclaratorA(dad, bl, m, br); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direct_abstract_declarator",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // direct_abstract_declarator ::= direct_abstract_declarator BRACKET_LEFT STATIC type_qualifier_list assignment_expression BRACKET_RIGHT 
            {
              TDirectAbstractDeclarator RESULT =null;
		Location dadxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location dadxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		TDirectAbstractDeclarator dad = (TDirectAbstractDeclarator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location blxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location blxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		TSBracketLeft bl = (TSBracketLeft)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		TSStatic s = (TSStatic)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location tqlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location tqlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TTypeQualifierList tql = (TTypeQualifierList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location aexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location aexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TAssignmentExpression ae = (TAssignmentExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location brxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location brxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSBracketRight br = (TSBracketRight)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TDirectAbstractDeclaratorA(dad, bl, s, tql, ae, br); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direct_abstract_declarator",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // direct_abstract_declarator ::= direct_abstract_declarator BRACKET_LEFT STATIC assignment_expression BRACKET_RIGHT 
            {
              TDirectAbstractDeclarator RESULT =null;
		Location dadxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location dadxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		TDirectAbstractDeclarator dad = (TDirectAbstractDeclarator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location blxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location blxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		TSBracketLeft bl = (TSBracketLeft)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TSStatic s = (TSStatic)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location aexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location aexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TAssignmentExpression ae = (TAssignmentExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location brxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location brxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSBracketRight br = (TSBracketRight)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TDirectAbstractDeclaratorA(dad, bl, s, ae, br); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direct_abstract_declarator",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // direct_abstract_declarator ::= direct_abstract_declarator BRACKET_LEFT type_qualifier_list assignment_expression BRACKET_RIGHT 
            {
              TDirectAbstractDeclarator RESULT =null;
		Location dadxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location dadxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		TDirectAbstractDeclarator dad = (TDirectAbstractDeclarator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location blxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location blxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		TSBracketLeft bl = (TSBracketLeft)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location tqlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location tqlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TTypeQualifierList tql = (TTypeQualifierList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location aexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location aexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TAssignmentExpression ae = (TAssignmentExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location brxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location brxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSBracketRight br = (TSBracketRight)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TDirectAbstractDeclaratorA(dad, bl, tql, ae, br); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direct_abstract_declarator",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // direct_abstract_declarator ::= direct_abstract_declarator BRACKET_LEFT type_qualifier_list STATIC assignment_expression BRACKET_RIGHT 
            {
              TDirectAbstractDeclarator RESULT =null;
		Location dadxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location dadxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		TDirectAbstractDeclarator dad = (TDirectAbstractDeclarator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location blxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location blxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		TSBracketLeft bl = (TSBracketLeft)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location tqlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location tqlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		TTypeQualifierList tql = (TTypeQualifierList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TSStatic s = (TSStatic)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location aexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location aexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TAssignmentExpression ae = (TAssignmentExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location brxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location brxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSBracketRight br = (TSBracketRight)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TDirectAbstractDeclaratorA(dad, bl, tql, s, ae, br); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direct_abstract_declarator",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // direct_abstract_declarator ::= direct_abstract_declarator BRACKET_LEFT type_qualifier_list BRACKET_RIGHT 
            {
              TDirectAbstractDeclarator RESULT =null;
		Location dadxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location dadxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		TDirectAbstractDeclarator dad = (TDirectAbstractDeclarator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location blxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location blxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TSBracketLeft bl = (TSBracketLeft)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location tqlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location tqlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TTypeQualifierList tql = (TTypeQualifierList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location brxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location brxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSBracketRight br = (TSBracketRight)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TDirectAbstractDeclaratorA(dad, bl, tql, br); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direct_abstract_declarator",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // direct_abstract_declarator ::= direct_abstract_declarator BRACKET_LEFT assignment_expression BRACKET_RIGHT 
            {
              TDirectAbstractDeclarator RESULT =null;
		Location dadxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location dadxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		TDirectAbstractDeclarator dad = (TDirectAbstractDeclarator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location blxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location blxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TSBracketLeft bl = (TSBracketLeft)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location aexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location aexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TAssignmentExpression ae = (TAssignmentExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location brxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location brxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSBracketRight br = (TSBracketRight)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TDirectAbstractDeclaratorA(dad, bl, ae, br); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direct_abstract_declarator",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // direct_abstract_declarator ::= PAR_LEFT PAR_RIGHT 
            {
              TDirectAbstractDeclarator RESULT =null;
		Location plxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location plxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSParLeft pl = (TSParLeft)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location prxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location prxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSParRight pr = (TSParRight)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TDirectAbstractDeclaratorF(pl, pr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direct_abstract_declarator",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // direct_abstract_declarator ::= PAR_LEFT parameter_type_list PAR_RIGHT 
            {
              TDirectAbstractDeclarator RESULT =null;
		Location plxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location plxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TSParLeft pl = (TSParLeft)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location ptlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location ptlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TParameterTypeList ptl = (TParameterTypeList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location prxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location prxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSParRight pr = (TSParRight)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TDirectAbstractDeclaratorF(pl, ptl, pr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direct_abstract_declarator",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // direct_abstract_declarator ::= direct_abstract_declarator PAR_LEFT PAR_RIGHT 
            {
              TDirectAbstractDeclarator RESULT =null;
		Location dadxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location dadxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TDirectAbstractDeclarator dad = (TDirectAbstractDeclarator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location plxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location plxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSParLeft pl = (TSParLeft)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location prxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location prxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSParRight pr = (TSParRight)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TDirectAbstractDeclaratorF(dad, pl, pr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direct_abstract_declarator",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // direct_abstract_declarator ::= direct_abstract_declarator PAR_LEFT parameter_type_list PAR_RIGHT 
            {
              TDirectAbstractDeclarator RESULT =null;
		Location dadxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location dadxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		TDirectAbstractDeclarator dad = (TDirectAbstractDeclarator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location plxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location plxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TSParLeft pl = (TSParLeft)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location ptlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location ptlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TParameterTypeList ptl = (TParameterTypeList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location prxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location prxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSParRight pr = (TSParRight)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TDirectAbstractDeclaratorF(dad, pl, ptl, pr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direct_abstract_declarator",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // direct_abstract_declarator ::= GENERATOR 
            {
              TDirectAbstractDeclarator RESULT =null;
		Location gxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location gxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSGenerator g = (TSGenerator)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TDirectAbstractDeclaratorG(g); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direct_abstract_declarator",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // direct_abstract_declarator ::= direct_abstract_declarator GENERATOR 
            {
              TDirectAbstractDeclarator RESULT =null;
		Location dadxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location dadxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TDirectAbstractDeclarator dad = (TDirectAbstractDeclarator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location gxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location gxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSGenerator g = (TSGenerator)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TDirectAbstractDeclaratorG(dad, g); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direct_abstract_declarator",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // initializer ::= BRACE_LEFT initializer_list BRACE_RIGHT 
            {
              TInitializer RESULT =null;
		Location blxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location blxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TSBraceLeft bl = (TSBraceLeft)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location ilxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location ilxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TInitializerList il = (TInitializerList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location brxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location brxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSBraceRight br = (TSBraceRight)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TInitializer(bl, il, br); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initializer",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // initializer ::= BRACE_LEFT initializer_list COMMA BRACE_RIGHT 
            {
              TInitializer RESULT =null;
		Location blxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location blxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		TSBraceLeft bl = (TSBraceLeft)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location ilxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ilxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TInitializerList il = (TInitializerList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSComma c = (TSComma)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location brxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location brxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSBraceRight br = (TSBraceRight)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TInitializer(bl, il, c, br); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initializer",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // initializer ::= assignment_expression 
            {
              TInitializer RESULT =null;
		Location aexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location aexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TAssignmentExpression ae = (TAssignmentExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TInitializer(ae); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initializer",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // initializer_list ::= designation initializer 
            {
              TInitializerList RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TDesignation d = (TDesignation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TInitializer i = (TInitializer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TInitializerList(new TDesignationInitializer(d, i)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initializer_list",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // initializer_list ::= initializer 
            {
              TInitializerList RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TInitializer i = (TInitializer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TInitializerList(new TDesignationInitializer(i)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initializer_list",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // initializer_list ::= initializer_list COMMA designation initializer 
            {
              TInitializerList RESULT =null;
		Location ilxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location ilxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		TInitializerList il = (TInitializerList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TSComma c = (TSComma)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TDesignation d = (TDesignation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TInitializer i = (TInitializer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TInitializerList(il, c, new TDesignationInitializer(d, i)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initializer_list",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // initializer_list ::= initializer_list COMMA initializer 
            {
              TInitializerList RESULT =null;
		Location ilxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ilxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TInitializerList il = (TInitializerList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSComma c = (TSComma)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TInitializer i = (TInitializer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TInitializerList(il, c, new TDesignationInitializer(i)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initializer_list",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // designation ::= designator_list ASSIGN 
            {
              TDesignation RESULT =null;
		Location dlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location dlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TDesignatorList dl = (TDesignatorList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSAssign a = (TSAssign)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TDesignation(dl, a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("designation",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // designator_list ::= designator 
            {
              TDesignatorList RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TDesignator d = (TDesignator)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TDesignatorList(d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("designator_list",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // designator_list ::= designator_list designator 
            {
              TDesignatorList RESULT =null;
		Location dlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location dlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TDesignatorList dl = (TDesignatorList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TDesignator d = (TDesignator)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TDesignatorList(dl, d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("designator_list",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // designator ::= BRACKET_LEFT constant_expression BRACKET_RIGHT 
            {
              TDesignator RESULT =null;
		Location blxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location blxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TSBracketLeft bl = (TSBracketLeft)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location cexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location cexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TConstantExpression ce = (TConstantExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location brxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location brxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSBracketRight br = (TSBracketRight)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TDesignator(bl, ce, br); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("designator",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // designator ::= DOT IDENTIFIER 
            {
              TDesignator RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSDot d = (TSDot)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSIdentifier i = (TSIdentifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TDesignator(d, i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("designator",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // static_assert_declaration ::= STATIC_ASSERT PAR_LEFT constant_expression COMMA STRING_LITERAL PAR_RIGHT SEMICOLON 
            {
              TStaticAssertDeclaration RESULT =null;
		Location saxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xleft;
		Location saxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xright;
		TSStaticAssert sa = (TSStaticAssert)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Location plxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location plxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		TSParLeft pl = (TSParLeft)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location cexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location cexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		TConstantExpression ce = (TConstantExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		TSComma c = (TSComma)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location slxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location slxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TSStringLiteral sl = (TSStringLiteral)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location prxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location prxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSParRight pr = (TSParRight)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSSemicolon s = (TSSemicolon)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TStaticAssertDeclaration(sa, pl, ce, c, sl, pr, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("static_assert_declaration",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // statement ::= labeled_statement 
            {
              TStatement RESULT =null;
		Location lsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location lsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TLabeledStatement ls = (TLabeledStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ls; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // NT$1 ::= 
            {
              TStatement RESULT =null;
 parser.getMedium().newScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",86, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // statement ::= NT$1 compound_statement 
            {
              TStatement RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (TStatement) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location csxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location csxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TCompoundStatement cs = (TCompoundStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.getMedium().deleteScope();  RESULT = cs; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // statement ::= expression_statement 
            {
              TStatement RESULT =null;
		Location esxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location esxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TExpressionStatement es = (TExpressionStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = es; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // statement ::= selection_statement 
            {
              TStatement RESULT =null;
		Location ssxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ssxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSelectionStatement ss = (TSelectionStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ss; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // statement ::= iteration_statement 
            {
              TStatement RESULT =null;
		Location isxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location isxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TIterationStatement is = (TIterationStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = is; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // statement ::= jump_statement 
            {
              TStatement RESULT =null;
		Location jsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location jsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TJumpStatement js = (TJumpStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = js; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // labeled_statement ::= IDENTIFIER COLON statement 
            {
              TLabeledStatement RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TSIdentifier i = (TSIdentifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSColon c = (TSColon)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TStatement s = (TStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TLabeledStatement(i, c, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("labeled_statement",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // labeled_statement ::= CASE constant_expression COLON statement 
            {
              TLabeledStatement RESULT =null;
		Location caxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location caxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		TSCase ca = (TSCase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location cexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location cexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TConstantExpression ce = (TConstantExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location coxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location coxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSColon co = (TSColon)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TStatement s = (TStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TLabeledStatement(ca, ce, co, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("labeled_statement",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // labeled_statement ::= DEFAULT COLON statement 
            {
              TLabeledStatement RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TSDefault d = (TSDefault)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSColon c = (TSColon)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TStatement s = (TStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TLabeledStatement(d, c, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("labeled_statement",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // compound_statement ::= BRACE_LEFT BRACE_RIGHT 
            {
              TCompoundStatement RESULT =null;
		Location blxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location blxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSBraceLeft bl = (TSBraceLeft)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location brxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location brxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSBraceRight br = (TSBraceRight)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TCompoundStatement(bl, br); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_statement",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // compound_statement ::= BRACE_LEFT block_item_list BRACE_RIGHT 
            {
              TCompoundStatement RESULT =null;
		Location blxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location blxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TSBraceLeft bl = (TSBraceLeft)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location bilxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location bilxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TBlockItemList bil = (TBlockItemList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location brxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location brxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSBraceRight br = (TSBraceRight)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TCompoundStatement(bl, bil, br); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_statement",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // compound_statement ::= BRACE_LEFT block_item_list finally_statement BRACE_RIGHT 
            {
              TCompoundStatement RESULT =null;
		Location blxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location blxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		TSBraceLeft bl = (TSBraceLeft)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location bilxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location bilxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TBlockItemList bil = (TBlockItemList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location fsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location fsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TFinallyStatement fs = (TFinallyStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location brxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location brxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSBraceRight br = (TSBraceRight)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TCompoundStatement(bl, bil, fs, br); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_statement",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // finally_statement ::= FINALLY statement 
            {
              TFinallyStatement RESULT =null;
		Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSFinally f = (TSFinally)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TStatement s = (TStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TFinallyStatement(f, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("finally_statement",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // block_item_list ::= block_item 
            {
              TBlockItemList RESULT =null;
		Location bixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TBlockItem bi = (TBlockItem)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TBlockItemList(bi); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_item_list",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // block_item_list ::= block_item_list block_item 
            {
              TBlockItemList RESULT =null;
		Location bilxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location bilxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TBlockItemList bil = (TBlockItemList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location bixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TBlockItem bi = (TBlockItem)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TBlockItemList(bil, bi); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_item_list",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // block_item ::= declaration 
            {
              TBlockItem RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TDeclaration d = (TDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TBlockItemD(d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_item",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // block_item ::= statement 
            {
              TBlockItem RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TStatement s = (TStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TBlockItemS(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_item",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // block_item ::= error SEMICOLON 
            {
              TBlockItem RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSSemicolon s = (TSSemicolon)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TBlockItemS(new TExpressionStatement(s)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_item",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // expression_statement ::= SEMICOLON 
            {
              TExpressionStatement RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSSemicolon s = (TSSemicolon)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TExpressionStatement(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_statement",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // expression_statement ::= expression SEMICOLON 
            {
              TExpressionStatement RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TExpression e = (TExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSSemicolon s = (TSSemicolon)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TExpressionStatement(e, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_statement",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // selection_statement ::= IF PAR_LEFT expression PAR_RIGHT statement ELSE statement 
            {
              TSelectionStatement RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xright;
		TSIf i = (TSIf)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Location plxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location plxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		TSParLeft pl = (TSParLeft)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		TExpression e = (TExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location prxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location prxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		TSParRight pr = (TSParRight)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location s1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location s1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TStatement s1 = (TStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location elxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location elxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSElse el = (TSElse)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location s2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location s2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TStatement s2 = (TStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TSelectionStatement(i, pl, e, pr, s1, el, s2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selection_statement",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // selection_statement ::= IF PAR_LEFT expression PAR_RIGHT statement 
            {
              TSelectionStatement RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		TSIf i = (TSIf)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location plxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location plxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		TSParLeft pl = (TSParLeft)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TExpression e = (TExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location prxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location prxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSParRight pr = (TSParRight)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TStatement s = (TStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TSelectionStatement(i, pl, e, pr, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selection_statement",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // selection_statement ::= SWITCH PAR_LEFT expression PAR_RIGHT statement 
            {
              TSelectionStatement RESULT =null;
		Location swxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location swxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		TSSwitch sw = (TSSwitch)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location plxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location plxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		TSParLeft pl = (TSParLeft)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TExpression e = (TExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location prxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location prxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSParRight pr = (TSParRight)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TStatement s = (TStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TSelectionStatement(sw, pl, e, pr, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selection_statement",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // iteration_statement ::= WHILE PAR_LEFT expression PAR_RIGHT statement 
            {
              TIterationStatement RESULT =null;
		Location wxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location wxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		TSWhile w = (TSWhile)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location plxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location plxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		TSParLeft pl = (TSParLeft)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TExpression e = (TExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location prxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location prxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSParRight pr = (TSParRight)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TStatement s = (TStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TIterationStatementW(w, pl, e, pr, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iteration_statement",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // iteration_statement ::= DO statement WHILE PAR_LEFT expression PAR_RIGHT SEMICOLON 
            {
              TIterationStatement RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xright;
		TSDo d = (TSDo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		TStatement s = (TStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location wxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location wxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		TSWhile w = (TSWhile)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location plxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location plxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		TSParLeft pl = (TSParLeft)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TExpression e = (TExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location prxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location prxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSParRight pr = (TSParRight)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location sexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSSemicolon se = (TSSemicolon)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TIterationStatementD(d, s, w, pl, e, pr, se); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iteration_statement",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // iteration_statement ::= FOR PAR_LEFT expression_statement expression_statement PAR_RIGHT statement 
            {
              TIterationStatement RESULT =null;
		Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		TSFor f = (TSFor)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location plxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location plxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		TSParLeft pl = (TSParLeft)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location es1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location es1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		TExpressionStatement es1 = (TExpressionStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location es2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location es2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TExpressionStatement es2 = (TExpressionStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location prxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location prxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSParRight pr = (TSParRight)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TStatement s = (TStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TIterationStatementF(f, pl, es1, es2, pr, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iteration_statement",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // iteration_statement ::= FOR PAR_LEFT expression_statement expression_statement expression PAR_RIGHT statement 
            {
              TIterationStatement RESULT =null;
		Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xleft;
		Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xright;
		TSFor f = (TSFor)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Location plxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location plxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		TSParLeft pl = (TSParLeft)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location es1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location es1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		TExpressionStatement es1 = (TExpressionStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location es2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location es2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		TExpressionStatement es2 = (TExpressionStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TExpression e = (TExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location prxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location prxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSParRight pr = (TSParRight)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TStatement s = (TStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TIterationStatementF(f, pl, es1, es2, e, pr, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iteration_statement",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // iteration_statement ::= FOR PAR_LEFT declaration expression_statement PAR_RIGHT statement 
            {
              TIterationStatement RESULT =null;
		Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		TSFor f = (TSFor)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location plxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location plxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		TSParLeft pl = (TSParLeft)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		TDeclaration d = (TDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location esxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location esxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TExpressionStatement es = (TExpressionStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location prxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location prxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSParRight pr = (TSParRight)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TStatement s = (TStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TIterationStatementF(f, pl, d, es, pr, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iteration_statement",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // iteration_statement ::= FOR PAR_LEFT declaration expression_statement expression PAR_RIGHT statement 
            {
              TIterationStatement RESULT =null;
		Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xleft;
		Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xright;
		TSFor f = (TSFor)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Location plxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location plxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		TSParLeft pl = (TSParLeft)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		TDeclaration d = (TDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location esxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location esxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		TExpressionStatement es = (TExpressionStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TExpression e = (TExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location prxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location prxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSParRight pr = (TSParRight)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TStatement s = (TStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TIterationStatementF(f, pl, d, es, e, pr, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iteration_statement",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // jump_statement ::= GOTO IDENTIFIER SEMICOLON 
            {
              TJumpStatement RESULT =null;
		Location gxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location gxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TSGoto g = (TSGoto)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSIdentifier i = (TSIdentifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSSemicolon s = (TSSemicolon)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TJumpStatement(g, i, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jump_statement",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */
  /** Method 1 with the actual generated action code for actions 300 to 600. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000001(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // jump_statement ::= CONTINUE SEMICOLON 
            {
              TJumpStatement RESULT =null;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSContinue c = (TSContinue)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSSemicolon s = (TSSemicolon)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TJumpStatement(c, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jump_statement",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // jump_statement ::= BREAK SEMICOLON 
            {
              TJumpStatement RESULT =null;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSBreak b = (TSBreak)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSSemicolon s = (TSSemicolon)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TJumpStatement(b, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jump_statement",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // jump_statement ::= RETURN SEMICOLON 
            {
              TJumpStatement RESULT =null;
		Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSReturn r = (TSReturn)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSSemicolon s = (TSSemicolon)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TJumpStatement(r, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jump_statement",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // jump_statement ::= RETURN assignment_expression SEMICOLON 
            {
              TJumpStatement RESULT =null;
		Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TSReturn r = (TSReturn)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TAssignmentExpression e = (TAssignmentExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSSemicolon s = (TSSemicolon)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TJumpStatement(r, e, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jump_statement",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // jump_statement ::= WITH assignment_expression SEMICOLON 
            {
              TJumpStatement RESULT =null;
		Location wxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location wxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TSWith w = (TSWith)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TAssignmentExpression e = (TAssignmentExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSSemicolon s = (TSSemicolon)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TJumpStatement(w, e, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jump_statement",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // jump_statement ::= CUT SEMICOLON 
            {
              TJumpStatement RESULT =null;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSCut c = (TSCut)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSSemicolon s = (TSSemicolon)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TJumpStatement(c, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jump_statement",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // jump_statement ::= YIELD assignment_expression SEMICOLON 
            {
              TJumpStatement RESULT =null;
		Location yxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location yxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TSYield y = (TSYield)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TAssignmentExpression e = (TAssignmentExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSSemicolon s = (TSSemicolon)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TJumpStatement(y, e, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jump_statement",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // jump_statement ::= YIELD SEMICOLON 
            {
              TJumpStatement RESULT =null;
		Location yxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location yxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TSYield y = (TSYield)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSSemicolon s = (TSSemicolon)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TJumpStatement(y, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jump_statement",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // translation_unit ::= external_declaration 
            {
              TTranslationUnit RESULT =null;
		Location edxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location edxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TExternalDeclaration ed = (TExternalDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TTranslationUnit(ed); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("translation_unit",81, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // translation_unit ::= translation_unit external_declaration 
            {
              TTranslationUnit RESULT =null;
		Location tuxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location tuxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TTranslationUnit tu = (TTranslationUnit)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location edxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location edxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TExternalDeclaration ed = (TExternalDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TTranslationUnit(tu, ed); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("translation_unit",81, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // external_declaration ::= function_definition 
            {
              TExternalDeclaration RESULT =null;
		Location fdxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location fdxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TFunctionDefinition fd = (TFunctionDefinition)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TExternalDeclarationFD(fd); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("external_declaration",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // external_declaration ::= declaration 
            {
              TExternalDeclaration RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TDeclaration d = (TDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TExternalDeclarationD(d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("external_declaration",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // external_declaration ::= error declaration 
            {
              TExternalDeclaration RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TDeclaration d = (TDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TExternalDeclarationD(d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("external_declaration",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // external_declaration ::= error function_definition 
            {
              TExternalDeclaration RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location fdxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location fdxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TFunctionDefinition fd = (TFunctionDefinition)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TExternalDeclarationFD(fd); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("external_declaration",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // external_declaration ::= error compound_statement 
            {
              TExternalDeclaration RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location csxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location csxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TCompoundStatement cs = (TCompoundStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TExternalDeclarationFD(new TFunctionDefinition(new TDeclarationSpecifiers(new TTypeSpecifier(new TSVoid())), new TDeclarator(new TDirectDeclaratorI(new TSIdentifier(""))), cs)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("external_declaration",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // external_declaration ::= error SEMICOLON 
            {
              TExternalDeclaration RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TSSemicolon s = (TSSemicolon)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TExternalDeclarationD(new TDeclarationDS(new TDeclarationSpecifiers(new TTypeSpecifier(new TSVoid())), s)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("external_declaration",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // NT$2 ::= 
            {
              TFunctionDefinition RESULT =null;
		Location dsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location dsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TDeclarationSpecifiers ds = (TDeclarationSpecifiers)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TDeclarator d = (TDeclarator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location dlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TDeclarationList dl = (TDeclarationList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 parser.getMedium().newScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // function_definition ::= declaration_specifiers declarator declaration_list NT$2 compound_statement 
            {
              TFunctionDefinition RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (TFunctionDefinition) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location dsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location dsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		TDeclarationSpecifiers ds = (TDeclarationSpecifiers)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		TDeclarator d = (TDeclarator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location dlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location dlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TDeclarationList dl = (TDeclarationList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location csxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location csxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TCompoundStatement cs = (TCompoundStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.getMedium().deleteScope();  RESULT = new TFunctionDefinition(ds, d, dl, cs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_definition",83, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // NT$3 ::= 
            {
              TFunctionDefinition RESULT =null;
		Location dsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location dsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TDeclarationSpecifiers ds = (TDeclarationSpecifiers)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TDeclarator d = (TDeclarator)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 parser.getMedium().newScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",88, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // function_definition ::= declaration_specifiers declarator NT$3 compound_statement 
            {
              TFunctionDefinition RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (TFunctionDefinition) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location dsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location dsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		TDeclarationSpecifiers ds = (TDeclarationSpecifiers)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TDeclarator d = (TDeclarator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location csxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location csxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TCompoundStatement cs = (TCompoundStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.getMedium().deleteScope();  RESULT = new TFunctionDefinition(ds, d, cs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_definition",83, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // declaration_list ::= declaration 
            {
              TDeclarationList RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TDeclaration d = (TDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TDeclarationList(d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_list",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // declaration_list ::= declaration_list declaration 
            {
              TDeclarationList RESULT =null;
		Location dlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location dlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TDeclarationList dl = (TDeclarationList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TDeclaration d = (TDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TDeclarationList(dl, d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_list",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* select the action handler based on the action number */
      switch (CUP$Parser$act_num/300)
        {
          /*. . . . . . . . 0 < #action < 300. . . . . . . . . . . .*/
          case 0: 
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
          /*. . . . . . . . 300 < #action < 600. . . . . . . . . . . .*/
          case 1: 
              return CUP$Parser$do_action_part00000001(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
          /* . . . no valid action number: . . .*/
          default:
            throw new Exception("Invalid action number found in internal parse table");

        }      /* end of switch */
    }
}

